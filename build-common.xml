<project name="jminor-common" default="build" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:jacoco="antlib:org.jacoco.ant">

  <property file="${project.root}/build.properties"/>

  <path id="lib.ant.util">
    <fileset dir="${project.root}/core/${lib}/ant.util"/>
  </path>

  <path id="lib.compile">
    <fileset dir="${lib}/compile"/>
  </path>

  <path id="lib.runtime">
    <fileset dir="${lib}/runtime"/>
  </path>

  <path id="lib.test">
    <path location="${build.main}"/>
    <path location="${build.test}"/>
    <fileset dir="${lib}/test"/>
  </path>

  <condition property="keystore.available">
    <available file="${resources.security}/JMinorServerKeystore"/>
  </condition>

  <target name="init">
    <mkdir dir="build/main"/>
    <mkdir dir="build/test"/>
  </target>

  <target name="clean">
    <delete dir="${build.root}"/>
    <delete dir="${javadoc}"/>
    <delete dir="${dist}"/>
    <delete dir="${test}"/>
  </target>

  <target name="resolve_libraries"
          description="Resolves all libraries according to ivy.xml">
    <mkdir dir="${project.root}/core/${lib}/ant.util"/>
    <get src="http://search.maven.org/remotecontent?filepath=org/apache/ivy/ivy/2.4.0/ivy-2.4.0.jar"
         dest="${project.root}/core/${lib}/ant.util/ivy-2.4.0.jar" skipexisting="true"/>
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="lib.ant.util"/>
    <ivy:settings file="${project.root}/ivysettings.xml"/>
    <ivy:retrieve pattern="${lib}/[conf]/[artifact]-[revision].[ext]" sync="true"/>
  </target>

  <target name="build" depends="init, resolve_libraries" description="Builds this module">
    <javac destdir="build/main" debug="${build.debuginfo}" includeantruntime="false">
      <src path="${src.main}"/>
      <classpath>
        <path refid="lib.compile"/>
      </classpath>
    </javac>
    <copy todir="${build.main}">
      <fileset dir="${src.main}" excludes="**/*.java"/>
    </copy>
    <javac destdir="${build.test}" debug="${build.debuginfo}" includeantruntime="false">
      <src path="${src.test}"/>
      <classpath>
        <path refid="lib.test"/>
      </classpath>
    </javac>
    <copy todir="${build.test}">
      <fileset dir="${src.test}" excludes="**/*.java"/>
    </copy>
  </target>

  <target name="run_unit_tests" depends="clean, build"
          description="Runs the framework unit tests with JaCoCo coverage">
    <delete dir="${test.reports}" includeEmptyDirs="true"/>
    <delete dir="${test.reports.html}" includeEmptyDirs="true"/>
    <delete dir="${test.coveragereport.xml}" includeEmptyDirs="true"/>
    <delete dir="${test.coveragereport.html}" includeEmptyDirs="true"/>

    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml" classpathref="lib.ant.util"/>

    <jacoco:coverage destfile="${test.reports}/jacoco.exec">
      <junit printsummary="yes" haltonfailure="true" haltonerror="true" fork="yes" forkmode="once" dir="${basedir}">
        <formatter type="xml" usefile="true"/>
        <classpath refid="lib.test"/>
        <jvmarg value="-Djava.security.policy=resources/security/all_permissions.policy"/>
        <jvmarg value="-Djminor.db.type=${junit.db.type}"/>
        <jvmarg value="-Djminor.db.host=${junit.db.host}"/>
        <jvmarg value="-Djminor.db.port=${junit.db.port}"/>
        <jvmarg value="-Djminor.db.sid=${junit.db.sid}"/>
        <jvmarg value="-Djminor.db.embedded=${junit.db.embedded}"/>
        <jvmarg value="-Djminor.db.embeddedInMemory=${junit.db.embeddedInMemory}"/>
        <jvmarg value="-Djminor.db.initScript=${basedir}/${junit.db.initScript}"/>
        <jvmarg value="-Djminor.unittest.username=${junit.username}"/>
        <jvmarg value="-Djminor.unittest.password=${junit.password}"/>
        <batchtest todir="${test.reports}">
          <fileset dir="${src.test}" includes="**/*Test.java" excludes="**/Abstract*Test.java"/>
        </batchtest>
      </junit>
    </jacoco:coverage>

    <mkdir dir="${test.reports.html}"/>
    <junitreport todir="${test.reports}">
      <fileset dir="${test.reports}" includes="TEST-*.xml"/>
      <report format="frames" todir="${test.reports.html}"/>
    </junitreport>

    <mkdir dir="${test.coveragereport.xml}"/>
    <jacoco:report>
      <executiondata>
        <file file="${test.reports}/jacoco.exec" />
      </executiondata>

      <structure name="JMinor JaCoCo Results">
        <classfiles>
          <fileset dir="${build.main}"/>
        </classfiles>
        <sourcefiles encoding="UTF-8">
          <fileset dir="${src.main}"/>
        </sourcefiles>
      </structure>

      <html destdir="${test.coveragereport.html}" />
      <xml destfile="${test.coveragereport.xml}/report.xml" />
    </jacoco:report>
  </target>

  <target name="javadoc" depends="build">
    <javadoc destdir="${javadoc}" sourcepath="src/main/java" packagenames="org.jminor.*" Encoding="UTF-8"
             docencoding="UTF-8" author="true" version="true" use="true"
             windowtitle="JMinor v${version} ${ant.project.name}" doctitle="JMinor v${version} ${ant.project.name}">
      <classpath>
        <path refid="lib.test"/>
      </classpath>
      <link href="http://download.oracle.com/javase/8/docs/api/"/>
      <link offline="true" href="http://jminor.org/data/media/project/docs/api/" packagelistloc="javadoc"/>
    </javadoc>
  </target>

  <target name="dist" depends="clean, build, javadoc">
    <tstamp />
    <mkdir dir="${build.main}/META-INF"/>
    <manifest file="build/main/META-INF/MANIFEST.MF">
      <attribute name="Specification-Title" value="${ant.project.name}"/>
      <attribute name="Specification-Version" value="${version}"/>
      <attribute name="Specification-Vendor" value="JMinor"/>
      <attribute name="Implementation-Title" value="${ant.project.name}"/>
      <attribute name="Implementation-Version" value="${version}"/>
      <attribute name="Implementation-Vendor" value="JMinor"/>
      <attribute name="Implementation-Vendor-Id" value="org.jminor"/>
      <attribute name="Implementation-URL" value="http://jminor.org"/>
      <attribute name="Build-Jdk" value="${java.version}"/>
      <attribute name="Built-By" value="${user.name}"/>
      <attribute name="Build-Time" value="${DSTAMP}${TSTAMP}"/>
    </manifest>
    <mkdir dir="${dist}"/>
    <jar jarfile="dist/${ant.project.name}.jar" basedir="${build.main}"
         manifest="${build.main}/META-INF/MANIFEST.MF"/>
    <jar jarfile="dist/${ant.project.name}-sources.jar" basedir="${src.main}"
         manifest="${build.main}/META-INF/MANIFEST.MF"/>
    <jar jarfile="dist/${ant.project.name}-javadoc.jar" basedir="${javadoc}"
         manifest="${build.main}/META-INF/MANIFEST.MF"/>
  </target>

  <target name="publish" depends="dist" description="Publishes the module artifacts">
    <fail unless="version">Version information not set</fail>
    <copy file="ivy.xml" tofile="ivy.xml.bak" overwrite="true"/>
    <ivy:settings file="${project.root}/ivysettings.xml"/>
    <ivy:resolve/>
    <ivy:deliver deliverpattern="ivy.xml" pubrevision="${version}"/>
    <ivy:makepom ivyfile="ivy.xml" pomfile="${dist}/${ant.project.name}.pom">
      <mapping conf="compile" scope="compile" />
      <mapping conf="runtime" scope="runtime" />
      <mapping conf="test" scope="test" />
      <mapping conf="sources" scope="sources" />
      <mapping conf="javadoc" scope="javadoc" />
    </ivy:makepom>
    <ivy:publish pubrevision="${version}" status="${release.status}" resolver="publish.${release.status}"
                 overwrite="true" forcedeliver="true">
      <artifacts pattern="${dist}/[artifact].[ext]"/>
    </ivy:publish>
    <move file="ivy.xml.bak" tofile="ivy.xml"/>
  </target>

  <target name="report">
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="lib.ant.util"/>
    <ivy:settings file="${project.root}/ivysettings.xml"/>
    <ivy:resolve/>
    <ivy:report conf="runtime" graph="false" todir="ivy_report"/>
  </target>

  <target name="create_keystore" unless="keystore.available"
          description="Creates a client/server keystore for running the demos">
    <genkey alias="JMinorServer" keyalg="RSA" storepass="${demo.server.keystorePassword}" validity="365"
            keystore="${resources.security}/JMinorServerKeystore">
      <dname>
        <param name="CN" value="Dummy"/>
        <param name="OU" value="dummy"/>
        <param name="O" value="dummy.org"/>
        <param name="C" value="DU"/>
      </dname>
    </genkey>
    <exec executable="${java.bin}/keytool" failonerror="true">
      <arg value="-exportcert"/>
      <arg line="-keystore ${resources.security}/JMinorServerKeystore"/>
      <arg line="-alias JMinorServer"/>
      <arg line="-storepass ${demo.server.keystorePassword}"/>
      <arg line="-rfc"/>
      <arg line="-file ${resources.security}/JMinorServer.cer"/>
    </exec>
    <exec executable="${java.bin}/keytool" failonerror="true">
      <arg value="-import"/>
      <arg line="-alias JMinorServer"/>
      <arg line="-storepass ${demo.server.keystorePassword}"/>
      <arg line="-file ${resources.security}/JMinorServer.cer"/>
      <arg line="-keystore ${resources.security}/JMinorClientTruststore"/>
      <arg line="-noprompt"/>
    </exec>
    <copy file="${resources.security}/JMinorClientTruststore" tofile="${resources.security}/JMinorServerMonitorTruststore"/>
    <delete file="${resources.security}/JMinorServer.cer"/>
  </target>

  <macrodef name="dist_module">
    <attribute name="module-name"/>
    <attribute name="includes" default=""/>
    <attribute name="excludes" default=""/>
    <attribute name="build.basedir" default="${build.main}"/>
    <attribute name="src.basedir" default="${src.main}"/>
    <sequential>
      <jar jarfile="${dist}/@{module-name}/@{module-name}.jar" basedir="@{build.basedir}"
           manifest="${build.main}/META-INF/MANIFEST.MF"
           includes="@{includes}" excludes="@{excludes}"/>
      <jar jarfile="${dist}/@{module-name}/@{module-name}-sources.jar" basedir="@{src.basedir}"
           manifest="${build.main}/META-INF/MANIFEST.MF"
           includes="@{includes}" excludes="@{excludes}"/>
      <jar jarfile="${dist}/@{module-name}/@{module-name}-javadoc.jar" basedir="${javadoc}"
           manifest="${build.main}/META-INF/MANIFEST.MF"
           includes="@{includes}" excludes="@{excludes}"/>
    </sequential>
  </macrodef>
</project>