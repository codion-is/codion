<project name="common" default="build" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:jacoco="antlib:org.jacoco.ant">

  <property file="${project.root}/build.properties"/>

  <import file="dependencies.xml"/>
  <import file="build-macros.xml"/>

  <property name="ivy.pom.version" value="${version}"/>
  <property name="ivy.pom.url" value="http://jminor.org"/>

  <path id="lib.ant.util">
    <fileset dir="${project.root}/${ant.lib}"/>
  </path>

  <path id="lib.compile">
    <fileset dir="${lib}/compile"/>
  </path>

  <path id="lib.runtime">
    <fileset dir="${lib}/runtime"/>
  </path>

  <path id="lib.test">
    <path location="${build.main}"/>
    <path location="${build.test}"/>
    <fileset dir="${lib}/test"/>
  </path>

  <available property="build.libraries.installed" file="${project.root}/${ant.lib}/ivy-2.4.0.jar"/>

  <target name="retrieve_build_libraries" unless="build.libraries.installed">
    <mkdir dir="${project.root}/${ant.lib}"/>
    <get src="http://search.maven.org/remotecontent?filepath=org/apache/ivy/ivy/2.4.0/ivy-2.4.0.jar"
         dest="${project.root}/${ant.lib}/ivy-2.4.0.jar" skipexisting="true"/>
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="lib.ant.util"/>
    <ivy:settings file="${project.root}/ivysettings.xml"/>
    <ivy:resolve file="${project.root}/build-ivy.xml"/>
    <ivy:retrieve pattern="${project.root}/${ant.lib}/[artifact]-[revision].[ext]" sync="true"/>
  </target>

  <target name="clean">
    <delete dir="${build.root}"/>
    <delete dir="${javadoc}"/>
    <delete dir="${package}"/>
    <delete dir="${test}"/>
  </target>

  <target name="retrieve_libraries" depends="retrieve_build_libraries"
          description="Resolves all libraries according to ivy.xml">
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="lib.ant.util"/>
    <ivy:settings file="${project.root}/ivysettings.xml"/>
    <ivy:resolve file="ivy.xml"/>
    <ivy:retrieve pattern="${lib}/[conf]/[artifact]-[revision].[ext]" sync="true"/>
  </target>

  <target name="build" depends="retrieve_libraries" description="Builds this module">
    <mkdir dir="build/main"/>
    <javac destdir="build/main" debug="${build.debuginfo}" includeantruntime="false">
      <src path="${src.main}"/>
      <classpath>
        <path refid="lib.compile"/>
      </classpath>
    </javac>
    <copy todir="${build.main}">
      <fileset dir="${src.main}" excludes="**/*.java"/>
    </copy>
    <mkdir dir="build/test"/>
    <javac destdir="${build.test}" debug="${build.debuginfo}" includeantruntime="false">
      <src path="${src.test}"/>
      <classpath>
        <path refid="lib.test"/>
      </classpath>
    </javac>
    <copy todir="${build.test}">
      <fileset dir="${src.test}" excludes="**/*.java"/>
    </copy>
  </target>

  <target name="run_unit_tests" depends="build"
          description="Runs the framework unit tests with JaCoCo coverage">
    <delete dir="${test.reports}" includeEmptyDirs="true"/>
    <delete dir="${test.reports.html}" includeEmptyDirs="true"/>
    <delete dir="${test.coveragereport.xml}" includeEmptyDirs="true"/>
    <delete dir="${test.coveragereport.html}" includeEmptyDirs="true"/>

    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml" classpathref="lib.ant.util"/>

    <jacoco:coverage destfile="${test.reports}/jacoco.exec">
      <junit printsummary="yes" haltonfailure="true" haltonerror="true" fork="yes" forkmode="once" dir="${basedir}">
        <formatter type="xml" usefile="true"/>
        <classpath refid="lib.test"/>
        <jvmarg value="-Djava.security.policy=resources/security/all_permissions.policy"/>
        <jvmarg value="-Djminor.db.type=${junit.db.type}"/>
        <jvmarg value="-Djminor.db.host=${junit.db.host}"/>
        <jvmarg value="-Djminor.db.port=${junit.db.port}"/>
        <jvmarg value="-Djminor.db.sid=${junit.db.sid}"/>
        <jvmarg value="-Djminor.db.embedded=${junit.db.embedded}"/>
        <jvmarg value="-Djminor.db.embeddedInMemory=${junit.db.embeddedInMemory}"/>
        <jvmarg value="-Djminor.db.initScript=${basedir}/${junit.db.initScript}"/>
        <jvmarg value="-Djminor.unittest.username=${junit.username}"/>
        <jvmarg value="-Djminor.unittest.password=${junit.password}"/>
        <batchtest todir="${test.reports}">
          <fileset dir="${src.test}" includes="**/*Test.java" excludes="**/Abstract*Test.java"/>
        </batchtest>
      </junit>
    </jacoco:coverage>

    <mkdir dir="${test.reports.html}"/>
    <junitreport todir="${test.reports}">
      <fileset dir="${test.reports}" includes="TEST-*.xml"/>
      <report format="frames" todir="${test.reports.html}"/>
    </junitreport>

    <mkdir dir="${test.coveragereport.xml}"/>
    <jacoco:report>
      <executiondata>
        <file file="${test.reports}/jacoco.exec" />
      </executiondata>

      <structure name="JMinor JaCoCo Results">
        <classfiles>
          <fileset dir="${build.main}"/>
        </classfiles>
        <sourcefiles encoding="UTF-8">
          <fileset dir="${src.main}"/>
        </sourcefiles>
      </structure>

      <html destdir="${test.coveragereport.html}" />
      <xml destfile="${test.coveragereport.xml}/report.xml" />
    </jacoco:report>
  </target>

  <target name="javadoc" depends="build">
    <javadoc destdir="${javadoc}" sourcepath="src/main/java" packagenames="org.jminor.*" Encoding="UTF-8"
             docencoding="UTF-8" author="true" version="true" use="true"
             windowtitle="JMinor v${version} ${ant.project.name}" doctitle="JMinor v${version} ${ant.project.name}">
      <classpath>
        <path refid="lib.test"/>
      </classpath>
      <link href="http://download.oracle.com/javase/8/docs/api/"/>
      <link offline="true" href="http://jminor.org/data/media/project/docs/api/" packagelistloc="javadoc"/>
    </javadoc>
  </target>

  <target name="package" depends="build, javadoc">
    <package_module/>
  </target>

  <target name="deploy" depends="package" description="Publishes the module artifacts to a remote repository">
    <publish resolver="deploy.${release.status}" artifact-dir="${package}"/>
  </target>

  <target name="install" depends="package" description="Publishes the module artifacts to a local repository">
    <publish resolver="install-local-publish" artifact-dir="${package}"/>
  </target>

  <target name="install_with_dependencies">
    <antcall target="depend.${ant.project.name}">
      <param name="dependency.target" value="install"/>
    </antcall>
  </target>

  <target name="report">
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="lib.ant.util"/>
    <ivy:settings file="${project.root}/ivysettings.xml"/>
    <ivy:resolve/>
    <ivy:report conf="runtime" graph="false" todir="ivy_report"/>
  </target>
</project>