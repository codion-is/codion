<?xml version="1.0" encoding="UTF-8"?>
<project name="jminor" default="dist" basedir=".">

  <description>JMinor RAD Framework build file</description>

  <property file="build.properties"/>
  <property file="user.properties"/>

  <path id="lib.build">
    <fileset dir="${lib}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <path id="cobertura.classpath">
    <fileset dir="${cobertura.dir}">
      <include name="cobertura.jar" />
      <include name="lib/**/*.jar" />
    </fileset>
  </path>

  <path id="lib.client.remote">
    <pathelement location="${lib.jasperreports.logging}"/>
    <pathelement location="${lib.jasperreports.collections}"/>
    <pathelement location="${lib.jasperreports.base}"/>
    <pathelement location="${lib.jcalendar}"/>
    <pathelement location="${lib.json}"/>
    <pathelement location="${lib.slf4j.api}"/>
    <pathelement location="${lib.logback.classic}"/>
    <pathelement location="${lib.logback.core}"/>
  </path>

  <path id="lib.client.local">
    <path refid="lib.client.remote"/>
    <pathelement location="${lib.h2}"/>
  </path>

  <path id="lib.server">
    <pathelement location="${lib.h2}"/>
    <pathelement location="${lib.json}"/>
    <pathelement location="${lib.slf4j.api}"/>
    <pathelement location="${lib.logback.classic}"/>
    <pathelement location="${lib.logback.core}"/>
    <pathelement location="${lib.jasperreports.base}"/>
    <pathelement location="${lib.jasperreports.logging}"/>
    <pathelement location="${lib.jasperreports.collections}"/>
  </path>

  <path id="lib.server.monitor">
    <pathelement location="${lib.slf4j.api}"/>
    <pathelement location="${lib.logback.classic}"/>
    <pathelement location="${lib.logback.core}"/>
    <pathelement location="${lib.jcalendar}"/>
    <pathelement location="${lib.jfreechart.base}"/>
    <pathelement location="${lib.jfreechart.common}"/>
  </path>

  <path id="classes.base">
    <pathelement path="${build.base}"/>
    <pathelement path="${build.plugins}"/>
    <pathelement path="${build.demos}"/>
  </path>

  <path id="classes.test">
    <pathelement path="${build.test}"/>
  </path>

  <path id="classes.demos">
    <pathelement path="${build.demos}"/>
  </path>

  <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

  <fileset id="common_resources" dir="${src}" includes=
          "org/jminor/common/**/*.gif, org/jminor/common/**/*.png, org/jminor/common/**/*.properties, org/jminor/common/**/*.txt, logback.xml"/>
  <fileset id="framework_resources" dir="${src}" includes=
          "org/jminor/framework/**/*.gif, org/jminor/framework/**/*.png, org/jminor/framework/**/*.properties, org/jminor/framework/**/*.txt"/>
  <fileset id="test_resources" dir="${srctest}" includes=
          "org/jminor/**/*.gif, org/jminor/**/*.properties, org/jminor/**/*.txt"/>
  <fileset id="demos_resources" dir="${srcdemos}" includes=
          "org/jminor/framework/**/*.gif, org/jminor/framework/**/*.png, org/jminor/framework/**/*.properties, org/jminor/framework/**/*.txt"/>
  <fileset id="plugins_resources" dir="${srcplugins}" includes=
          "org/jminor/framework/**/*.gif, org/jminor/framework/**/*.png, org/jminor/framework/**/*.properties, org/jminor/framework/**/*.txt"/>

  <target name="clean"
          description="Clean all output and generated dirs">
    <delete dir="${build.base}" includeEmptyDirs="true"/>
    <delete dir="${build.demos}" includeEmptyDirs="true"/>
    <delete dir="${build.plugins}" includeEmptyDirs="true"/>
    <delete dir="${build.test}" includeEmptyDirs="true"/>
    <delete dir="${build.root}" includeEmptyDirs="true"/>
    <delete dir="${test.reports}" includeEmptyDirs="true"/>
    <delete dir="${test.reports.html}" includeEmptyDirs="true"/>
    <!--<delete dir="${test.coveragereport.xml}" includeEmptyDirs="true"/>-->
    <!--<delete dir="${test.coveragereport.html}" includeEmptyDirs="true"/>-->
    <delete dir="${test}" includeEmptyDirs="true"/>
  </target>

  <target name="build"
          description="Compiles all source files">
    <mkdir dir="${build.base}"/>
    <mkdir dir="${build.plugins}"/>
    <mkdir dir="${build.demos}"/>
    <mkdir dir="${build.test}"/>

    <javac destdir="${build.base}" debug="${build.debuginfo}">
      <src path="${src}"/>
      <classpath refid="lib.build"/>
    </javac>

    <rmic base="${build.base}" stubversion="1.2"
          includes="org/jminor/common/server/AbstractRemoteServer.class,
                                         org/jminor/common/server/loadtest/RemoteLoadTestAdapter.class
                                         org/jminor/framework/server/EntityDbRemoteAdapter.class,
                                         org/jminor/framework/server/EntityDbRemoteServerAdmin.class">
      <classpath refid="lib.build"/>
    </rmic>

    <copy todir="${build.base}">
      <fileset refid="common_resources"/>
      <fileset refid="framework_resources"/>
    </copy>

    <javac destdir="${build.plugins}" debug="${build.debuginfo}">
      <src path="${srcplugins}"/>
      <classpath>
        <path refid="lib.build"/>
        <path location="${build.base}"/>
      </classpath>
    </javac>

    <copy todir="${build.plugins}">
      <fileset refid="plugins_resources"/>
    </copy>

    <javac destdir="${build.demos}" debug="${build.debuginfo}">
      <src path="${srcdemos}"/>
      <classpath>
        <path refid="lib.build"/>
        <path location="${build.base}"/>
        <path location="${build.plugins}"/>
      </classpath>
    </javac>

    <copy todir="${build.demos}">
      <fileset refid="demos_resources"/>
    </copy>

    <javac destdir="${build.test}" debug="${build.debuginfo}">
      <src path="${srctest}"/>
      <classpath>
        <path refid="lib.build"/>
        <path location="${build.base}"/>
        <path location="${build.plugins}"/>
        <path location="${build.demos}"/>
      </classpath>
    </javac>

    <copy todir="${build.test}">
      <fileset refid="test_resources"/>
    </copy>

    <tstamp>
      <format property="DSTAMP" pattern="yyyy.MM.dd HH:mm"/>
    </tstamp>
    <concat destfile="${build.base}/org/jminor/common/model/version.txt">v${version} build ${DSTAMP}</concat>
  </target>

  <target name="compile_demo_reports" description="Compile the demo jasper reports">
    <taskdef name="jrc" classname="net.sf.jasperreports.ant.JRAntCompileTask">
      <classpath refid="lib.build"/>
    </taskdef>
    <jrc srcdir="${resources.demos}" includes="**/*.jrxml"/>
  </target>

  <target name="dist" depends="build, manifest"
          description="Builds all distribution jar files in the dist directory">
    <mkdir dir="${dist}"/>
    <jar jarfile="${dist}/${ant.project.name}.jar" basedir="${build.base}"
         manifest="${build.base}/META-INF/MANIFEST.MF"
         excludes="org/jminor/framework/demos/**"/>

    <jar jarfile="${dist}/${ant.project.name}-common.jar" basedir="${build.base}"
         manifest="${build.base}/META-INF/MANIFEST.MF"
         includes="org/jminor/common/**, logback.xml"/>

    <jar jarfile="${dist}/${ant.project.name}-client.jar" basedir="${build.base}"
         manifest="${build.base}/META-INF/MANIFEST.MF"
         includes="org/jminor/framework/Configuration*,
                org/jminor/framework/client/**,
                org/jminor/framework/db/**,
                org/jminor/framework/i18n/**,
                org/jminor/framework/domain/**,
                org/jminor/framework/tools/testing/**,
                org/jminor/framework/server/provider/EntityDbRemoteProvider*,
                org/jminor/framework/server/EntityDbRemote.class,
                org/jminor/framework/server/EntityDbRemoteAdapter_Stub.class"/>

    <jar jarfile="${dist}/${ant.project.name}-server.jar" basedir="${build.base}"
         manifest="${build.base}/META-INF/MANIFEST.MF"
         includes="org/jminor/framework/Configuration*,
                org/jminor/framework/db/**,
                org/jminor/framework/domain/*,
                org/jminor/framework/i18n/**,
                org/jminor/framework/server/*.class"
         excludes="org/jminor/framework/server/*Stub.class"/>

    <copy file="${deploy.server.monitor.truststore}" todir="${build.base}"/>

    <jar jarfile="${dist}/${ant.project.name}-server-monitor.jar" basedir="${build.base}"
         manifest="${build.base}/META-INF/MANIFEST.MF"
         includes="*, org/jminor/framework/Configuration*,
                org/jminor/framework/domain/**,
                org/jminor/framework/server/monitor/**,
                org/jminor/framework/server/EntityDbServerAdmin.class,
                org/jminor/framework/server/EntityDbRemoteServerAdmin_Stub.class"/>

    <jar jarfile="${dist}/${ant.project.name}-plugins.jar" basedir="${build.plugins}"
         manifest="${build.base}/META-INF/MANIFEST.MF"/>

    <copy file="${deploy.demos.truststore}" todir="${build.demos}"/>

    <jar jarfile="${dist}/${ant.project.name}-demos.jar" basedir="${build.demos}"
         manifest="${build.base}/META-INF/MANIFEST.MF"/>

    <jar jarfile="${dist}/${ant.project.name}-src.jar" basedir="${src}"
         manifest="${build.base}/META-INF/MANIFEST.MF"/>
    <jar jarfile="${dist}/${ant.project.name}-src-test.jar" basedir="${srctest}"
         manifest="${build.base}/META-INF/MANIFEST.MF"/>
    <jar jarfile="${dist}/${ant.project.name}-src-demos.jar" basedir="${srcdemos}"
         manifest="${build.base}/META-INF/MANIFEST.MF"/>
    <jar jarfile="${dist}/${ant.project.name}-api-doc.jar" basedir="${docsapi}"
         manifest="${build.base}/META-INF/MANIFEST.MF"/>

    <copy file="${basedir}/changelog.txt" todir="${dist}"/>
  </target>

  <target name="manifest"
          description="Generates a MANIFEST.MF file for inclusion in jars">
    <mkdir dir="${build.base}/META-INF"/>
    <manifest file="${build.base}/META-INF/MANIFEST.MF">
      <attribute name="Implementation-Title" value="JMinor Application Framework"/>
      <attribute name="Implementation-Version" value="${version}"/>
      <attribute name="Implementation-URL" value="http://jminor.org"/>
      <attribute name="Build-Jdk" value="${java.specification.version}"/>
      </manifest>
  </target>

  <target name="javadoc" depends="build"
          description="Generates framework javadocs">
    <delete dir="${docsapi}" includeEmptyDirs="true"/>
    <delete dir="${pluginsapi}" includeEmptyDirs="true"/>
    <mkdir dir="${docsapi}"/>
    <mkdir dir="${pluginsapi}"/>
    <javadoc destdir="${docsapi}" sourcepath="${src}" packagenames="org.jminor.*" Encoding="UTF-8"
             docencoding="UTF-8" overview="${src}/overview.html" author="true" version="true" use="true"
             windowtitle="JMinor v${version} API" doctitle="JMinor v${version} API"
             group="Common org.jminor.common*,
                    Client org.jminor.framework.client*,
                    Db org.jminor.framework.db*,
                    Domain org.jminor.framework.domain*,
                    Server org.jminor.framework.server*">
      <classpath refid="lib.build"/>
      <link href="http://download.oracle.com/javase/6/docs/api/"/>
    </javadoc>
    <javadoc destdir="${pluginsapi}" sourcepath="${srcplugins}" packagenames="org.jminor.*" Encoding="UTF-8"
             docencoding="UTF-8" author="true" version="true" use="true"
             windowtitle="JMinor v${version} Plugin API" doctitle="JMinor v${version} Plugin API"
             group="Plugins org.jminor.framework.plugins">
      <classpath>
        <path refid="lib.build"/>
        <path location="${build.base}"/>
      </classpath>
      <link href="http://download.oracle.com/javase/6/docs/api/"/>
      <link offline="true" href="http://jminor.org/data/media/project/docs/api/" packagelistloc="${docsapi}"/>
    </javadoc>
  </target>

  <target name="deploy_server" depends="recreate_h2_db"
          description="Deploys the rmi server to the path defined by the 'deploy.server.path' property">
    <copy file="${dist}/${ant.project.name}-server.jar" todir="${deploy.server.path}/lib"/>
    <copy file="${dist}/${ant.project.name}-common.jar" todir="${deploy.server.path}/lib"/>
    <copy file="${dist}/${ant.project.name}-plugins.jar" todir="${deploy.server.path}/lib"/>
    <copy file="${dist}/${ant.project.name}-demos.jar" todir="${deploy.server.path}/lib"/>
    <copy file="${lib.slf4j.api}" todir="${deploy.server.path}/lib"/>
    <copy file="${lib.logback.classic}" todir="${deploy.server.path}/lib"/>
    <copy file="${lib.logback.core}" todir="${deploy.server.path}/lib"/>
    <copy file="${lib.h2}" todir="${deploy.server.path}/lib"/>
    <copy file="${lib.webserver}" todir="${deploy.server.path}/lib"/>
    <copy file="${lib.servlet}" todir="${deploy.server.path}/lib"/>
    <copy file="${lib.json}" todir="${deploy.server.path}/lib"/>
    <copy file="${lib.jasperreports.base}" todir="${deploy.server.path}/lib"/>
    <copy file="${lib.jasperreports.collections}" todir="${deploy.server.path}/lib"/>
    <copy file="${lib.jasperreports.logging}" todir="${deploy.server.path}/lib"/>
    <copy todir="${deploy.server.path}">
      <fileset dir="${basedir}/resources/server/"/>
    </copy>
    <copy file="${deploy.server.policy}" todir="${deploy.server.config.path}"/>
    <copy file="${deploy.server.allpermissions.policy}" todir="${deploy.server.config.path}"/>
    <copy file="${deploy.server.keystore}" todir="${deploy.server.config.path}"/>
    <chmod dir="${deploy.server.path}" perm="u+x" type="file" includes="*.sh"/>
    <copy todir="${deploy.server.path}/h2db">
      <fileset dir="${db.h2.dir}"/>
    </copy>
  </target>

  <target name="deploy_server_monitor"
          description="Deploys the rmi server monitor to the path defined by the 'deploy.server.monitor.path' property">
    <mkdir dir="${deploy.server.monitor.path}"/>
    <copy file="${dist}/${ant.project.name}-server-monitor.jar" todir="${deploy.server.monitor.path}/lib"/>
    <copy file="${dist}/${ant.project.name}-plugins.jar" todir="${deploy.server.path}/lib"/>
    <copy file="${dist}/${ant.project.name}-common.jar" todir="${deploy.server.monitor.path}/lib"/>
    <copy file="${lib.slf4j.api}" todir="${deploy.server.monitor.path}/lib"/>
    <copy file="${lib.logback.classic}" todir="${deploy.server.monitor.path}/lib"/>
    <copy file="${lib.logback.core}" todir="${deploy.server.monitor.path}/lib"/>
    <copy file="${lib.jfreechart.base}" todir="${deploy.server.monitor.path}/lib"/>
    <copy file="${lib.jfreechart.common}" todir="${deploy.server.monitor.path}/lib"/>
    <copy file="${lib.jcalendar}" todir="${deploy.server.monitor.path}/lib"/>
    <copy todir="${deploy.server.monitor.path}">
      <fileset dir="${basedir}/resources/server_monitor/"/>
    </copy>
    <copy file="${deploy.server.monitor.policy}" todir="${deploy.server.monitor.config.path}"/>
    <copy file="${deploy.server.monitor.truststore}" todir="${deploy.server.monitor.config.path}"/>
    <chmod dir="${deploy.server.monitor.path}" perm="u+x" type="file" includes="*.sh"/>
    <antcall target="sign_server_monitor_jars"/>
  </target>

  <target name="sign_server_monitor_jars" depends="dist"
          description="Signs the jars found in the 'deploy.server.monitor.path'">
    <signjar alias="${jar.sign.alias}" storepass="${jar.sign.storepass}" keystore="${jar.sign.keystoreloc}">
      <fileset dir="${deploy.server.monitor.path}/lib" />
    </signjar>
  </target>

  <target name="deploy_demos" depends="recreate_h2_db, compile_demo_reports"
          description="Deploys the demo applications to the path defined by the 'deploy.demos.path' property">
    <mkdir dir="${deploy.demos.path}"/>
    <copy file="${dist}/${ant.project.name}-client.jar" todir="${deploy.demos.path}/lib"/>
    <copy file="${dist}/${ant.project.name}-plugins.jar" todir="${deploy.demos.path}/lib"/>
    <copy file="${dist}/${ant.project.name}-demos.jar" todir="${deploy.demos.path}/lib"/>
    <copy file="${dist}/${ant.project.name}-common.jar" todir="${deploy.demos.path}/lib"/>
    <copy file="${lib.h2}" todir="${deploy.demos.path}/lib"/>
    <copy file="${lib.json}" todir="${deploy.demos.path}/lib"/>
    <copy file="${lib.jasperreports.base}" todir="${deploy.demos.path}/lib"/>
    <copy file="${lib.jasperreports.collections}" todir="${deploy.demos.path}/lib"/>
    <copy file="${lib.jasperreports.itext}" todir="${deploy.demos.path}/lib"/>
    <copy file="${lib.jasperreports.logging}" todir="${deploy.demos.path}/lib"/>
    <copy file="${lib.slf4j.api}" todir="${deploy.demos.path}/lib"/>
    <copy file="${lib.logback.classic}" todir="${deploy.demos.path}/lib"/>
    <copy file="${lib.logback.core}" todir="${deploy.demos.path}/lib"/>
    <copy file="${lib.jcalendar}" todir="${deploy.demos.path}/lib"/>
    <copy file="${lib.jfreechart.base}" todir="${deploy.demos.path}/lib"/>
    <copy file="${lib.jfreechart.common}" todir="${deploy.demos.path}/lib"/>
    <copy todir="${deploy.demos.config.path}">
      <fileset dir="${deploy.demos.config}"/>
    </copy>
    <copy file="${deploy.demos.policy}" todir="${deploy.demos.config.path}"/>
    <copy file="${deploy.loadtest.policy}" todir="${deploy.demos.config.path}"/>
    <copy file="${deploy.loadtest.server.policy}" todir="${deploy.demos.config.path}"/>
    <copy file="${deploy.demos.truststore}" todir="${deploy.demos.config.path}"/>
    <copy todir="${deploy.demos.path}">
      <fileset dir="${basedir}/resources/demos/empdept/" excludes="**/*.jrxml,**/*.bak"/>
      <fileset dir="${basedir}/resources/demos/petstore/" excludes="**/*.jrxml,**/*.bak"/>
      <fileset dir="${basedir}/resources/demos/chinook/" excludes="**/*.jrxml,**/*.bak"/>
      <fileset dir="${basedir}/resources/demos/schemabrowser/"/>
    </copy>
    <chmod dir="${deploy.demos.path}" perm="u+x" type="file" includes="*.sh"/>
    <copy todir="${deploy.demos.path}/h2db">
      <fileset dir="${db.h2.dir}"/>
    </copy>
    <antcall target="sign_demo_jars"/>
  </target>

  <target name="sign_demo_jars" depends="dist"
          description="Signs the jars found in the 'deploy.demos.path'">
    <signjar alias="${jar.sign.alias}" storepass="${jar.sign.storepass}" keystore="${jar.sign.keystoreloc}">
      <fileset dir="${deploy.demos.path}/lib" />
    </signjar>
  </target>

  <target name="deploy_all" depends="clean, dist, deploy_server, deploy_server_monitor, deploy_demos"
          description="A convenience target for deploying the server, server monitor and demo applications">
    <delete file="${dist}/deployment/jminor-${version}.zip"/>
    <zip destfile="${dist}/deployment/jminor-${version}.zip">
      <fileset dir="${dist}" excludes="deployment/**"/>
    </zip>
  </target>

  <target name="deploy_to_wiki" depends="javadoc, run_and_report, deploy_src_to_wiki"
          description="Publishes the relevant files to the documentation wiki">
    <delete dir="${wiki.media.project}/docs"/>
    <delete dir="${wiki.media.project}/resources"/>
    <delete dir="${wiki.media.project}/test"/>
    <mkdir dir="${wiki.media.project}/docs"/>
    <mkdir dir="${wiki.media.project}/resources"/>
    <mkdir dir="${wiki.media.project}/test"/>
    <copy todir="${wiki.media.project}/docs">
      <fileset dir="${docs}"/>
    </copy>
    <copy todir="${wiki.media.project}/test">
      <fileset dir="${test}"/>
    </copy>
    <chmod dir="${wiki.media.project}" perm="ugo+r" type="file" includes="**/*"/>
    <chmod dir="${wiki.media.project}" perm="ugo+rx" type="dir" includes="**/*"/>
    <chmod file="${wiki.media.project}" perm="ugo+rx" type="dir"/>
  </target>

  <target name="deploy_src_to_wiki" >
    <delete dir="${wiki.media.project}/src"/>
    <copy todir="${wiki.media.project}/src">
      <fileset dir="${src}" />
    </copy>
    <copy todir="${wiki.media.project}/src">
      <fileset dir="${srcplugins}"/>
    </copy>
    <copy todir="${wiki.media.project}/src">
      <fileset dir="${srcdemos}"/>
    </copy>
    <copy todir="${wiki.media.project}/src/resources">
      <fileset dir="${resources}"/>
    </copy>
    <chmod dir="${wiki.media.project}/src" perm="ugo+r" type="file" includes="**/*"/>
    <chmod dir="${wiki.media.project}/src" perm="ugo+rx" type="dir" includes="**/*"/>
    <chmod file="${wiki.media.project}/src" perm="ugo+rx" type="dir"/>
  </target>

  <target name="deploy_project"
          description="Creates a jminor-project.zip file in the base directory">
    <delete file="${basedir}/${ant.project.name}-${version}-project.zip"/>
    <delete file="${basedir}/derby.log"/>
    <zip destfile="${basedir}/${ant.project.name}-${version}-project.zip">
      <fileset dir="${basedir}"
               excludes="*.ser,*.log,target/**,test/**,dist/deployment/**,classes/**,derbydb/**,h2db/**"/>
    </zip>
  </target>

  <target name="run_and_report" depends="run_unit_tests"
          description="Creates a unit test html report">
    <delete dir="${test.reports.html}"/>
    <mkdir dir="${test.reports.html}"/>
    <junitreport todir="${test.reports}">
      <fileset dir="${test.reports}" includes="TEST-*.xml"/>
      <report format="frames" todir="${test.reports.html}"/>
    </junitreport>
  </target>

  <target name="report"
          description="Creates a unit test html report on a previously run test">
    <mkdir dir="${test.reports.html}"/>
    <junitreport todir="${test.reports}">
      <fileset dir="${test.reports}" includes="TEST-*.xml"/>
      <report format="frames" todir="${test.reports.html}"/>
    </junitreport>
  </target>

  <target name="run_unit_tests" depends="build, compile_demo_reports, recreate_h2_db"
          description="Runs the framework unit tests">
    <mkdir dir="${test.reports}"/>
    <junit printsummary="yes" haltonfailure="false" haltonerror="false" fork="yes">
      <formatter type="xml" usefile="true"/>
      <classpath>
        <path refid="classes.base"/>
        <path refid="classes.test"/>
        <path refid="lib.build"/>
      </classpath>
      <jvmarg value="-Djminor.db.type=${junit.db.type}"/>
      <jvmarg value="-Djminor.db.host=${junit.db.host}"/>
      <jvmarg value="-Djminor.db.port=${junit.db.port}"/>
      <jvmarg value="-Djminor.db.sid=${junit.db.sid}"/>
      <jvmarg value="-Djminor.db.embedded=${junit.db.embedded}"/>
      <batchtest todir="${test.reports}">
        <fileset dir="${srctest}" includes="**/*Test.java"/>
        <fileset dir="${srcdemos}" includes="**/*Test.java" excludes="**/*LoadTest.java"/>
      </batchtest>
    </junit>
  </target>

  <target name="instrument" depends="clean, build">
    <delete file="cobertura.ser" />
    <delete dir="${instrumented.dir}" includeEmptyDirs="true"/>
    <mkdir dir="${instrumented.dir}"/>
    <cobertura-instrument todir="${instrumented.dir}" classpathref="lib.build">
      <fileset dir="${build.base}">
        <include name="**/*.class"/>
        <exclude name="**/*Stub.class"/>
      </fileset>
    </cobertura-instrument>
  </target>

  <target name="unit_test_coverage" depends="instrument, compile_demo_reports, recreate_h2_db"
          description="Runs the framework unit tests with coverage reporting">
    <mkdir dir="${test.reports}"/>

    <junit printsummary="yes" haltonfailure="false" haltonerror="false" fork="yes">
      <formatter type="xml" usefile="true"/>
      <sysproperty key="net.sourceforge.cobertura.datafile" file="${basedir}/cobertura.ser" />

      <classpath location="${instrumented.dir}" />
      <classpath refid="cobertura.classpath" />
      <classpath>
        <path refid="classes.base"/>
        <path refid="classes.test"/>
        <path refid="classes.demos"/>
        <path refid="lib.build"/>
      </classpath>
      <jvmarg value="-Djminor.db.type=${junit.db.type}"/>
      <jvmarg value="-Djminor.db.host=${junit.db.host}"/>
      <jvmarg value="-Djminor.db.port=${junit.db.port}"/>
      <jvmarg value="-Djminor.db.sid=${junit.db.sid}"/>
      <jvmarg value="-Djminor.db.embedded=${junit.db.embedded}"/>
      <batchtest todir="${test.reports}">
        <fileset dir="${srctest}" includes="**/*Test.java"/>
        <fileset dir="${srcdemos}" includes="**/*Test.java" excludes="**/*LoadTest.java"/>
      </batchtest>
    </junit>
    <antcall target="unit_test_coverage_report_xml"/>
    <antcall target="unit_test_coverage_report_html"/>
    <delete dir="${instrumented.dir}" includeEmptyDirs="true"/>
  </target>

  <target name="unit_test_coverage_report_xml">
    <delete dir="${test.coveragereport.xml}" includeEmptyDirs="true"/>
    <mkdir dir="${test.coveragereport.xml}"/>
    <cobertura-report format="xml" destdir="${test.coveragereport.xml}" >
      <fileset dir="${src}">
        <include name="**/*.java" />
      </fileset>
      <fileset dir="${srcplugins}">
        <include name="**/*.java" />
      </fileset>
    </cobertura-report>
  </target>

  <target name="unit_test_coverage_report_html">
    <delete dir="${test.coveragereport.html}" includeEmptyDirs="true"/>
    <mkdir dir="${test.coveragereport.html}"/>
    <cobertura-report format="html" destdir="${test.coveragereport.html}" >
      <fileset dir="${src}">
          <include name="**/*.java" />
      </fileset>
      <fileset dir="${srcplugins}">
          <include name="**/*.java" />
      </fileset>
    </cobertura-report>
  </target>

  <target name="sonar_analysis_win_only" depends="clean, build, unit_test_coverage"
          description="Runs the unit tests with coverage analysis and then command 'mvn sonar:sonar' via the cmd shell">
    <exec executable="cmd">
      <arg value="/c"/>
      <arg value="mvn"/>
      <arg value="sonar:sonar"/>
    </exec>
  </target>

  <target name="run_demo_empdept_local" depends="build, recreate_h2_db"
          description="Runs the EmpDept demo application with a local db connection">
    <java classname="org.jminor.framework.demos.empdept.client.ui.EmpDeptAppPanel" fork="yes">
      <classpath>
        <path refid="classes.base"/>
        <path refid="lib.client.local"/>
      </classpath>
      <jvmarg value="-Djminor.db.type=${demo.db.type}"/>
      <jvmarg value="-Djminor.db.host=${demo.db.host}"/>
      <jvmarg value="-Djminor.db.port=${demo.db.port}"/>
      <jvmarg value="-Djminor.db.sid=${demo.db.sid}"/>
      <jvmarg value="-Djminor.db.embedded=${demo.db.embedded}"/>
      <jvmarg value="-Djminor.report.path=resources/demos/empdept/reports/"/>
    </java>
  </target>

  <target name="run_demo_empdept_remote" depends="build"
          description="Runs the EmpDept demo application with a remote db connection">
    <java classname="org.jminor.framework.demos.empdept.client.ui.EmpDeptAppPanel" fork="yes">
      <classpath>
        <path refid="classes.base"/>
        <path refid="lib.client.remote"/>
      </classpath>
      <jvmarg value="-Djminor.client.connectionType=remote"/>
      <jvmarg value="-Djminor.server.hostname=stofusofi.fiskistofa.is"/>
      <jvmarg value="-Djminor.report.path=resources/demos/empdept/reports/"/>
      <jvmarg value="-Djavax.net.ssl.trustStore=${basedir}/resources/security/JMinorClientTruststore"/>
      <jvmarg value="-Djava.security.policy=${basedir}/resources/security/jminor_client.policy"/>
    </java>
  </target>

  <target name="run_demo_empdept_load_test" depends="build"
          description="Runs the EmpDept load testing application with a remote db connection">
    <java classname="org.jminor.framework.demos.empdept.testing.EmpDeptLoadTest" fork="yes">
      <classpath>
        <path refid="classes.base"/>
        <path refid="lib.client.remote"/>
        <pathelement location="${lib.jfreechart.base}"/>
        <pathelement location="${lib.jfreechart.common}"/>
      </classpath>
      <jvmarg value="-Djminor.client.connectionType=remote"/>
      <jvmarg value="-Djminor.server.hostname=localhost"/>
      <jvmarg value="-Djminor.report.path=resources/demos/empdept/reports/"/>
      <jvmarg value="-Djavax.net.ssl.trustStore=${basedir}/resources/security/JMinorClientTruststore"/>
      <jvmarg value="-Djava.security.policy=${basedir}/resources/security/jminor_load_test.policy"/>
    </java>
  </target>

  <target name="run_demo_petstore_local" depends="build, recreate_h2_db"
          description="Runs the Petstore demo application with a local db connection">
    <java classname="org.jminor.framework.demos.petstore.client.ui.PetstoreAppPanel" fork="yes">
      <classpath>
        <path refid="classes.base"/>
        <path refid="lib.client.local"/>
      </classpath>
      <jvmarg value="-Djminor.db.type=${demo.db.type}"/>
      <jvmarg value="-Djminor.db.host=${demo.db.host}"/>
      <jvmarg value="-Djminor.db.port=${demo.db.port}"/>
      <jvmarg value="-Djminor.db.sid=${demo.db.sid}"/>
      <jvmarg value="-Djminor.db.embedded=${demo.db.embedded}"/>
    </java>
  </target>

  <target name="run_demo_petstore_remote" depends="build"
          description="Runs the Petstore demo application with a remote db connection">
    <java classname="org.jminor.framework.demos.petstore.client.ui.PetstoreAppPanel" fork="yes">
      <classpath>
        <path refid="classes.base"/>
        <path refid="lib.client.remote"/>
      </classpath>
      <jvmarg value="-Djminor.client.connectionType=remote"/>
      <jvmarg value="-Djminor.server.hostname=localhost"/>
      <jvmarg value="-Djavax.net.ssl.trustStore=${basedir}/resources/security/JMinorClientTruststore"/>
      <jvmarg value="-Djava.security.policy=${basedir}/resources/security/jminor_client.policy"/>
    </java>
  </target>

  <target name="run_rmi_server" depends="build, recreate_h2_db"
          description="Runs the RMI server">
    <java classname="org.jminor.framework.server.EntityDbRemoteServerAdmin" fork="yes">
      <classpath>
        <path refid="classes.base"/>
        <path refid="classes.demos"/>
        <path refid="lib.server"/>
      </classpath>
      <jvmarg value="-Djminor.db.type=${demo.db.type}"/>
      <jvmarg value="-Djminor.db.host=${demo.db.host}"/>
      <jvmarg value="-Djminor.db.port=${demo.db.port}"/>
      <jvmarg value="-Djminor.db.sid=${demo.db.sid}"/>
      <jvmarg value="-Djminor.db.embedded=${demo.db.embedded}"/>
      <jvmarg value="-Djminor.server.pooling.initial=scott"/>
      <jvmarg value="-Djminor.server.clientLoggingEnabled=true"/>
      <jvmarg value="-Djminor.server.port=2222"/>
      <jvmarg value="-Djminor.server.admin.port=4444"/>
      <jvmarg value="-Djminor.server.db.port=3333"/>
      <jvmarg value="-Djminor.server.domain.classes=org.jminor.framework.demos.empdept.domain.EmpDept, org.jminor.framework.demos.petstore.domain.Petstore, org.jminor.framework.demos.chinook.domain.Chinook, org.jminor.framework.demos.schemabrowser.domain.SchemaBrowser"/>
      <jvmarg value="-Djavax.net.ssl.keyStore=${basedir}/resources/security/JMinorServerKeystore"/>
      <jvmarg value="-Djava.security.policy=${basedir}/resources/security/jminor_server.policy"/>
      <jvmarg value="-Djavax.net.ssl.keyStorePassword=jminor"/>
      <jvmarg value="-Djava.rmi.server.hostname=localhost"/>
    </java>
  </target>

  <target name="run_rmi_server_monitor" depends="build"
          description="Runs the RMI server monitor">
    <java classname="org.jminor.framework.server.monitor.ui.MonitorPanel" fork="yes">
      <classpath>
        <path refid="classes.base"/>
        <path refid="lib.server.monitor"/>
      </classpath>
      <jvmarg value="-Djminor.server.hostname=localhost"/>
      <jvmarg value="-Djavax.net.ssl.trustStore=${basedir}/resources/security/JMinorServerMonitorTruststore"/>
      <jvmarg value="-Djava.security.policy=${basedir}/resources/security/jminor_server_monitor.policy"/>
    </java>
  </target>

  <target name="run_rmi_registry" depends="build"
          description="Runs the RMI registry with the classpath required for bootstrapping the framework RMI server">
    <java classname="sun.rmi.registry.RegistryImpl" fork="yes">
      <classpath>
        <path refid="classes.base"/>
        <pathelement location="${lib.slf4j.api}"/>
        <pathelement location="${lib.logback.classic}"/>
        <pathelement location="${lib.logback.core}"/>
        <pathelement location="${lib.jasperreports.base}"/>
      </classpath>
      <jvmarg value="-Djava.security.policy=${basedir}/resources/security/all_permissions.policy"/>
    </java>
  </target>

  <target name="recreate_h2_db"
          description="Recreates the demo h2 database. The demo database includes the EmpDept, Petstore and Chinook schemas, used by unit tests and demo applications">
    <delete dir="${db.h2.dir}"/>
    <java fork="true" classname="org.h2.tools.RunScript" classpathref="lib.build">
      <arg line="-url jdbc:h2:${db.h2.dir}/${db.h2.name} -showResults -script ${basedir}/resources/db/scripts/create_h2_db.sql"/>
    </java>
  </target>

  <target name="recreate_derby_db"
          description="Recreates the demo derby database. The demo database includes the EmpDept, Petstore and Chinook schemas, used by unit tests and demo applications">
    <delete dir="${db.derby.dir}"/>
    <java fork="true" classname="org.apache.derby.tools.ij" classpathref="lib.build">
      <sysproperty key="ij.connection.demo" value="jdbc:derby:${db.derby.dir}/${db.derby.name};create=true"/>
      <arg value="${db.sql.dir}/create_derby_db.sql"/>
    </java>
  </target>
</project>