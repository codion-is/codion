<?xml version="1.0" encoding="UTF-8"?>
<project name="jminor" default="build" basedir="." xmlns:jacoco="antlib:org.jacoco.ant" xmlns:ivy="antlib:org.apache.ivy.ant">

  <description>JMinor is a minimalistic full-stack Java rich client/server CRUD application framework, based solely on Java Standard Edition components, JDBC, RMI and Swing.</description>

  <property file="build.properties"/>
  <property file="user.properties"/>

  <tstamp>
    <format property="build.date" pattern="yyyy.MM.dd HH:mm"/>
  </tstamp>

  <path id="lib.ant.util">
    <fileset dir="${lib}/ant.util"/>
  </path>

  <path id="lib.build.core">
    <fileset dir="${lib}/build.core"/>
  </path>

  <path id="lib.build.demos">
    <fileset dir="${lib}/build.demos"/>
  </path>

  <path id="lib.build.plugins">
    <fileset dir="${lib}/build.plugins"/>
  </path>

  <path id="lib.runtime.test">
    <fileset dir="${lib}/runtime.tests"/>
  </path>

  <path id="lib.runtime.client">
    <fileset dir="${lib}/runtime.client"/>
  </path>

  <path id="lib.runtime.server">
    <fileset dir="${lib}/runtime.server"/>
  </path>

  <path id="lib.runtime.server-monitor">
    <fileset dir="${lib}/runtime.server-monitor"/>
  </path>

  <path id="classes.main">
    <pathelement path="${build.main}"/>
  </path>

  <path id="classes.plugins">
    <pathelement path="${build.plugins}"/>
  </path>

  <path id="classes.test">
    <pathelement path="${build.test}"/>
  </path>

  <path id="classes.demos">
    <pathelement path="${build.demos}"/>
  </path>

  <fileset id="common_resources" dir="${src.main}" includes=
          "org/jminor/common/**/*.gif, org/jminor/common/**/*.png, org/jminor/common/**/*.properties, org/jminor/common/**/*.txt"/>
  <fileset id="framework_resources" dir="${src.main}" includes=
          "org/jminor/framework/**/*.gif, org/jminor/framework/**/*.png, org/jminor/framework/**/*.properties, org/jminor/framework/**/*.txt"/>
  <fileset id="test_resources" dir="${src.test}" includes=
          "org/jminor/**/*.gif, org/jminor/**/*.properties, org/jminor/**/*.txt"/>
  <fileset id="demos_resources" dir="${src.demos}" includes=
          "org/jminor/framework/**/*.gif, org/jminor/framework/**/*.png, org/jminor/framework/**/*.properties, org/jminor/framework/**/*.txt"/>
  <fileset id="plugins_resources" dir="${src.plugins}" includes=
          "org/jminor/framework/**/*.gif, org/jminor/framework/**/*.png, org/jminor/framework/**/*.properties, org/jminor/framework/**/*.txt"/>

  <condition property="keystore.available">
    <available file="${resources.security}/JMinorServerKeystore"/>
  </condition>

  <target name="resolve_libraries"
          description="Resolves all libraries according to ivy.xml">
    <mkdir dir="${lib}/ant.util"/>
    <get src="http://search.maven.org/remotecontent?filepath=org/apache/ivy/ivy/2.4.0/ivy-2.4.0.jar" dest="${lib}/ant.util/ivy-2.4.0.jar" skipexisting="true"/>
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="lib.ant.util"/>
    <ivy:retrieve pattern="${lib}/[conf]/[artifact]-[revision].[ext]" sync="true"/>
  </target>

  <target name="clean"
          description="Clean all output and generated dirs">
    <delete dir="${build.main}" includeEmptyDirs="true"/>
    <delete dir="${build.demos}" includeEmptyDirs="true"/>
    <delete dir="${build.plugins}" includeEmptyDirs="true"/>
    <delete dir="${build.test}" includeEmptyDirs="true"/>
    <delete dir="${build.root}" includeEmptyDirs="true"/>
    <delete dir="${test}" includeEmptyDirs="true"/>
  </target>

  <target name="build" depends="resolve_libraries"
          description="Compiles all source files">
    <mkdir dir="${build.main}"/>
    <javac destdir="${build.main}" debug="${build.debuginfo}" includeantruntime="false">
      <src path="${src.main}"/>
      <classpath refid="lib.build.core"/>
    </javac>

    <copy todir="${build.main}">
      <fileset refid="common_resources"/>
      <fileset refid="framework_resources"/>
    </copy>

    <mkdir dir="${build.plugins}"/>
    <javac destdir="${build.plugins}" debug="${build.debuginfo}" includeantruntime="false">
      <src path="${src.plugins}"/>
      <classpath>
        <path refid="lib.build.core"/>
        <path refid="lib.build.plugins"/>
        <path location="${build.main}"/>
      </classpath>
    </javac>

    <copy todir="${build.plugins}">
      <fileset refid="plugins_resources"/>
    </copy>

    <mkdir dir="${build.demos}"/>
    <javac destdir="${build.demos}" debug="${build.debuginfo}" includeantruntime="false">
      <src path="${src.demos}"/>
      <classpath>
        <path refid="lib.build.core"/>
        <path refid="lib.build.plugins"/>
        <path refid="lib.build.demos"/>
        <path location="${build.main}"/>
        <path location="${build.plugins}"/>
      </classpath>
    </javac>

    <copy todir="${build.demos}">
      <fileset refid="demos_resources"/>
    </copy>

    <mkdir dir="${build.test}"/>
    <javac destdir="${build.test}" debug="${build.debuginfo}" includeantruntime="false">
      <src path="${src.test}"/>
      <classpath>
        <path refid="lib.build.core"/>
        <path refid="lib.build.plugins"/>
        <path location="${build.main}"/>
        <path location="${build.plugins}"/>
      </classpath>
    </javac>

    <copy todir="${build.test}">
      <fileset refid="test_resources"/>
    </copy>
    <concat destfile="${build.main}/org/jminor/common/model/version.txt">${version}-build ${build.date}</concat>
  </target>

  <target name="compile_demo_reports" depends="resolve_libraries"
          description="Compile the demo jasper reports">
    <taskdef name="jrc" classname="net.sf.jasperreports.ant.JRAntCompileTask">
      <classpath refid="lib.runtime.test"/>
    </taskdef>
    <jrc srcdir="${resources.demos}" includes="**/*.jrxml"/>
  </target>

  <target name="dist" depends="clean, build, manifest, javadoc"
          description="Builds all distribution jar files in the dist directory">
    <mkdir dir="${dist}"/>
    <dist_module module.name="jminor"
                 basedir.classes="${build.main}"
                 basedir.sources="${src.main}"
                 basedir.javadoc="${javadoc}"/>

    <dist_module module.name="jminor-common-model"
                 basedir.classes="${build.main}"
                 basedir.sources="${src.main}"
                 basedir.javadoc="${javadoc}"
                 includes="org/jminor/common/**"
                 excludes="org/jminor/common/ui/**"/>

    <dist_module module.name="jminor-common-ui"
                 basedir.classes="${build.main}"
                 basedir.sources="${src.main}"
                 basedir.javadoc="${javadoc}"
                 includes="org/jminor/common/ui/**"/>

    <dist_module module.name="jminor-db-core"
                 basedir.classes="${build.main}"
                 basedir.sources="${src.main}"
                 basedir.javadoc="${javadoc}"
                 includes="org/jminor/framework/Configuration.class,
                   org/jminor/framework/db/*,
                   org/jminor/framework/db/criteria/*,
                   org/jminor/framework/domain/*,
                   org/jminor/framework/i18n/**"
                 excludes="org/jminor/framework/db/remote*,
                   org/jminor/framework/db/local*,"/>

    <dist_module module.name="jminor-db-local"
                 basedir.classes="${build.main}"
                 basedir.sources="${src.main}"
                 basedir.javadoc="${javadoc}"
                 includes="org/jminor/framework/db/local/*"/>

    <dist_module module.name="jminor-db-remote"
                 basedir.classes="${build.main}"
                 basedir.sources="${src.main}"
                 basedir.javadoc="${javadoc}"
                 includes="org/jminor/framework/db/remote/*"/>

    <dist_module module.name="jminor-db-test"
                 basedir.classes="${build.main}"
                 basedir.sources="${src.main}"
                 basedir.javadoc="${javadoc}"
                 includes="org/jminor/framework/tools/testing/EntityTestUnit*"/>

    <dist_module module.name="jminor-client-model"
                 basedir.classes="${build.main}"
                 basedir.sources="${src.main}"
                 basedir.javadoc="${javadoc}"
                 includes="org/jminor/framework/client/model/**"/>

    <dist_module module.name="jminor-client-ui"
                 basedir.classes="${build.main}"
                 basedir.sources="${src.main}"
                 basedir.javadoc="${javadoc}"
                 includes="org/jminor/framework/client/ui/**"/>

    <dist_module module.name="jminor-client-test"
                 basedir.classes="${build.main}"
                 basedir.sources="${src.main}"
                 basedir.javadoc="${javadoc}"
                 includes="org/jminor/framework/tools/testing/EntityApplicationPanelTestUnit*,
                   org/jminor/framework/tools/testing/EntityEditPanelTestUnit*,
                   org/jminor/framework/tools/testing/EntityLoadTestModel*"/>

    <dist_module module.name="jminor-server"
                 basedir.classes="${build.main}"
                 basedir.sources="${src.main}"
                 basedir.javadoc="${javadoc}"
                 includes="org/jminor/framework/server/*"
                 excludes="org/jminor/framework/server/monitor/**"/>

    <dist_module module.name="jminor-server-monitor"
                 basedir.classes="${build.main}"
                 basedir.sources="${src.main}"
                 basedir.javadoc="${javadoc}"
                 includes="org/jminor/framework/Configuration.class,
                   org/jminor/framework/server/monitor/**,
                   org/jminor/framework/server/EntityConnectionServerAdmin.class"/>

    <dist_module module.name="jminor-plugin-jasperreports"
                 basedir.classes="${build.plugins}"
                 basedir.sources="${src.plugins}"
                 basedir.javadoc="${javadoc.plugins}"
                 includes="org/jminor/framework/plugins/jasperreports/**"/>

    <dist_module module.name="jminor-plugin-json"
                 basedir.classes="${build.plugins}"
                 basedir.sources="${src.plugins}"
                 basedir.javadoc="${javadoc.plugins}"
                 includes="org/jminor/framework/plugins/json/**"/>

    <dist_module module.name="jminor-plugin-rest"
                 basedir.classes="${build.plugins}"
                 basedir.sources="${src.plugins}"
                 basedir.javadoc="${javadoc.plugins}"
                 includes="org/jminor/framework/plugins/rest/**"/>

    <dist_module module.name="jminor-plugin-tomcat-pool"
                 basedir.classes="${build.plugins}"
                 basedir.sources="${src.plugins}"
                 basedir.javadoc="${javadoc.plugins}"
                 includes="org/jminor/framework/plugins/tomcat/pool/**"/>

    <jar jarfile="${dist}/jminor-demos/jminor-demos.jar" basedir="${build.demos}"
         manifest="${build.main}/META-INF/MANIFEST.MF"/>
    <jar jarfile="${dist}/jminor-demos/jminor-demos-sources.jar" basedir="${src.demos}"
         manifest="${build.main}/META-INF/MANIFEST.MF"/>

    <jar jarfile="${dist}/jminor-client-bundle/jminor-client-bundle.jar" manifest="${build.main}/META-INF/MANIFEST.MF">
      <zipgroupfileset dir="${dist}" includes="jminor-common-model/jminor-common-model.jar, jminor-common-ui/jminor-common-ui.jar,
      jminor-db-core/jminor-db-core.jar, jminor-db-local/jminor-db-local.jar, jminor-db-remote/jminor-db-remote.jar,
      jminor-client-model/jminor-client-model.jar, jminor-client-ui/jminor-client-ui.jar"/>
    </jar>
    <jar jarfile="${dist}/jminor-client-bundle/jminor-client-bundle-sources.jar" manifest="${build.main}/META-INF/MANIFEST.MF">
      <zipgroupfileset dir="${dist}" includes="jminor-common-model/jminor-common-model-sources.jar, jminor-common-ui/jminor-common-ui-sources.jar,
      jminor-db-core/jminor-db-core-sources.jar, jminor-db-local/jminor-db-local-sources.jar, jminor-db-remote/jminor-db-remote-sources.jar,
      jminor-client-model/jminor-client-model-sources.jar, jminor-client-ui/jminor-client-ui-sources.jar"/>
    </jar>
    <jar jarfile="${dist}/jminor-client-bundle/jminor-client-bundle-javadoc.jar" manifest="${build.main}/META-INF/MANIFEST.MF">
      <zipgroupfileset dir="${dist}" includes="jminor-common-model/jminor-common-model-javadoc.jar, jminor-common-ui/jminor-common-ui-javadoc.jar,
      jminor-db-core/jminor-db-core-javadoc.jar, jminor-db-local/jminor-db-local-javadoc.jar, jminor-db-remote/jminor-db-remote-javadoc.jar,
      jminor-client-model/jminor-client-model-javadoc.jar, jminor-client-ui/jminor-client-ui-javadoc.jar"/>
    </jar>

    <copy file="${basedir}/changelog.txt" todir="${dist}"/>
  </target>

  <target name="dist_android" depends="clean, build, manifest"
          description="Builds a android jminor library">
    <jar jarfile="${dist}/jminor-android.jar" basedir="${build.main}"
         manifest="${build.main}/META-INF/MANIFEST.MF"
         includes="org/jminor/common/db/*.class,
                   org/jminor/common/db/criteria/**,
                   org/jminor/common/db/dbms/**,
                   org/jminor/common/db/exception/**,
                   org/jminor/common/model/*.class,
                   org/jminor/common/model/valuemap/**,
                   org/jminor/framework/Configuration*,
                   org/jminor/framework/db/**,
                   org/jminor/framework/domain/**,
                   org/jminor/framework/i18n/**,
                   org/jminor/framework/tools/testing/EntityTestUnit*"/>
  </target>

  <target name="publish_all" depends="dist"
          description="Publish all project artifacts">
    <subant target="publish" buildpath="${basedir}/resources/publish/common-model"/>
    <subant target="publish" buildpath="${basedir}/resources/publish/common-ui"/>
    <subant target="publish" buildpath="${basedir}/resources/publish/db-core"/>
    <subant target="publish" buildpath="${basedir}/resources/publish/db-local"/>
    <subant target="publish" buildpath="${basedir}/resources/publish/db-remote"/>
    <subant target="publish" buildpath="${basedir}/resources/publish/db-test"/>
    <subant target="publish" buildpath="${basedir}/resources/publish/client-model"/>
    <subant target="publish" buildpath="${basedir}/resources/publish/client-ui"/>
    <subant target="publish" buildpath="${basedir}/resources/publish/client-test"/>
    <subant target="publish" buildpath="${basedir}/resources/publish/client-bundle"/>
    <subant target="publish" buildpath="${basedir}/resources/publish/server"/>
    <subant target="publish" buildpath="${basedir}/resources/publish/server-monitor"/>
    <subant target="publish" buildpath="${basedir}/resources/publish/plugin-jasperreports"/>
    <subant target="publish" buildpath="${basedir}/resources/publish/plugin-json"/>
    <subant target="publish" buildpath="${basedir}/resources/publish/plugin-rest"/>
    <subant target="publish" buildpath="${basedir}/resources/publish/plugin-tomcat-pool"/>
  </target>

  <target name="report_all"
          description="Create an ivy dependency report for all project modules">
    <subant target="report" buildpath="${basedir}/resources/publish/common-model"/>
    <subant target="report" buildpath="${basedir}/resources/publish/common-ui"/>
    <subant target="report" buildpath="${basedir}/resources/publish/db-core"/>
    <subant target="report" buildpath="${basedir}/resources/publish/db-local"/>
    <subant target="report" buildpath="${basedir}/resources/publish/db-remote"/>
    <subant target="report" buildpath="${basedir}/resources/publish/db-test"/>
    <subant target="report" buildpath="${basedir}/resources/publish/client-model"/>
    <subant target="report" buildpath="${basedir}/resources/publish/client-ui"/>
    <subant target="report" buildpath="${basedir}/resources/publish/client-test"/>
    <subant target="report" buildpath="${basedir}/resources/publish/client-bundle"/>
    <subant target="report" buildpath="${basedir}/resources/publish/server"/>
    <subant target="report" buildpath="${basedir}/resources/publish/server-monitor"/>
    <subant target="report" buildpath="${basedir}/resources/publish/plugin-jasperreports"/>
    <subant target="report" buildpath="${basedir}/resources/publish/plugin-json"/>
    <subant target="report" buildpath="${basedir}/resources/publish/plugin-rest"/>
    <subant target="report" buildpath="${basedir}/resources/publish/plugin-tomcat-pool"/>
  </target>

  <target name="manifest"
          description="Generates a MANIFEST.MF file for inclusion in jars">
    <mkdir dir="${build.main}/META-INF"/>
    <manifest file="${build.main}/META-INF/MANIFEST.MF">
      <attribute name="Specification-Title" value="JMinor Application Framework"/>
      <attribute name="Specification-Version" value="${version}"/>
      <attribute name="Specification-Vendor" value="JMinor"/>
      <attribute name="Implementation-Title" value="JMinor Application Framework"/>
      <attribute name="Implementation-Version" value="${version}"/>
      <attribute name="Implementation-Vendor" value="JMinor"/>
      <attribute name="Implementation-Vendor-Id" value="org.jminor"/>
      <attribute name="Implementation-URL" value="http://jminor.org"/>
      <attribute name="Build-Jdk" value="${java.version}"/>
      <attribute name="Built-By" value="${user.name}"/>
      <attribute name="Build-Time" value="${build.date}"/>
    </manifest>
  </target>

  <target name="javadoc" depends="build"
          description="Generates framework javadocs">
    <delete dir="${javadoc}" includeEmptyDirs="true"/>
    <delete dir="${javadoc.plugins}" includeEmptyDirs="true"/>
    <mkdir dir="${javadoc}"/>
    <mkdir dir="${javadoc.plugins}"/>
    <javadoc destdir="${javadoc}" sourcepath="${src.main}" packagenames="org.jminor.*" Encoding="UTF-8"
             docencoding="UTF-8" author="true" version="true" use="true"
             windowtitle="JMinor v${version} API" doctitle="JMinor v${version} API"
             group="Common org.jminor.common*,
                    Client org.jminor.framework.client*,
                    Db org.jminor.framework.db*,
                    Domain org.jminor.framework.domain*,
                    Server org.jminor.framework.server*">
      <classpath refid="lib.build.core"/>
      <link href="http://download.oracle.com/javase/8/docs/api/"/>
    </javadoc>
    <javadoc destdir="${javadoc.plugins}" sourcepath="${src.plugins}" packagenames="org.jminor.*" Encoding="UTF-8"
             docencoding="UTF-8" author="true" version="true" use="true"
             windowtitle="JMinor v${version} Plugin API" doctitle="JMinor v${version} Plugin API"
             group="Plugins org.jminor.framework.plugins">
      <classpath>
        <path refid="lib.build.core"/>
        <path refid="lib.build.plugins"/>
        <path location="${build.main}"/>
      </classpath>
      <link href="http://download.oracle.com/javase/8/docs/api/"/>
      <link offline="true" href="http://jminor.org/data/media/project/docs/api/" packagelistloc="${javadoc}"/>
    </javadoc>
  </target>

  <target name="deploy_server" depends="create_client_server_keystore"
          description="Deploys the rmi server to the path defined by the 'deploy.server.path' property">
    <copy file="${dist}/jminor-server/jminor-server.jar" todir="${deploy.server.path}/lib"/>
    <copy file="${dist}/jminor-db-core/jminor-db-core.jar" todir="${deploy.server.path}/lib"/>
    <copy file="${dist}/jminor-db-local/jminor-db-local.jar" todir="${deploy.server.path}/lib"/>
    <copy file="${dist}/jminor-common-model/jminor-common-model.jar" todir="${deploy.server.path}/lib"/>
    <copy file="${dist}/jminor-plugin-jasperreports/jminor-plugin-jasperreports.jar" todir="${deploy.server.path}/lib"/>
    <copy file="${dist}/jminor-plugin-rest/jminor-plugin-rest.jar" todir="${deploy.server.path}/lib"/>
    <copy file="${dist}/jminor-demos/jminor-demos.jar" todir="${deploy.server.path}/lib"/>
    <copy todir="${deploy.server.path}/lib">
      <fileset dir="${lib}/runtime.server"/>
    </copy>
    <copy todir="${deploy.server.path}">
      <fileset dir="${basedir}/resources/server/"/>
    </copy>
    <copy file="${deploy.server.policy}" todir="${deploy.server.config.path}"/>
    <copy file="${deploy.server.allpermissions.policy}" todir="${deploy.server.config.path}"/>
    <copy file="${deploy.server.keystore}" todir="${deploy.server.config.path}"/>
    <copy file="${deploy.server.monitor.truststore}" todir="${deploy.server.config.path}"/>
    <chmod dir="${deploy.server.path}" perm="u+x" type="file" includes="*.sh"/>
    <copy todir="${deploy.server.path}/h2db">
      <fileset dir="${db.h2.dir}"/>
    </copy>
    <copy todir="${deploy.server.path}/reports/demos" flatten="true">
      <fileset dir="${basedir}/resources/demos/" includes="**/*.jasper"/>
    </copy>
  </target>

  <target name="deploy_server_monitor" depends="create_client_server_keystore"
          description="Deploys the rmi server monitor to the path defined by the 'deploy.server.monitor.path' property">
    <mkdir dir="${deploy.server.monitor.path}"/>
    <copy file="${dist}/jminor-server-monitor/jminor-server-monitor.jar" todir="${deploy.server.monitor.path}/lib"/>
    <copy file="${dist}/jminor-common-model/jminor-common-model.jar" todir="${deploy.server.monitor.path}/lib"/>
    <copy file="${dist}/jminor-common-ui/jminor-common-ui.jar" todir="${deploy.server.monitor.path}/lib"/>
    <copy todir="${deploy.server.monitor.path}/lib">
      <fileset dir="${lib}/runtime.server-monitor"/>
    </copy>
    <copy todir="${deploy.server.monitor.path}">
      <fileset dir="${basedir}/resources/server_monitor/"/>
    </copy>
    <copy file="${deploy.server.monitor.policy}" todir="${deploy.server.monitor.config.path}"/>
    <copy file="${deploy.server.monitor.truststore}" todir="${deploy.server.monitor.config.path}"/>
    <chmod dir="${deploy.server.monitor.path}" perm="u+x" type="file" includes="*.sh"/>
  </target>

  <target name="deploy_generator"
          description="Deploys the entity generator to the path defined by the 'deploy.generator.path' property">
    <mkdir dir="${deploy.generator.path}"/>
    <copy file="${dist}/jminor/jminor.jar" todir="${deploy.generator.path}/lib"/>
    <copy todir="${deploy.generator.path}/lib">
      <fileset dir="${lib}/runtime.client"/>
    </copy>
    <copy todir="${deploy.generator.path}">
      <fileset dir="${basedir}/resources/entity_generator/"/>
    </copy>
    <copy todir="${deploy.generator.path}/h2db">
      <fileset dir="${db.h2.dir}"/>
    </copy>
    <copy file="${deploy.generator.policy}" todir="${deploy.generator.config.path}"/>
    <chmod dir="${deploy.generator.path}" perm="u+x" type="file" includes="*.sh"/>
  </target>

  <target name="deploy_demo_apps" depends="create_client_server_keystore"
          description="Deploys the demo applications to the path defined by the 'deploy.demos.dir' property">
    <taskdef name="getdown_digest" classname="com.threerings.getdown.tools.DigesterTask" classpathref="lib.ant.util"/>
    <!--Setup-->
    <mkdir dir="${deploy.demos.dir}/META-INF"/>
    <jar jarfile="${deploy.demos.dir}/libraries.jar">
      <zipgroupfileset dir="${lib}/runtime.client" includes="*.jar" excludes="*api-doc.jar, *src.jar, META-INF/**/*"/>
      <zipgroupfileset dir="${dist}"
                       includes="jminor-client-bundle/jminor-bundle.jar, jminor-plugin-jasperreports/jminor-plugin-jasperreports.jar"
                       excludes="*javadoc.jar, *sources.jar, META-INF/**/*"/>
      <fileset file="${deploy.demos.truststore}"/>
    </jar>
    <deploy_demo_app app-id="empdept" app-name="EmpDept JMinor Demo" main-class="org.jminor.framework.demos.empdept.client.ui.EmpDeptAppPanel"/>
    <deploy_demo_app app-id="chinook" app-name="Chinook JMinor Demo" main-class="org.jminor.framework.demos.chinook.client.ui.ChinookAppPanel"/>
    <deploy_demo_app app-id="world" app-name="World JMinor Demo" main-class="org.jminor.framework.demos.world.client.ui.WorldAppPanel"/>
    <!--Cleanup-->
    <delete dir="${deploy.demos.dir}/META-INF"/>
    <delete file="${deploy.demos.dir}/libraries.jar"/>
  </target>

  <target name="deploy_all" depends="clean, dist, deploy_server, deploy_server_monitor, deploy_demo_apps, deploy_generator"
          description="A convenience target for deploying the server, server monitor and demo applications"/>

  <target name="run_unit_tests" depends="clean, build, compile_demo_reports"
          description="Runs the framework unit tests with JaCoCo coverage">
    <delete dir="${test.reports}" includeEmptyDirs="true"/>
    <delete dir="${test.reports.html}" includeEmptyDirs="true"/>
    <delete dir="${test.coveragereport.xml}" includeEmptyDirs="true"/>
    <delete dir="${test.coveragereport.html}" includeEmptyDirs="true"/>
    <mkdir dir="${test.reports}"/>
    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml" classpathref="lib.ant.util"/>
    <jacoco:coverage destfile="${test.reports}/jacoco-main.exec">
      <junit printsummary="yes" haltonfailure="true" haltonerror="true" fork="yes" forkmode="once">
        <formatter type="xml" usefile="true"/>
        <classpath>
          <path refid="classes.main"/>
          <path refid="classes.plugins"/>
          <path refid="classes.test"/>
          <path refid="lib.runtime.test"/>
        </classpath>
        <jvmarg value="-Djava.security.policy=resources/security/all_permissions.policy"/>
        <jvmarg value="-Djminor.db.type=${junit.db.type}"/>
        <jvmarg value="-Djminor.db.host=${junit.db.host}"/>
        <jvmarg value="-Djminor.db.port=${junit.db.port}"/>
        <jvmarg value="-Djminor.db.sid=${junit.db.sid}"/>
        <jvmarg value="-Djminor.db.embedded=${junit.db.embedded}"/>
        <jvmarg value="-Djminor.db.embeddedInMemory=${junit.db.embeddedInMemory}"/>
        <jvmarg value="-Djminor.db.initScript=${junit.db.initScript}"/>
        <jvmarg value="-Djminor.unittest.username=${junit.username}"/>
        <jvmarg value="-Djminor.unittest.password=${junit.password}"/>
        <batchtest todir="${test.reports}">
          <fileset dir="${src.test}" includes="**/*Test.java"/>
        </batchtest>
      </junit>
    </jacoco:coverage>
    <jacoco:coverage destfile="${test.reports}/jacoco-demos.exec" append="true">
      <junit printsummary="yes" haltonfailure="true" haltonerror="true" fork="yes" forkmode="once">
        <formatter type="xml" usefile="true"/>
        <classpath>
          <path refid="classes.main"/>
          <path refid="classes.plugins"/>
          <path refid="classes.demos"/>
          <path refid="lib.runtime.test"/>
        </classpath>
        <jvmarg value="-Djava.security.policy=resources/security/all_permissions.policy"/>
        <jvmarg value="-Djminor.db.type=${junit.db.type}"/>
        <jvmarg value="-Djminor.db.host=${junit.db.host}"/>
        <jvmarg value="-Djminor.db.port=${junit.db.port}"/>
        <jvmarg value="-Djminor.db.sid=${junit.db.sid}"/>
        <jvmarg value="-Djminor.db.embedded=${junit.db.embedded}"/>
        <jvmarg value="-Djminor.db.embeddedInMemory=${junit.db.embeddedInMemory}"/>
        <jvmarg value="-Djminor.db.initScript=${junit.db.initScript}"/>
        <jvmarg value="-Djminor.unittest.username=${junit.username}"/>
        <jvmarg value="-Djminor.unittest.password=${junit.password}"/>
        <batchtest todir="${test.reports}">
          <fileset dir="${src.demos}" includes="**/*Test.java" excludes="**/*LoadTest.java"/>
        </batchtest>
      </junit>
    </jacoco:coverage>
    <jacoco:merge destfile="${test.reports}/jacoco.exec">
      <fileset dir="${test.reports}" includes="*.exec"/>
    </jacoco:merge>
    <antcall target="create_unit_test_report"/>
    <antcall target="create_coverage_report"/>
  </target>

  <target name="create_unit_test_report"
          description="Creates a unit test html report on previously run tests">
    <mkdir dir="${test.reports.html}"/>
    <junitreport todir="${test.reports}">
      <fileset dir="${test.reports}" includes="TEST-*.xml"/>
      <report format="frames" todir="${test.reports.html}"/>
    </junitreport>
  </target>

  <target name="create_coverage_report"
          description="Creates a unit test coverage report on previously run tests">
    <delete dir="${test.coveragereport.html}" includeEmptyDirs="true"/>
    <delete dir="${test.coveragereport.xml}" includeEmptyDirs="true"/>
    <mkdir dir="${test.coveragereport.html}"/>
    <mkdir dir="${test.coveragereport.xml}"/>
    <jacoco:report>
      <executiondata>
        <file file="${test.reports}/jacoco.exec" />
      </executiondata>

      <structure name="JMinor JaCoCo Results">
        <classfiles>
          <fileset dir="${build.main}"/>
        </classfiles>
        <sourcefiles encoding="UTF-8">
          <fileset dir="${src.main}"/>
        </sourcefiles>
      </structure>

      <html destdir="${test.coveragereport.html}" />
      <xml destfile="${test.coveragereport.xml}/report.xml" />
    </jacoco:report>
  </target>

  <target name="run_demo_chinook_local" depends="build"
          description="Runs the Chinook demo application with a local db connection">
    <java classname="org.jminor.framework.demos.chinook.client.ui.ChinookAppPanel" fork="yes">
      <classpath>
        <path refid="classes.main"/>
        <path refid="classes.plugins"/>
        <path refid="classes.demos"/>
        <path refid="lib.runtime.client"/>
      </classpath>
      <jvmarg value="-Djminor.db.type=${demo.db.type}"/>
      <jvmarg value="-Djminor.db.host=${demo.db.host}"/>
      <jvmarg value="-Djminor.db.port=${demo.db.port}"/>
      <jvmarg value="-Djminor.db.sid=${demo.db.sid}"/>
      <jvmarg value="-Djminor.db.embedded=${demo.db.embedded}"/>
      <jvmarg value="-Djminor.db.embeddedInMemory=${demo.db.embeddedInMemory}"/>
      <jvmarg value="-Djminor.db.initScript=${demo.db.initScript}"/>
      <jvmarg value="-Djminor.report.path=resources/demos/chinook/reports"/>
    </java>
  </target>

  <target name="run_demo_chinook_remote" depends="build, create_client_server_keystore"
          description="Runs the Chinook demo application with a remote db connection">
    <java classname="org.jminor.framework.demos.chinook.client.ui.ChinookAppPanel" fork="yes">
      <classpath>
        <path refid="classes.main"/>
        <path refid="classes.plugins"/>
        <path refid="classes.demos"/>
        <path refid="lib.runtime.client"/>
      </classpath>
      <jvmarg value="-Djminor.client.connectionType=remote"/>
      <jvmarg value="-Djminor.server.hostname=localhost"/>
      <jvmarg value="-Djminor.report.path=resources/demos/chinook/reports"/>
      <jvmarg value="-Djavax.net.ssl.trustStore=${resources.security}/JMinorClientTruststore"/>
      <jvmarg value="-Djava.security.policy=${resources.security}/jminor_client.policy"/>
    </java>
  </target>

  <target name="run_demo_chinook_load_test" depends="build, create_client_server_keystore"
          description="Runs the Chinook load testing application with a remote db connection">
    <java classname="org.jminor.framework.demos.chinook.testing.ChinookLoadTest" fork="yes">
      <classpath>
        <path refid="classes.main"/>
        <path refid="classes.plugins"/>
        <path refid="classes.demos"/>
        <path refid="lib.runtime.client"/>
      </classpath>
      <jvmarg value="-Djminor.client.connectionType=remote"/>
      <jvmarg value="-Djminor.server.hostname=localhost"/>
      <jvmarg value="-Djminor.report.path=resources/demos/chinook/reports"/>
      <jvmarg value="-Djavax.net.ssl.trustStore=${resources.security}/JMinorClientTruststore"/>
      <jvmarg value="-Djava.security.policy=${resources.security}/jminor_load_test.policy"/>
    </java>
  </target>

  <target name="run_rmi_server" depends="build, create_client_server_keystore"
          description="Runs the RMI server">
    <java classname="org.jminor.framework.server.DefaultEntityConnectionServerAdmin" fork="yes">
      <classpath>
        <path refid="classes.main"/>
        <path refid="classes.demos"/>
        <path refid="lib.runtime.server"/>
      </classpath>
      <jvmarg value="-Djminor.db.type=${demo.db.type}"/>
      <jvmarg value="-Djminor.db.host=${demo.db.host}"/>
      <jvmarg value="-Djminor.db.port=${demo.db.port}"/>
      <jvmarg value="-Djminor.db.sid=${demo.db.sid}"/>
      <jvmarg value="-Djminor.db.embedded=${demo.db.embedded}"/>
      <jvmarg value="-Djminor.db.embeddedInMemory=${demo.db.embeddedInMemory}"/>
      <jvmarg value="-Djminor.db.initScript=${demo.db.initScript}"/>
      <jvmarg value="-Djminor.server.pooling.initial=scott:tiger"/>
      <jvmarg value="-Djminor.server.clientLoggingEnabled=true"/>
      <jvmarg value="-Djminor.server.port=2222"/>
      <jvmarg value="-Djminor.server.admin.port=4444"/>
      <jvmarg value="-Djminor.server.domain.classes=org.jminor.framework.demos.empdept.domain.EmpDept, org.jminor.framework.demos.petstore.domain.Petstore, org.jminor.framework.demos.chinook.domain.Chinook, org.jminor.framework.demos.schemabrowser.domain.SchemaBrowser, org.jminor.framework.demos.world.domain.World"/>
      <jvmarg value="-Djavax.net.ssl.keyStore=${resources.security}/JMinorServerKeystore"/>
      <jvmarg value="-Djava.security.policy=${resources.security}/jminor_server.policy"/>
      <jvmarg value="-Djavax.net.ssl.keyStorePassword=crappypass"/>
      <jvmarg value="-Djava.rmi.server.hostname=localhost"/>
    </java>
  </target>

  <target name="run_rmi_server_monitor" depends="build, create_client_server_keystore"
          description="Runs the RMI server monitor">
    <java classname="org.jminor.framework.server.monitor.ui.EntityServerMonitorPanel" fork="yes">
      <classpath>
        <path refid="classes.main"/>
        <path refid="lib.runtime.server-monitor"/>
      </classpath>
      <jvmarg value="-Djminor.server.hostname=localhost"/>
      <jvmarg value="-Djavax.net.ssl.trustStore=${resources.security}/JMinorServerMonitorTruststore"/>
      <jvmarg value="-Djava.security.policy=${resources.security}/jminor_server_monitor.policy"/>
    </java>
  </target>

  <target name="run_entity_generator" depends="build"
          description="Runs the entity generator">
    <java classname="org.jminor.framework.tools.generator.ui.EntityGeneratorPanel" fork="yes">
      <classpath>
        <path refid="classes.main"/>
        <path refid="lib.runtime.client"/>
      </classpath>
      <jvmarg value="-Djminor.db.type=h2"/>
      <jvmarg value="-Djminor.db.host=h2db/h2"/>
      <jvmarg value="-Djminor.db.embedded=true"/>
    </java>
  </target>

  <target name="recreate_h2_db"
          description="Recreates the demo h2 database. The demo database includes the EmpDept, Petstore and Chinook schemas, used by unit tests and demo applications">
    <delete dir="${db.h2.dir}"/>
    <java fork="true" classname="org.h2.tools.RunScript" classpathref="lib.runtime.test">
      <arg line="-url jdbc:h2:${db.h2.dir}/${db.h2.name} -showResults -script ${db.init.h2}"/>
    </java>
  </target>

  <target name="create_client_server_keystore" unless="keystore.available"
          description="Creates a client/server keystore for running the demos">
    <genkey alias="JMinorServer" keyalg="RSA" storepass="crappypass" validity="365" keystore="${resources.security}/JMinorServerKeystore">
      <dname>
        <param name="CN" value="Dummy"/>
        <param name="OU" value="dummy"/>
        <param name="O" value="dummy.org"/>
        <param name="C" value="DU"/>
      </dname>
    </genkey>
    <exec executable="${java.bin}/keytool" failonerror="true">
      <arg value="-exportcert"/>
      <arg line="-keystore ${resources.security}/JMinorServerKeystore"/>
      <arg line="-alias JMinorServer"/>
      <arg line="-storepass crappypass"/>
      <arg line="-rfc"/>
      <arg line="-file ${resources.security}/JMinorServer.cer"/>
    </exec>
    <exec executable="${java.bin}/keytool" failonerror="true">
      <arg value="-import"/>
      <arg line="-alias JMinorServer"/>
      <arg line="-storepass crappypass"/>
      <arg line="-file ${resources.security}/JMinorServer.cer"/>
      <arg line="-keystore ${resources.security}/JMinorClientTruststore"/>
      <arg line="-noprompt"/>
    </exec>
    <copy file="${resources.security}/JMinorClientTruststore" tofile="${resources.security}/JMinorServerMonitorTruststore"/>
    <delete file="${resources.security}/JMinorServer.cer"/>
  </target>

  <macrodef name="dist_module">
    <attribute name="module.name"/>
    <attribute name="basedir.classes"/>
    <attribute name="basedir.sources"/>
    <attribute name="basedir.javadoc"/>
    <attribute name="includes" default=""/>
    <attribute name="excludes" default=""/>
    <sequential>
      <delete file="${dist}/@{module.name}/@{module.name}.jar"/>
      <jar jarfile="${dist}/@{module.name}/@{module.name}.jar" basedir="@{basedir.classes}"
           manifest="${build.main}/META-INF/MANIFEST.MF"
           includes="@{includes}" excludes="@{excludes}"/>
      <delete file="${dist}/@{module.name}/@{module.name}-sources.jar"/>
      <jar jarfile="${dist}/@{module.name}/@{module.name}-sources.jar" basedir="@{basedir.sources}"
           manifest="${build.main}/META-INF/MANIFEST.MF"
           includes="@{includes}" excludes="@{excludes}"/>
      <delete file="${dist}/@{module.name}/@{module.name}-javadoc.jar"/>
      <jar jarfile="${dist}/@{module.name}/@{module.name}-javadoc.jar" basedir="@{basedir.javadoc}"
           manifest="${build.main}/META-INF/MANIFEST.MF"
           includes="@{includes}" excludes="@{excludes}"/>
    </sequential>
  </macrodef>

  <macrodef name="create_manifest">
    <attribute name="destination"/>
    <attribute name="application-name"/>
    <attribute name="main-class"/>
    <sequential>
      <manifest file="@{destination}/META-INF/MANIFEST.MF">
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Application-Name" value="@{application-name}"/>
        <attribute name="Specification-Title" value="${ant.project.name}"/>
        <attribute name="Specification-Name" value="${ant.project.name}"/>
        <attribute name="Specification-Vendor" value="${deploy.demos.codebase}"/>
        <attribute name="Permissions" value="all-permissions"/>
        <attribute name="Codebase" value="${deploy.demos.codebase}"/>
        <attribute name="Main-Class" value="@{main-class}"/>
      </manifest>
    </sequential>
  </macrodef>

  <macrodef name="deploy_demo_app">
    <attribute name="app-id"/>
    <attribute name="app-name"/>
    <attribute name="main-class"/>
    <sequential>
      <mkdir dir="${deploy.demos.dir}/@{app-id}"/>
      <create_manifest destination="${deploy.demos.dir}" application-name="@{app-name}"
                       main-class="@{main-class}"/>
      <jar jarfile="${deploy.demos.dir}/@{app-id}/@{app-id}.jar" duplicate="preserve" filesetmanifest="mergewithoutmain"
           manifest="${deploy.demos.dir}/META-INF/MANIFEST.MF">
        <zipfileset dir="${build.demos}" includes="org/jminor/framework/demos/@{app-id}/**/*"/>
        <zipfileset src="${deploy.demos.dir}/libraries.jar"/>
        <zipfileset dir="${basedir}/resources/demos/@{app-id}" includes="@{app-id}.jnlp" fullpath="JNLP-INF/APPLICATION.JNLP"/>
      </jar>
      <signjar jar="${deploy.demos.dir}/@{app-id}/@{app-id}.jar" alias="${jar.sign.alias}"
               storepass="${jar.sign.storepass}" keystore="${jar.sign.keystore}"/>
      <copy file="${basedir}/resources/demos/@{app-id}/@{app-id}.jnlp" todir="${deploy.demos.dir}/@{app-id}"/>
      <copy file="${basedir}/resources/demos/@{app-id}/getdown.txt" todir="${deploy.demos.dir}/@{app-id}"/>
      <copy file="${basedir}/docs/jminor.org/jminor_logo_black_medium.png" todir="${deploy.demos.dir}/@{app-id}"/>
      <getdown_digest appdir="${deploy.demos.dir}/@{app-id}"/>
      <zip destfile="${deploy.demos.dir}/@{app-id}/@{app-id}.zip">
        <zipfileset file="${deploy.demos.dir}/@{app-id}/@{app-id}.jar"/>
        <zipfileset dir="${db.h2.dir}" prefix="h2db"/>
        <zipfileset file="${basedir}/resources/demos/config/h2db.config"/>
        <zipfileset file="${basedir}/resources/demos/config/remote.config"/>
      </zip>
    </sequential>
  </macrodef>
</project>