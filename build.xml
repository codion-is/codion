<?xml version="1.0" encoding="UTF-8"?>
<project name="jminor" default="dist" basedir=".">

  <description>JMinor RAD Framework build file</description>

  <property file="build.properties"/>

  <path id="libraries">
    <fileset dir="${lib}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <fileset id="common_resources" dir="${src}" includes=
          "org/jminor/common/**/*.gif, org/jminor/common/**/*.png, org/jminor/common/**/*.properties, org/jminor/common/**/*.txt, log4j.properties"/>
  <fileset id="framework_resources" dir="${src}" includes=
          "org/jminor/framework/**/*.gif, org/jminor/framework/**/*.png, org/jminor/framework/**/*.properties, org/jminor/framework/**/*.txt" />
  <fileset id="test_resources" dir="${srctest}" includes=
          "org/jminor/**/*.gif, org/jminor/**/*.properties, org/jminor/**/*.txt"/>
  <fileset id="demos_resources" dir="${srcdemos}" includes=
          "org/jminor/framework/**/*.gif, org/jminor/framework/**/*.png, org/jminor/framework/**/*.properties, org/jminor/framework/**/*.txt" />

  <target name="clean"
          description="Clean all output and generated dirs">
    <delete dir="${build.base}" includeEmptyDirs="true" />
    <delete dir="${build.demos}" includeEmptyDirs="true" />
    <delete dir="${build.test}" includeEmptyDirs="true" />
    <delete dir="${build.root}" includeEmptyDirs="true" />
    <delete dir="${reports}" includeEmptyDirs="true" />
    <delete dir="${htmlreports}" includeEmptyDirs="true" />
    <delete dir="${test}" includeEmptyDirs="true" />
  </target>

  <target name="build"
          description="Compiles all source files">
    <mkdir dir="${build.base}" />
    <mkdir dir="${build.demos}" />
    <mkdir dir="${build.test}" />

    <javac destdir="${build.base}" debug="${build.debuginfo}" >
      <src path="${src}" />
      <classpath refid="libraries"/>
    </javac>

    <rmic base="${build.base}" includes="org/jminor/framework/server/EntityDbRemoteServer.class,
                                         org/jminor/framework/server/EntityDbRemoteServerAdmin.class,
                                         org/jminor/framework/server/EntityDbRemoteAdapter.class">
      <classpath refid="libraries"/>
    </rmic>

    <copy todir="${build.base}" >
      <fileset refid="common_resources" />
      <fileset refid="framework_resources" />
    </copy>

    <javac destdir="${build.demos}" debug="{build.debug}" >
      <src path="${srcdemos}" />
      <classpath>
        <path refid="libraries" />
        <path location="${build.base}" />
      </classpath>
    </javac>

    <copy todir="${build.demos}" >
      <fileset refid="demos_resources" />
    </copy>

    <javac destdir="${build.test}" debug="{build.debug}" >
      <src path="${srctest}" />
      <classpath>
        <path refid="libraries" />
        <path location="${build.base}" />
        <path location="${build.demos}" />
      </classpath>
    </javac>

    <copy todir="${build.test}" >
      <fileset refid="test_resources" />
    </copy>

    <tstamp>
      <format property="DSTAMP" pattern="yyyy.MM.dd HH:mm" />
    </tstamp>
    <concat destfile="${build.base}/org/jminor/common/model/version.txt">v${version} build ${DSTAMP}</concat>
  </target>

  <target name="dist" depends="build, manifest"
          description="Creates all distribution jar files in the dist directory">
    <mkdir dir="${dist}" />
    <jar jarfile="${dist}/${ant.project.name}.jar" basedir="${build.base}"
         manifest="${build.base}/META-INF/MANIFEST.MF"/>

    <jar jarfile="${dist}/${ant.project.name}-common.jar" basedir="${build.base}"
         manifest="${build.base}/META-INF/MANIFEST.MF"
         includes="org/jminor/common/**, log4j.properties"/>

    <jar jarfile="${dist}/${ant.project.name}-client.jar" basedir="${build.base}"
         manifest="${build.base}/META-INF/MANIFEST.MF"
         includes="org/jminor/framework/Configuration*
                org/jminor/framework/client/**,
                org/jminor/framework/db/**,
                org/jminor/framework/i18n/**,
                org/jminor/framework/model/**,
                org/jminor/framework/profiling/**,
                org/jminor/framework/testing/**,
                org/jminor/framework/server/provider/EntityDbRemoteProvider*,
                org/jminor/framework/server/IEntityDbRemote.class,
                org/jminor/framework/server/IEntityDbRemoteServer.class,
                org/jminor/framework/server/EntityDbRemoteAdapter_Stub.class,
                org/jminor/framework/server/EntityDbRemoteServer_Stub.class"/>

    <jar jarfile="${dist}/${ant.project.name}-client-remote.jar" basedir="${build.base}"
         manifest="${build.base}/META-INF/MANIFEST.MF"
         includes="org/jminor/framework/Configuration*,
                org/jminor/framework/client/**,
                org/jminor/framework/db/criteria/**,
                org/jminor/framework/db/EntityDbProviderFactory*,
                org/jminor/framework/db/IEntityDb*,
                org/jminor/framework/i18n/**,
                org/jminor/framework/model/**,
                org/jminor/framework/profiling/**,
                org/jminor/framework/testing/**,
                org/jminor/framework/server/provider/EntityDbRemoteProvider*,
                org/jminor/framework/server/IEntityDbRemote.class,
                org/jminor/framework/server/IEntityDbRemoteServer.class,
                org/jminor/framework/server/EntityDbRemoteAdapter_Stub.class,
                org/jminor/framework/server/EntityDbRemoteServer_Stub.class"/>

    <jar jarfile="${dist}/${ant.project.name}-server.jar" basedir="${build.base}"
         manifest="${build.base}/META-INF/MANIFEST.MF"
         includes="org/jminor/framework/Configuration*,
                org/jminor/framework/db/**,
                org/jminor/framework/model/*,
                org/jminor/framework/server/*.class"
         excludes="org/jminor/framework/server/*Stub.class"/>

    <jar jarfile="${dist}/${ant.project.name}-server-monitor.jar" basedir="${build.base}"
         manifest="${build.base}/META-INF/MANIFEST.MF"
         includes="org/jminor/framework/Configuration*,
                org/jminor/framework/db/DbException.class,
                org/jminor/framework/db/IEntityDb.class,
                org/jminor/framework/model/EntityRepository.class,
                org/jminor/framework/server/monitor/**,
                org/jminor/framework/server/IEntityDbRemoteServerAdmin.class,
                org/jminor/framework/server/EntityDbRemoteServerAdmin_Stub.class"/>

    <jar jarfile="${dist}/${ant.project.name}-demos.jar" basedir="${build.demos}"
         manifest="${build.base}/META-INF/MANIFEST.MF"/>

    <jar jarfile="${dist}/${ant.project.name}-src.jar" basedir="${src}"
         manifest="${build.base}/META-INF/MANIFEST.MF"/>
    <jar jarfile="${dist}/${ant.project.name}-src-test.jar" basedir="${srctest}"
         manifest="${build.base}/META-INF/MANIFEST.MF"/>
    <jar jarfile="${dist}/${ant.project.name}-src-demos.jar" basedir="${srcdemos}"
         manifest="${build.base}/META-INF/MANIFEST.MF"/>
    <jar jarfile="${dist}/${ant.project.name}-api-doc.jar" basedir="${docsapi}"
         manifest="${build.base}/META-INF/MANIFEST.MF"/>

    <copy file="${basedir}/changelog.txt" todir="${dist}" />
  </target>

  <target name="manifest"
          description="Generates a MANIFEST.MF file for inclusion in jars">
		<mkdir dir="${build.base}/META-INF"/>
		<manifest file="${build.base}/META-INF/MANIFEST.MF">
			<attribute name="Implementation-Title" value="JMinor Application Framework"/>
			<attribute name="Implementation-Version" value="${version}"/>
			<attribute name="Implementation-URL" value="http://jminor.org"/>
			<attribute name="Build-Jdk" value="${java.specification.version}"/>
		</manifest>
	</target>

  <target name="javadoc" depends="build"
          description="Generates framework javadocs">
    <delete dir="${docsapi}" includeEmptyDirs="true" />
    <delete dir="${docstestapi}" includeEmptyDirs="true" />
    <mkdir dir="${docsapi}" />
    <mkdir dir="${docstestapi}" />
    <javadoc destdir="${docstestapi}" sourcepath="${srctest}" packagenames="org.jminor.*"
             author="true" version="true" use="true" windowtitle="JMinor Test API docs"
             link="http://java.sun.com/javase/6/docs/api/"
             group="Common org.jminor.common*,
                    Client org.jminor.framework.client*,
                    Db org.jminor.framework.db*,
                    Model org.jminor.framework.model*,
                    Demos org.jminor.framework.demos*">
      <classpath>
        <path refid="libraries" />
        <path location="${build.base}" />
        <path location="${build.demos}" />
      </classpath>
    </javadoc>
    <javadoc destdir="${docsapi}" sourcepath="${src}" packagenames="org.jminor.*"
             author="true" version="true" use="true" windowtitle="JMinor API docs"
             link="http://java.sun.com/javase/6/docs/api/"
             group="Common org.jminor.common*,
                    Client org.jminor.framework.client*,
                    Db org.jminor.framework.db*,
                    Model org.jminor.framework.model*,
                    Server org.jminor.framework.server*">
      <classpath refid="libraries"/>
    </javadoc>
  </target>

  <target name="deploy_server" depends="create_derby_db, create_h2_db"
          description="Deploys the rmi server to the path defined by the 'deploy.server.path' property">
    <mkdir dir="${deploy.server.path}" />
    <copy file="${dist}/${ant.project.name}-server.jar" todir="${deploy.server.path}/lib" />
    <copy file="${dist}/${ant.project.name}-common.jar" todir="${deploy.server.path}/lib" />
    <copy file="${lib.log4j}" todir="${deploy.server.path}/lib" />
    <copy file="${lib.derby}" todir="${deploy.server.path}/lib" />
    <copy file="${lib.h2}" todir="${deploy.server.path}/lib" />
    <copy file="${lib.jasperreports.base}" todir="${deploy.server.path}/lib" />
    <copy file="${lib.jasperreports.collections}" todir="${deploy.server.path}/lib" />
    <copy file="${lib.jasperreports.logging}" todir="${deploy.server.path}/lib" />
    <copy file="${deploy.server.policy}" todir="${deploy.server.path}" />
    <copy file="${deploy.server.allpermissions.policy}" todir="${deploy.server.path}" />
    <copy file="${deploy.server.keystore}" todir="${deploy.server.path}" />
    <copy todir="${deploy.server.path}" >
      <fileset dir="${basedir}/resources/server/" />
    </copy>
    <chmod dir="${deploy.server.path}" perm="u+x" type="file" includes="*.sh"/>
    <copy todir="${deploy.server.path}/h2db" >
      <fileset dir="${db.h2.dir}" />
    </copy>
    <copy todir="${deploy.server.path}/derbydb" >
      <fileset dir="${db.derby.dir}" />
    </copy>
  </target>

  <target name="deploy_server_monitor"
          description="Deploys the rmi server monitor to the path defined by the 'deploy.server.monitor.path' property">
    <mkdir dir="${deploy.server.monitor.path}" />
    <copy file="${dist}/${ant.project.name}-server-monitor.jar" todir="${deploy.server.monitor.path}/lib" />
    <copy file="${dist}/${ant.project.name}-common.jar" todir="${deploy.server.monitor.path}/lib" />
    <copy file="${lib.log4j}" todir="${deploy.server.monitor.path}/lib" />
    <copy file="${lib.jfreechart.base}" todir="${deploy.server.monitor.path}/lib" />
    <copy file="${lib.jfreechart.common}" todir="${deploy.server.monitor.path}/lib" />
    <copy file="${lib.jcalendar}" todir="${deploy.server.monitor.path}/lib" />
    <copy file="${deploy.server.monitor.policy}" todir="${deploy.server.monitor.path}" />
    <copy file="${deploy.server.monitor.truststore}" todir="${deploy.server.monitor.path}" />
    <copy todir="${deploy.server.monitor.path}" >
      <fileset dir="${basedir}/resources/server_monitor/" />
    </copy>
    <chmod dir="${deploy.server.monitor.path}" perm="u+x" type="file" includes="*.sh"/>
  </target>

  <target name="deploy_demos" depends="create_derby_db, create_h2_db"
          description="Deploys the demo applications to the path defined by the 'deploy.demos.path' property">
    <mkdir dir="${deploy.demos.path}" />
    <copy file="${dist}/${ant.project.name}-client.jar" todir="${deploy.demos.path}/lib" />
    <copy file="${dist}/${ant.project.name}-client-remote.jar" todir="${deploy.demos.path}/lib" />
    <copy file="${dist}/${ant.project.name}-demos.jar" todir="${deploy.demos.path}/lib" />
    <copy file="${dist}/${ant.project.name}-common.jar" todir="${deploy.demos.path}/lib" />
    <copy file="${lib.derby}" todir="${deploy.demos.path}/lib" />
    <copy file="${lib.h2}" todir="${deploy.demos.path}/lib" />
    <copy file="${lib.jasperreports.base}" todir="${deploy.demos.path}/lib" />
    <copy file="${lib.jasperreports.collections}" todir="${deploy.demos.path}/lib" />
    <copy file="${lib.jasperreports.itext}" todir="${deploy.demos.path}/lib" />
    <copy file="${lib.jasperreports.logging}" todir="${deploy.demos.path}/lib" />
    <copy file="${lib.log4j}" todir="${deploy.demos.path}/lib" />
    <copy file="${lib.jcalendar}" todir="${deploy.demos.path}/lib" />
    <copy file="${lib.jfreechart.base}" todir="${deploy.demos.path}/lib" />
    <copy file="${lib.jfreechart.common}" todir="${deploy.demos.path}/lib" />
    <copy file="${deploy.demos.policy}" todir="${deploy.demos.path}" />
    <copy file="${deploy.profiling.policy}" todir="${deploy.demos.path}" />
    <copy file="${deploy.demos.truststore}" todir="${deploy.demos.path}" />
    <copy todir="${deploy.demos.path}">
      <fileset dir="${basedir}/resources/demos/empdept/" excludes="**/*.jrxml,**/*.bak"/>
      <fileset dir="${basedir}/resources/demos/petstore/" />
      <fileset dir="${basedir}/resources/demos/schemabrowser/" />
    </copy>
    <chmod dir="${deploy.demos.path}" perm="u+x" type="file" includes="*.sh"/>
    <copy todir="${deploy.demos.path}/h2db" >
      <fileset dir="${db.h2.dir}" />
    </copy>
    <copy todir="${deploy.demos.path}/derbydb" >
      <fileset dir="${db.derby.dir}" />
    </copy>
  </target>

  <target name="deploy_all" depends="dist, deploy_server, deploy_server_monitor, deploy_demos"
          description="A convenience target for deploying the server, server monitor and demo applications">
    <delete file="${dist}/deployment/jminor-${version}.zip"/>
    <zip destfile="${dist}/deployment/jminor-${version}.zip" >
      <fileset dir="${dist}" excludes="deployment/**"/>
    </zip>
  </target>

  <target name="deploy_to_wiki" depends="javadoc, report"
          description="Publishes the relevant files to the documentation wiki">
    <delete dir="${wiki.media.project}"/>
    <mkdir dir="${wiki.media.project}"/>
    <copy todir="${wiki.media.project}/src">
      <fileset dir="${src}" excludes="*.svn*"/>
    </copy>
    <copy todir="${wiki.media.project}/src">
      <fileset dir="${srctest}"/>
    </copy>
    <copy todir="${wiki.media.project}/src">
      <fileset dir="${srcdemos}"/>
    </copy>
    <copy todir="${wiki.media.project}/docs">
      <fileset dir="${docs}"/>
    </copy>
    <copy todir="${wiki.media.project}/resources">
      <fileset dir="${resources}"/>
    </copy>
    <copy todir="${wiki.media.project}/test">
      <fileset dir="${test}" />
    </copy>
    <chmod dir="${wiki.media.project}" perm="ugo+r" type="file" includes="**/*"/>
    <chmod dir="${wiki.media.project}" perm="ugo+rx" type="dir" includes="**/*"/>
    <chmod file="${wiki.media.project}" perm="ugo+rx" type="dir"/>
  </target>

  <target name="deploy_project"
          description="Creates a jminor-project.zip file in the base directory">
    <delete file="${basedir}/${ant.project.name}-${version}-project.zip"/>
    <delete file="${basedir}/derby.log"/>
    <zip destfile="${basedir}/${ant.project.name}-${version}-project.zip" >
      <fileset dir="${basedir}" excludes="test/**,dist/deployment/**,classes/**,derbydb/**,h2db/**"/>
    </zip>
  </target>

  <target name="report" depends="run_unit_tests"
          description="Creates a unit test html report">
    <mkdir dir="${htmlreports}" />
    <junitreport todir="${reports}">
      <fileset dir="${reports}" includes="TEST-*.xml" />
      <report format="frames" todir="${htmlreports}" />
    </junitreport>
  </target>

  <target name="run_unit_tests" depends="build, create_derby_db"
          description="Runs the framework unit tests">
    <mkdir dir="${reports}" />
    <junit printsummary="yes" haltonfailure="true" haltonerror="true" fork="yes" >
      <formatter type="xml" usefile="true" />
      <classpath>
        <pathelement path="${build.base}" />
        <pathelement path="${build.demos}" />
        <pathelement path="${build.test}" />
        <path refid="libraries" />
      </classpath>
      <jvmarg value="-Djminor.db.type=${junit.db.type}"/>
      <jvmarg value="-Djminor.db.host=${junit.db.host}"/>
      <jvmarg value="-Djminor.db.port=${junit.db.port}"/>
      <jvmarg value="-Djminor.db.sid=${junit.db.sid}"/>
      <jvmarg value="-Djminor.db.embedded=${junit.db.embedded}"/>
      <batchtest todir="${reports}">
        <fileset dir="${srctest}" includes="**/*Test.java" />
        <fileset dir="${srcdemos}" includes="**/*Test.java" />
      </batchtest>
    </junit>
  </target>

  <target name="run_demo_empdept_local" depends="build, create_derby_db, create_h2_db"
          description="Runs the EmpDept demo application with a local db connection">
    <java classname="org.jminor.framework.demos.empdept.client.ui.EmpDeptAppPanel" fork="yes">
      <classpath>
        <pathelement path="${build.base}"/>
        <pathelement path="${build.demos}"/>
        <pathelement location="${lib.jasperreports.base}"/>
        <pathelement location="${lib.jasperreports.logging}"/>
        <pathelement location="${lib.jasperreports.collections}"/>
        <pathelement location="${lib.jcalendar}"/>
        <pathelement location="${lib.derby}"/>
        <pathelement location="${lib.h2}"/>
        <pathelement location="${lib.log4j}"/>
      </classpath>
      <jvmarg value="-Djminor.db.type=${run.db.type}"/>
      <jvmarg value="-Djminor.db.host=${run.db.host}"/>
      <jvmarg value="-Djminor.db.port=${run.db.port}"/>
      <jvmarg value="-Djminor.db.sid=${run.db.sid}"/>
      <jvmarg value="-Djminor.db.embedded=${run.db.embedded}"/>
    </java>
  </target>

  <target name="run_demo_empdept_remote" depends="build"
          description="Runs the EmpDept demo application with a remote db connection">
    <java classname="org.jminor.framework.demos.empdept.client.ui.EmpDeptAppPanel" fork="yes">
      <classpath>
        <pathelement path="${build.base}"/>
        <pathelement path="${build.demos}"/>
        <pathelement location="${lib.jasperreports.base}"/>
        <pathelement location="${lib.jcalendar}"/>
        <pathelement location="${lib.log4j}"/>
      </classpath>
      <jvmarg value="-Djminor.client.connection.type=remote"/>
      <jvmarg value="-Djminor.server.hostname=localhost"/>
      <jvmarg value="-Djavax.net.ssl.trustStore=${basedir}/resources/security/JMinorClientTruststore"/>
      <jvmarg value="-Djava.security.policy=${basedir}/resources/security/jminor_client.policy"/>
    </java>
  </target>

  <target name="run_demo_petstore_local" depends="build, create_derby_db, create_h2_db"
          description="Runs the Petstore demo application with a local db connection">
    <java classname="org.jminor.framework.demos.petstore.client.ui.PetstoreAppPanel" fork="yes">
      <classpath>
        <pathelement path="${build.base}"/>
        <pathelement path="${build.demos}"/>
        <pathelement location="${lib.jasperreports.base}"/>
        <pathelement location="${lib.jcalendar}"/>
        <pathelement location="${lib.derby}"/>
        <pathelement location="${lib.h2}"/>
        <pathelement location="${lib.log4j}"/>
      </classpath>
      <jvmarg value="-Djminor.db.type=${run.db.type}"/>
      <jvmarg value="-Djminor.db.host=${run.db.host}"/>
      <jvmarg value="-Djminor.db.port=${run.db.port}"/>
      <jvmarg value="-Djminor.db.sid=${run.db.sid}"/>
      <jvmarg value="-Djminor.db.embedded=${run.db.embedded}"/>
    </java>
  </target>

  <target name="run_demo_petstore_remote" depends="build"
          description="Runs the Petstore demo application with a remote db connection">
    <java classname="org.jminor.framework.demos.petstore.client.ui.PetstoreAppPanel" fork="yes">
      <classpath>
        <pathelement path="${build.base}"/>
        <pathelement path="${build.demos}"/>
        <pathelement location="${lib.jasperreports.base}"/>
        <pathelement location="${lib.jcalendar}"/>
        <pathelement location="${lib.log4j}"/>
      </classpath>
      <jvmarg value="-Djminor.client.connection.type=remote"/>
      <jvmarg value="-Djminor.server.hostname=localhost"/>
      <jvmarg value="-Djavax.net.ssl.trustStore=${basedir}/resources/security/JMinorClientTruststore"/>
      <jvmarg value="-Djava.security.policy=${basedir}/resources/security/jminor_client.policy"/>
    </java>
  </target>

  <target name="run_rmi_server" depends="build, create_derby_db, create_h2_db"
          description="Runs the RMI server">
    <java classname="org.jminor.framework.server.EntityDbRemoteServer" fork="yes">
      <classpath>
        <pathelement path="${build.base}"/>
        <pathelement location="${lib.derby}"/>
        <pathelement location="${lib.h2}"/>
        <pathelement location="${lib.log4j}"/>
        <pathelement location="${lib.jasperreports.base}"/>
        <pathelement location="${lib.jasperreports.logging}"/>
        <pathelement location="${lib.jasperreports.collections}"/>
      </classpath>
      <jvmarg value="-Djminor.db.type=${run.db.type}"/>
      <jvmarg value="-Djminor.db.host=${run.db.host}"/>
      <jvmarg value="-Djminor.db.port=${run.db.port}"/>
      <jvmarg value="-Djminor.db.sid=${run.db.sid}"/>
      <jvmarg value="-Djminor.db.embedded=${run.db.embedded}"/>
      <jvmarg value="-Djminor.server.pooling.initial=scott"/>
      <jvmarg value="-Djminor.server.logging.status=1"/>
      <jvmarg value="-Djminor.server.port=2222"/>
      <jvmarg value="-Djminor.server.admin.port=4444"/>
      <jvmarg value="-Djminor.server.db.port=3333"/>
      <jvmarg value="-Djavax.net.ssl.keyStore=${basedir}/resources/security/JMinorServerKeystore"/>
      <jvmarg value="-Djava.security.policy=${basedir}/resources/security/jminor_server.policy"/>
      <jvmarg value="-Djavax.net.ssl.keyStorePassword=jminor"/>
      <jvmarg value="-Djava.rmi.server.hostname=localhost"/>
    </java>
  </target>

  <target name="run_rmi_server_monitor" depends="build"
          description="Runs the RMI server monitor">
    <java classname="org.jminor.framework.server.monitor.ui.MonitorPanel" fork="yes">
      <classpath>
        <pathelement path="${build.base}"/>
        <pathelement location="${lib.derby}"/>
        <pathelement location="${lib.log4j}"/>
        <pathelement location="${lib.jfreechart.base}"/>
        <pathelement location="${lib.jfreechart.common}"/>
        <pathelement location="${lib.jcalendar}"/>
      </classpath>
      <jvmarg value="-Djminor.server.hostname=localhost"/>
      <jvmarg value="-Djavax.net.ssl.trustStore=${basedir}/resources/security/JMinorClientTruststore"/>
      <jvmarg value="-Djava.security.policy=${basedir}/resources/security/jminor_server_monitor.policy"/>
    </java>
  </target>

  <target name="run_rmi_registry" depends="build"
          description="Runs the RMI registry with the classpath required for bootstrapping the framework rmi server">
    <java classname="sun.rmi.registry.RegistryImpl" fork="yes">
      <classpath>
        <pathelement path="${build.base}"/>
        <pathelement location="${lib.log4j}"/>
        <pathelement location="${lib.jasperreports.base}"/>
      </classpath>
      <jvmarg value="-Djava.security.policy=${basedir}/resources/security/all_permissions.policy"/>
    </java>
  </target>

  <condition property="derbydb.not.available">
    <not>
      <available file="${db.derby.dir}/${db.derby.name}"/>
    </not>
  </condition>

  <target name="delete_derby_db"
          description="Deletes the derby database">
    <delete dir="${db.derby.dir}"/>
  </target>

  <target name="create_derby_db" if="derbydb.not.available"
          description="Creates the demo derby database in case it is not already available. The demo database includes
          the EmpDept schema as well as the Petstore schema, used by unit tests and demo applications">
    <java fork="true" classname="org.apache.derby.tools.ij" classpathref="libraries">
      <sysproperty key="ij.connection.demo" value="jdbc:derby:${db.derby.dir}/${db.derby.name};create=true" />
      <arg value="${db.sql.dir}/create_derby_db.sql"/>
    </java>
  </target>

  <condition property="h2db.not.available">
    <not>
      <available file="${db.h2.dir}"/>
    </not>
  </condition>

  <target name="delete_h2_db"
          description="Deletes the h2 database">
    <delete dir="${db.h2.dir}"/>
  </target>

  <target name="create_h2_db" if="h2db.not.available"
          description="Creates the demo h2 database in case it is not already available. The demo database includes
          the EmpDept schema as well as the Petstore schema, used by unit tests and demo applications">
    <java fork="true" classname="org.h2.tools.RunScript" classpathref="libraries">
      <arg line="-url jdbc:h2:${db.h2.dir}/${db.h2.name} -script ${basedir}/resources/db/scripts/create_h2_db.sql -showResults"/>
    </java>
  </target>
</project>