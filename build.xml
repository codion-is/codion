<project name="jminor-parent" default="install"
         xmlns:sonar="antlib:org.sonar.ant"
         xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:jacoco="antlib:org.jacoco.ant">

  <property file="user.properties"/>
  <property file="build.properties"/>

  <import file="build-macros.xml"/>

  <path id="lib.ant.util">
    <fileset dir="${ant.lib}"/>
  </path>

  <path id="lib.runtime.server">
    <path location="framework/server/${build.main}"/>
    <fileset dir="framework/server/${lib}/test"/>
    <path location="framework/servlet/${build.main}"/>
    <fileset dir="framework/servlet/${lib}/test"/>
  </path>

  <path id="lib.runtime.server.monitor">
    <path location="server-monitor/${build.main}"/>
    <fileset dir="server-monitor/${lib}/runtime"/>
    <path location="plugins/logback-proxy/${build.main}"/>
    <fileset dir="plugins/logback-proxy/${lib}/test"/>
  </path>

  <path id="build.demos.main">
    <pathelement path="demos/chinook/${build.main}"/>
    <pathelement path="demos/empdept/${build.main}"/>
    <pathelement path="demos/petstore/${build.main}"/>
    <pathelement path="demos/schemabrowser/${build.main}"/>
    <pathelement path="demos/world/${build.main}"/>
  </path>

  <path id="build.plugins.main">
    <path location="plugins/hikari-pool/${build.main}"/>
    <path location="plugins/imagepanel/${build.main}"/>
    <path location="plugins/jasperreports/${build.main}"/>
    <path location="plugins/json/${build.main}"/>
    <path location="plugins/log4j-proxy/${build.main}"/>
    <path location="plugins/logback-proxy/${build.main}"/>
    <path location="plugins/nextreports/${build.main}"/>
    <path location="plugins/tomcat-pool/${build.main}"/>
  </path>

  <path id="lib.plugins">
    <fileset dir="plugins/hikari-pool/lib/test"/>
    <fileset dir="plugins/imagepanel/lib/test"/>
    <fileset dir="plugins/jasperreports/lib/test"/>
    <fileset dir="plugins/json/lib/test"/>
    <fileset dir="plugins/log4j-proxy/lib/test"/>
    <fileset dir="plugins/logback-proxy/lib/test"/>
    <fileset dir="plugins/nextreports/lib/test"/>
    <fileset dir="plugins/tomcat-pool/lib/test"/>
  </path>

  <condition property="demo.db.available">
    <available file="${db.h2.dir}/${db.h2.name}.mv.db"/>
  </condition>

  <condition property="keystore.available">
    <available file="resources/security/JMinorServerKeystore"/>
  </condition>

  <target name="create_demo_db" unless="demo.db.available"
          description="Creates the demo h2 database in case id doesn't already exist, which contains the EmpDept,
          Petstore, Chinook and World schemas, used by unit tests and demo applications">
    <run_h2_script script="demos/chinook/src/main/sql/create_schema.sql"/>
    <run_h2_script script="demos/empdept/src/main/sql/create_schema.sql"/>
    <run_h2_script script="demos/petstore/src/main/sql/create_schema.sql"/>
    <run_h2_script script="demos/world/src/main/sql/create_schema.sql"/>
  </target>

  <target name="create_keystore" unless="keystore.available"
          description="Creates a client/server keystore for running the demos">
    <mkdir dir="resources/security"/>
    <genkey alias="JMinorServer" keyalg="RSA" storepass="${demo.server.keystorePassword}" validity="365"
            keystore="resources/security/JMinorServerKeystore">
      <dname>
        <param name="CN" value="Dummy"/>
        <param name="OU" value="dummy"/>
        <param name="O" value="dummy.org"/>
        <param name="C" value="DU"/>
      </dname>
    </genkey>
    <exec executable="${java.bin}/keytool" failonerror="true">
      <arg value="-exportcert"/>
      <arg line="-keystore resources/security/JMinorServerKeystore"/>
      <arg line="-alias JMinorServer"/>
      <arg line="-storepass ${demo.server.keystorePassword}"/>
      <arg line="-rfc"/>
      <arg line="-file resources/security/JMinorServer.cer"/>
    </exec>
    <exec executable="${java.bin}/keytool" failonerror="true">
      <arg value="-import"/>
      <arg line="-alias JMinorServer"/>
      <arg line="-storepass ${demo.server.keystorePassword}"/>
      <arg line="-file resources/security/JMinorServer.cer"/>
      <arg line="-keystore resources/security/JMinorClientTruststore"/>
      <arg line="-noprompt"/>
    </exec>
    <copy file="resources/security/JMinorClientTruststore"
          tofile="resources/security/JMinorServerMonitorTruststore"/>
    <delete file="resources/security/JMinorServer.cer"/>
  </target>

  <target name="deploy_server" depends="create_keystore, create_demo_db"
          description="Deploys the rmi server to the path defined by the 'deploy.server.path' property">
    <subant target="package" buildpath="common"/>
    <subant target="package" buildpath="framework"/>
    <subant target="package" buildpath="demos"/>
    <subant target="package" buildpath="plugins"/>

    <copy todir="${deploy.server.path}/lib">
      <file file="framework/server/${package}/jminor-framework-server.jar"/>
      <file file="framework/servlet/${package}/jminor-framework-servlet.jar"/>

      <fileset dir="framework/server/${lib}/runtime"/>
      <fileset dir="framework/server/${lib}/test" includes="h2*.jar"/>
      <fileset dir="framework/servlet/${lib}/runtime"/>

      <file file="plugins/jasperreports/${package}/jminor-plugin-jasperreports.jar"/>
      <fileset dir="plugins/jasperreports/lib/runtime" excludes="*jminor*"/>

      <file file="plugins/json/${package}/jminor-plugin-json.jar"/>
      <file file="plugins/logback-proxy/${package}/jminor-plugin-logback-proxy.jar"/>
      <fileset dir="plugins/logback-proxy/lib/runtime" excludes="*jminor*"/>

      <file file="demos/chinook/${package}/chinook-domain.jar"/>
      <file file="demos/empdept/${package}/empdept-domain.jar"/>
      <file file="demos/petstore/${package}/petstore-domain.jar"/>
      <file file="demos/world/${package}/world-domain.jar"/>
    </copy>

    <copy todir="${deploy.server.path}/config">
      <file file="${deploy.server.policy}"/>
      <file file="${deploy.server.allpermissions.policy}"/>
      <file file="${deploy.server.notsoserial.whitelist}"/>
      <file file="${deploy.server.keystore}"/>
      <file file="${deploy.server.monitor.truststore}"/>
    </copy>

    <copy todir="${deploy.server.path}">
      <fileset dir="resources/server/"/>
    </copy>
    <copy todir="${deploy.server.path}/h2db">
      <fileset dir="${db.h2.dir}"/>
    </copy>
    <copy todir="${deploy.server.path}/reports/demos" flatten="true">
      <fileset dir="demos/chinook/build/reports" includes="**/*.jasper"/>
      <fileset dir="demos/empdept/build/reports" includes="**/*.jasper"/>
    </copy>
    <chmod dir="${deploy.server.path}" perm="u+x" type="file" includes="*.sh"/>
  </target>

  <target name="deploy_server_monitor" depends="create_keystore"
          description="Deploys the rmi server monitor to the path defined by the 'deploy.server.monitor.path' property">
    <subant target="package" buildpath="plugins/logback-proxy"/>
    <subant target="package" buildpath="server-monitor"/>

    <copy file="server-monitor/${package}/jminor-framework-server-monitor.jar" todir="${deploy.server.monitor.path}/lib"/>
    <copy todir="${deploy.server.monitor.path}/lib">
      <fileset dir="server-monitor/${lib}/runtime"/>
      <file file="plugins/logback-proxy/${package}/jminor-plugin-logback-proxy.jar"/>
      <fileset dir="plugins/logback-proxy/lib/runtime" excludes="*jminor*"/>
    </copy>
    <copy todir="${deploy.server.monitor.path}">
      <fileset dir="${basedir}/server-monitor/resources"/>
    </copy>
    <copy file="${deploy.server.monitor.policy}" todir="${deploy.server.monitor.path}/config"/>
    <copy file="${deploy.server.monitor.truststore}" todir="${deploy.server.monitor.path}/config"/>
    <chmod dir="${deploy.server.monitor.path}" perm="u+x" type="file" includes="*.sh"/>
  </target>

  <target name="deploy_demos" depends="create_keystore"
          description="Deploys the demo applications to the path defined by the 'deploy.demos.dir' property">
    <subant target="deploy" buildpath="demos"/>
    <delete dir="${deploy.demos.dir}"/>
    <deploy_demo_app demo-name="chinook"/>
    <deploy_demo_app demo-name="empdept"/>
    <deploy_demo_app demo-name="petstore"/>
    <deploy_demo_app demo-name="schemabrowser"/>
    <deploy_demo_app demo-name="world"/>
  </target>

  <target name="clean" description="Clean all modules">
    <subant target="clean" buildpath="common"/>
    <subant target="clean" buildpath="framework"/>
    <subant target="clean" buildpath="swing"/>
    <subant target="clean" buildpath="javafx"/>
    <subant target="clean" buildpath="server-monitor"/>
    <subant target="clean" buildpath="plugins"/>
    <subant target="clean" buildpath="demos"/>
  </target>

  <target name="clean_lib" description="Clears all module libraries">
    <subant target="clean_lib" buildpath="common"/>
    <subant target="clean_lib" buildpath="framework"/>
    <subant target="clean_lib" buildpath="swing"/>
    <subant target="clean_lib" buildpath="javafx"/>
    <subant target="clean_lib" buildpath="server-monitor"/>
    <subant target="clean_lib" buildpath="plugins"/>
    <subant target="clean_lib" buildpath="demos"/>
  </target>

  <target name="build" description="Builds all modules">
    <subant target="build" buildpath="common"/>
    <subant target="build" buildpath="framework"/>
    <subant target="build" buildpath="swing"/>
    <subant target="build" buildpath="javafx"/>
    <subant target="build" buildpath="server-monitor"/>
    <subant target="build" buildpath="plugins"/>
    <subant target="build" buildpath="demos"/>
  </target>

  <target name="javadoc" description="Creates javadoc for all modules">
    <subant target="javadoc" buildpath="common"/>
    <subant target="javadoc" buildpath="framework"/>
    <subant target="javadoc" buildpath="swing"/>
    <subant target="javadoc" buildpath="javafx"/>
    <subant target="javadoc" buildpath="server-monitor"/>
    <subant target="javadoc" buildpath="plugins"/>
  </target>

  <target name="package" description="Packages all modules">
    <subant target="package" buildpath="common"/>
    <subant target="package" buildpath="framework"/>
    <subant target="package" buildpath="swing"/>
    <subant target="package" buildpath="javafx"/>
    <subant target="package" buildpath="server-monitor"/>
    <subant target="package" buildpath="plugins"/>
  </target>

  <target name="jdeps" description="Runs jdeps on all modules">
    <subant target="jdeps" buildpath="common"/>
    <subant target="jdeps" buildpath="framework"/>
    <subant target="jdeps" buildpath="swing"/>
    <subant target="jdeps" buildpath="javafx"/>
    <subant target="jdeps" buildpath="server-monitor"/>
    <subant target="jdeps" buildpath="plugins"/>
  </target>

  <target name="run_unit_tests" depends="install, create_keystore" description="Runs unit tests for all modules">
    <subant target="run_unit_tests" buildpath="common"/>
    <subant target="run_unit_tests" buildpath="framework"/>
    <subant target="run_unit_tests" buildpath="swing"/>
    <subant target="run_unit_tests" buildpath="javafx"/>
    <subant target="run_unit_tests" buildpath="server-monitor"/>
    <subant target="run_unit_tests" buildpath="plugins"/>
    <subant target="run_unit_tests" buildpath="demos"/>
  </target>

  <target name="deploy" depends="run_unit_tests"
          description="Publishes all project artifacts to a remote repository after running unit tests">
    <subant target="deploy" buildpath="common"/>
    <subant target="deploy" buildpath="framework"/>
    <subant target="deploy" buildpath="swing"/>
    <subant target="deploy" buildpath="javafx"/>
    <subant target="deploy" buildpath="server-monitor"/>
    <subant target="deploy" buildpath="plugins"/>
  </target>

  <target name="install" depends="clear_ivy_local_repository" description="Publishes all project artifacts to a local repository">
    <subant target="install" buildpath="common"/>
    <subant target="install" buildpath="framework"/>
    <subant target="install" buildpath="swing"/>
    <subant target="install" buildpath="javafx"/>
    <subant target="install" buildpath="server-monitor"/>
    <subant target="install" buildpath="plugins"/>
  </target>

  <target name="clear_ivy_cache" description="Clears JMinor from the ivy cache">
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="lib.ant.util"/>
    <ivy:configure/>
    <delete includeemptydirs="true">
      <fileset dir="${ivy.cache.dir}" includes="org.jminor/**/*" erroronmissingdir="false"/>
    </delete>
  </target>

  <target name="clear_ivy_local_repository" description="Clears JMinor from the local ivy repository">
    <delete includeemptydirs="true">
      <fileset dir="${ivy.local.repository.root}/org/" includes="jminor/**/*" erroronmissingdir="false"/>
    </delete>
  </target>

  <target name="run_server" depends="create_keystore, create_demo_db" description="Runs the RMI server">
    <subant target="build" buildpath="framework/server"/>
    <subant target="build" buildpath="plugins"/>
    <subant target="build" buildpath="demos"/>
    <java classname="org.jminor.framework.server.DefaultEntityConnectionServer" fork="yes" dir="demos">
      <classpath>
        <path refid="lib.runtime.server"/>
        <path refid="build.plugins.main"/>
        <path refid="build.demos.main"/>
        <path refid="lib.plugins"/>
      </classpath>
      <jvmarg value="-Djminor.db.type=h2"/>
      <jvmarg value="-Djminor.db.host=${basedir}/.h2db/h2"/>
      <jvmarg value="-Djminor.db.embedded=true"/>
      <jvmarg value="-Djminor.server.pooling.initial=scott:tiger"/>
      <jvmarg value="-Djminor.server.clientLoggingEnabled=true"/>
      <jvmarg value="-Djminor.server.port=2222"/>
      <jvmarg value="-Djminor.server.admin.port=2223"/>
      <jvmarg value="-Djminor.server.admin.user=scott:tiger"/>
      <jvmarg value="-Djminor.server.auxiliaryServerClassNames=org.jminor.framework.servlet.EntityServletServer"/>
      <jvmarg value="-Djminor.server.domain.classes=org.jminor.framework.demos.empdept.domain.EmpDept, org.jminor.framework.demos.petstore.domain.Petstore, org.jminor.framework.demos.chinook.domain.Chinook, org.jminor.framework.demos.schemabrowser.domain.SchemaBrowser, org.jminor.framework.demos.world.domain.World"/>
      <jvmarg value="-Djavax.net.ssl.keyStore=${deploy.server.keystore}"/>
      <jvmarg value="-Djava.security.policy=${deploy.server.policy}"/>
      <jvmarg value="-Djavax.net.ssl.keyStorePassword=${demo.server.keystorePassword}"/>
      <jvmarg value="-Djava.rmi.server.hostname=localhost"/>
    </java>
  </target>

  <target name="run_server_monitor" description="Runs the RMI server monitor">
    <subant target="build" buildpath="server-monitor"/>
    <subant target="build" buildpath="plugins/logback-proxy"/>
    <java classname="org.jminor.swing.framework.server.monitor.ui.EntityServerMonitorPanel" fork="yes">
      <classpath>
        <path refid="lib.runtime.server.monitor"/>
      </classpath>
      <jvmarg value="-Djminor.server.hostname=localhost"/>
      <jvmarg value="-Djminor.server.admin.user=scott:tiger"/>
      <jvmarg value="-Djavax.net.ssl.trustStore=resources/security/JMinorServerMonitorTruststore"/>
      <jvmarg value="-Djava.security.policy=resources/security/jminor_server_monitor.policy"/>
    </java>
  </target>

  <target name="sonar" depends="merge_coverage_results" description="Runs a Sonar analysis on the project">
    <taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml" classpathref="lib.ant.util"/>
    <sonar:sonar/>
  </target>

  <target name="merge_coverage_results" depends="run_unit_tests"
          description="Merges the Jacoco coverage results so that one modules tests count as coverage for another module">
    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml" classpathref="lib.ant.util"/>

    <!--swing-framework-ui -> swing-framework-model-->
    <jacoco:merge destfile="swing/framework-model/test/report/jacoco.exec">
      <fileset dir="swing/framework-ui/test/report" includes="jacoco.exec"/>
      <fileset dir="swing/framework-model/test/report" includes="jacoco.exec"/>
    </jacoco:merge>
    <!--swing-framwork-model -> swing-common-ui-->
    <jacoco:merge destfile="swing/common-ui/test/report/jacoco.exec">
      <fileset dir="swing/framework-model/test/report" includes="jacoco.exec"/>
      <fileset dir="swing/common-ui/test/report" includes="jacoco.exec"/>
    </jacoco:merge>
    <!--swing-common-ui -> swing-common-model-->
    <jacoco:merge destfile="swing/common-model/test/report/jacoco.exec">
      <fileset dir="swing/common-ui/test/report" includes="jacoco.exec"/>
      <fileset dir="swing/common-model/test/report" includes="jacoco.exec"/>
    </jacoco:merge>

    <!--swing-common-model -> framework-db-remote-->
    <jacoco:merge destfile="framework/db-remote/test/report/jacoco.exec">
      <fileset dir="swing/common-model/test/report" includes="jacoco.exec"/>
      <fileset dir="framework/db-remote/test/report" includes="jacoco.exec"/>
    </jacoco:merge>
    <!--javafx -> framework-db-remote-->
    <jacoco:merge destfile="framework/db-remote/test/report/jacoco.exec">
      <fileset dir="javafx/test/report" includes="jacoco.exec"/>
      <fileset dir="framework/db-remote/test/report" includes="jacoco.exec"/>
    </jacoco:merge>

    <!--framework-db-server -> framework-db-remote-->
    <jacoco:merge destfile="framework/db-remote/test/report/jacoco.exec">
      <fileset dir="framework/server/test/report" includes="jacoco.exec"/>
      <fileset dir="framework/db-remote/test/report" includes="jacoco.exec"/>
    </jacoco:merge>
    <!--framework-db-remote -> framework-model-->
    <jacoco:merge destfile="framework/model/test/report/jacoco.exec">
      <fileset dir="framework/db-remote/test/report" includes="jacoco.exec"/>
      <fileset dir="framework/model/test/report" includes="jacoco.exec"/>
    </jacoco:merge>
    <!--framework-model -> framework-db-local-->
    <jacoco:merge destfile="framework/db-local/test/report/jacoco.exec">
      <fileset dir="framework/model/test/report" includes="jacoco.exec"/>
      <fileset dir="framework/db-local/test/report" includes="jacoco.exec"/>
    </jacoco:merge>
    <!--framework-db-local -> framework-db-core-->
    <jacoco:merge destfile="framework/db-core/test/report/jacoco.exec">
      <fileset dir="framework/db-local/test/report" includes="jacoco.exec"/>
      <fileset dir="framework/db-core/test/report" includes="jacoco.exec"/>
    </jacoco:merge>

    <!--framework-db-core -> common-server-->
    <jacoco:merge destfile="common/server/test/report/jacoco.exec">
      <fileset dir="framework/db-core/test/report" includes="jacoco.exec"/>
      <fileset dir="common/server/test/report" includes="jacoco.exec"/>
    </jacoco:merge>

    <!--common-server -> common model-->
    <jacoco:merge destfile="common/model/test/report/jacoco.exec">
      <fileset dir="common/server/test/report" includes="jacoco.exec"/>
      <fileset dir="common/model/test/report" includes="jacoco.exec"/>
    </jacoco:merge>
    <!--common-model -> common-db-->
    <jacoco:merge destfile="common/db/test/report/jacoco.exec">
      <fileset dir="common/model/test/report" includes="jacoco.exec"/>
      <fileset dir="common/db/test/report" includes="jacoco.exec"/>
    </jacoco:merge>
    <!--common-db -> common-core-->
    <jacoco:merge destfile="common/core/test/report/jacoco.exec">
      <fileset dir="common/db/test/report" includes="jacoco.exec"/>
      <fileset dir="common/core/test/report" includes="jacoco.exec"/>
    </jacoco:merge>
  </target>
</project>