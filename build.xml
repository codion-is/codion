<?xml version="1.0" encoding="UTF-8"?>
<project name="jminor" default="dist" basedir="." xmlns:jacoco="antlib:org.jacoco.ant" xmlns:ivy="antlib:org.apache.ivy.ant">

  <description>JMinor is a minimalistic Java rich client/server CRUD application framework, based solely on Java Standard Edition components, JDBC, RMI and Swing.</description>

  <property file="build.properties"/>
  <property file="user.properties"/>

  <path id="lib.build">
    <fileset dir="${lib}/build"/>
  </path>

  <path id="lib.test">
    <fileset dir="${lib}/test"/>
  </path>

  <path id="lib.runtime.client">
    <fileset dir="${lib}/runtime.client"/>
  </path>

  <path id="lib.runtime.server">
    <fileset dir="${lib}/runtime.server"/>
  </path>

  <path id="lib.runtime.server-monitor">
    <fileset dir="${lib}/runtime.server-monitor"/>
  </path>

  <path id="classes.base">
    <pathelement path="${build.base}"/>
    <pathelement path="${build.plugins}"/>
    <pathelement path="${build.demos}"/>
  </path>

  <path id="classes.test">
    <pathelement path="${build.test}"/>
  </path>

  <path id="classes.demos">
    <pathelement path="${build.demos}"/>
  </path>

  <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
    <classpath path="${jacocoant.jar}" />
  </taskdef>

  <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant">
    <classpath path="${ivy.jar}" />
  </taskdef>

  <fileset id="common_resources" dir="${src}" includes=
          "org/jminor/common/**/*.gif, org/jminor/common/**/*.png, org/jminor/common/**/*.properties, org/jminor/common/**/*.txt"/>
  <fileset id="framework_resources" dir="${src}" includes=
          "org/jminor/framework/**/*.gif, org/jminor/framework/**/*.png, org/jminor/framework/**/*.properties, org/jminor/framework/**/*.txt"/>
  <fileset id="test_resources" dir="${srctest}" includes=
          "org/jminor/**/*.gif, org/jminor/**/*.properties, org/jminor/**/*.txt"/>
  <fileset id="demos_resources" dir="${srcdemos}" includes=
          "org/jminor/framework/**/*.gif, org/jminor/framework/**/*.png, org/jminor/framework/**/*.properties, org/jminor/framework/**/*.txt"/>
  <fileset id="plugins_resources" dir="${srcplugins}" includes=
          "org/jminor/framework/**/*.gif, org/jminor/framework/**/*.png, org/jminor/framework/**/*.properties, org/jminor/framework/**/*.txt"/>

  <target name="resolve_libraries"
          description="Resolves all libraries according to ivy.xml">
    <ivy:retrieve pattern="${lib}/[conf]/[artifact]-[revision].[ext]"/>
    <copy file="lib/webserver.jar" todir="${lib}/build"/>
    <copy file="lib/webserver.jar" todir="${lib}/runtime.server"/>
    <copy file="lib/webserver.jar" todir="${lib}/test"/>
  </target>

  <target name="clean"
          description="Clean all output and generated dirs">
    <delete dir="${build.base}" includeEmptyDirs="true"/>
    <delete dir="${build.demos}" includeEmptyDirs="true"/>
    <delete dir="${build.plugins}" includeEmptyDirs="true"/>
    <delete dir="${build.test}" includeEmptyDirs="true"/>
    <delete dir="${build.root}" includeEmptyDirs="true"/>
    <delete dir="${test}" includeEmptyDirs="true"/>
  </target>

  <target name="build" depends="resolve_libraries"
          description="Compiles all source files">
    <mkdir dir="${build.base}"/>
    <mkdir dir="${build.plugins}"/>
    <mkdir dir="${build.demos}"/>
    <mkdir dir="${build.test}"/>

    <javac destdir="${build.base}" debug="${build.debuginfo}" includeantruntime="false">
      <src path="${src}"/>
      <classpath refid="lib.build"/>
    </javac>

    <rmic base="${build.base}" stubversion="1.2"
          includes="org/jminor/common/server/AbstractRemoteServer.class,
                                         org/jminor/framework/server/RemoteEntityConnectionImpl.class,
                                         org/jminor/framework/server/EntityConnectionServerAdminImpl.class">
      <classpath refid="lib.build"/>
    </rmic>

    <copy todir="${build.base}">
      <fileset refid="common_resources"/>
      <fileset refid="framework_resources"/>
    </copy>

    <javac destdir="${build.plugins}" debug="${build.debuginfo}" includeantruntime="false">
      <src path="${srcplugins}"/>
      <classpath>
        <path refid="lib.build"/>
        <path location="${build.base}"/>
      </classpath>
    </javac>

    <copy todir="${build.plugins}">
      <fileset refid="plugins_resources"/>
    </copy>

    <javac destdir="${build.demos}" debug="${build.debuginfo}" includeantruntime="false">
      <src path="${srcdemos}"/>
      <classpath>
        <path refid="lib.build"/>
        <path location="${build.base}"/>
        <path location="${build.plugins}"/>
      </classpath>
    </javac>

    <copy todir="${build.demos}">
      <fileset refid="demos_resources"/>
    </copy>

    <javac destdir="${build.test}" debug="${build.debuginfo}" includeantruntime="false">
      <src path="${srctest}"/>
      <classpath>
        <path refid="lib.build"/>
        <path location="${build.base}"/>
        <path location="${build.plugins}"/>
        <path location="${build.demos}"/>
      </classpath>
    </javac>

    <copy todir="${build.test}">
      <fileset refid="test_resources"/>
    </copy>

    <tstamp>
      <format property="DSTAMP" pattern="yyyy.MM.dd HH:mm"/>
    </tstamp>
    <concat destfile="${build.base}/org/jminor/common/model/version.txt">v${version} build ${DSTAMP}</concat>
  </target>

  <target name="compile_demo_reports" depends="resolve_libraries"
          description="Compile the demo jasper reports">
    <taskdef name="jrc" classname="net.sf.jasperreports.ant.JRAntCompileTask">
      <classpath refid="lib.build"/>
    </taskdef>
    <jrc srcdir="${resources.demos}" includes="**/*.jrxml"/>
  </target>

  <target name="dist" depends="clean, build, manifest"
          description="Builds all distribution jar files in the dist directory">
    <mkdir dir="${dist}"/>
    <jar jarfile="${dist}/jminor.jar" basedir="${build.base}"
         manifest="${build.base}/META-INF/MANIFEST.MF"
         excludes="org/jminor/framework/demos/**,logback.xml"/>

    <jar jarfile="${dist}/jminor-common.jar" basedir="${build.base}"
         manifest="${build.base}/META-INF/MANIFEST.MF"
         includes="org/jminor/common/**"/>

    <jar jarfile="${dist}/jminor-db.jar" basedir="${build.base}"
         manifest="${build.base}/META-INF/MANIFEST.MF"
         includes="org/jminor/framework/Configuration*,
                org/jminor/framework/db/**,
                org/jminor/framework/domain/*,
                org/jminor/framework/i18n/**"/>

    <jar jarfile="${dist}/jminor-client.jar" basedir="${build.base}"
         manifest="${build.base}/META-INF/MANIFEST.MF"
         includes="org/jminor/framework/Configuration*,
                org/jminor/framework/client/**,
                org/jminor/framework/db/**,
                org/jminor/framework/i18n/**,
                org/jminor/framework/domain/**,
                org/jminor/framework/tools/testing/**,
                org/jminor/framework/server/provider/RemoteEntityConnectionProvider*,
                org/jminor/framework/server/RemoteEntityConnection.class,
                org/jminor/framework/server/RemoteEntityConnectionImpl_Stub.class"/>

    <jar jarfile="${dist}/jminor-server.jar" basedir="${build.base}"
         manifest="${build.base}/META-INF/MANIFEST.MF"
         includes="org/jminor/framework/Configuration*,
                org/jminor/framework/db/**,
                org/jminor/framework/domain/*,
                org/jminor/framework/i18n/**,
                org/jminor/framework/server/*.class"
         excludes="org/jminor/framework/server/*Stub.class"/>

    <jar jarfile="${dist}/jminor-server-monitor.jar" basedir="${build.base}"
         manifest="${build.base}/META-INF/MANIFEST.MF"
         includes="org/jminor/framework/Configuration*,
                org/jminor/framework/domain/**,
                org/jminor/framework/server/monitor/**,
                org/jminor/framework/server/EntityConnectionServerAdmin.class,
                org/jminor/framework/server/EntityConnectionServerAdmin_Stub.class"/>

    <jar jarfile="${dist}/jminor-plugins.jar" basedir="${build.plugins}"
         manifest="${build.base}/META-INF/MANIFEST.MF"/>

    <jar jarfile="${dist}/jminor-demos.jar" basedir="${build.demos}"
         manifest="${build.base}/META-INF/MANIFEST.MF"/>

    <jar jarfile="${dist}/jminor-src.jar" basedir="${src}"
         manifest="${build.base}/META-INF/MANIFEST.MF"/>
    <jar jarfile="${dist}/jminor-src-test.jar" basedir="${srctest}"
         manifest="${build.base}/META-INF/MANIFEST.MF"/>
    <jar jarfile="${dist}/jminor-src-demos.jar" basedir="${srcdemos}"
         manifest="${build.base}/META-INF/MANIFEST.MF"/>
    <jar jarfile="${dist}/jminor-api-doc.jar" basedir="${docsapi}"
         manifest="${build.base}/META-INF/MANIFEST.MF"/>

    <copy file="${basedir}/changelog.txt" todir="${dist}"/>
  </target>

  <target name="manifest"
          description="Generates a MANIFEST.MF file for inclusion in jars">
    <mkdir dir="${build.base}/META-INF"/>
    <manifest file="${build.base}/META-INF/MANIFEST.MF">
      <attribute name="Implementation-Title" value="JMinor Application Framework"/>
      <attribute name="Implementation-Version" value="${version}"/>
      <attribute name="Implementation-URL" value="http://jminor.org"/>
      <attribute name="Build-Jdk" value="${java.specification.version}"/>
    </manifest>
  </target>

  <target name="javadoc" depends="build"
          description="Generates framework javadocs">
    <delete dir="${docsapi}" includeEmptyDirs="true"/>
    <delete dir="${pluginsapi}" includeEmptyDirs="true"/>
    <mkdir dir="${docsapi}"/>
    <mkdir dir="${pluginsapi}"/>
    <javadoc destdir="${docsapi}" sourcepath="${src}" packagenames="org.jminor.*" Encoding="UTF-8"
             docencoding="UTF-8" author="true" version="true" use="true"
             windowtitle="JMinor v${version} API" doctitle="JMinor v${version} API"
             group="Common org.jminor.common*,
                    Client org.jminor.framework.client*,
                    Db org.jminor.framework.db*,
                    Domain org.jminor.framework.domain*,
                    Server org.jminor.framework.server*">
      <classpath refid="lib.build"/>
      <link href="http://download.oracle.com/javase/6/docs/api/"/>
    </javadoc>
    <javadoc destdir="${pluginsapi}" sourcepath="${srcplugins}" packagenames="org.jminor.*" Encoding="UTF-8"
             docencoding="UTF-8" author="true" version="true" use="true"
             windowtitle="JMinor v${version} Plugin API" doctitle="JMinor v${version} Plugin API"
             group="Plugins org.jminor.framework.plugins">
      <classpath>
        <path refid="lib.build"/>
        <path location="${build.base}"/>
      </classpath>
      <link href="http://download.oracle.com/javase/6/docs/api/"/>
      <link offline="true" href="http://jminor.org/data/media/project/docs/api/" packagelistloc="${docsapi}"/>
    </javadoc>
  </target>

  <target name="deploy_server" depends="recreate_h2_db"
          description="Deploys the rmi server to the path defined by the 'deploy.server.path' property">
    <copy file="${dist}/jminor-server.jar" todir="${deploy.server.path}/lib"/>
    <copy file="${dist}/jminor-common.jar" todir="${deploy.server.path}/lib"/>
    <copy file="${dist}/jminor-plugins.jar" todir="${deploy.server.path}/lib"/>
    <copy file="${dist}/jminor-demos.jar" todir="${deploy.server.path}/lib"/>
    <copy todir="${deploy.server.path}/lib">
      <fileset dir="${lib}/runtime.server"/>
    </copy>
    <copy todir="${deploy.server.path}">
      <fileset dir="${basedir}/resources/server/"/>
    </copy>
    <copy file="${deploy.server.policy}" todir="${deploy.server.config.path}"/>
    <copy file="${deploy.server.allpermissions.policy}" todir="${deploy.server.config.path}"/>
    <copy file="${deploy.server.keystore}" todir="${deploy.server.config.path}"/>
    <copy file="${deploy.server.monitor.truststore}" todir="${deploy.server.config.path}"/>
    <chmod dir="${deploy.server.path}" perm="u+x" type="file" includes="*.sh"/>
    <copy todir="${deploy.server.path}/h2db">
      <fileset dir="${db.h2.dir}"/>
    </copy>
    <copy todir="${deploy.server.path}/reports/demos" flatten="true">
      <fileset dir="${basedir}/resources/demos/" includes="**/*.jasper"/>
    </copy>
  </target>

  <target name="deploy_server_monitor"
          description="Deploys the rmi server monitor to the path defined by the 'deploy.server.monitor.path' property">
    <mkdir dir="${deploy.server.monitor.path}"/>
    <copy file="${dist}/jminor-server-monitor.jar" todir="${deploy.server.monitor.path}/lib"/>
    <copy file="${dist}/jminor-common.jar" todir="${deploy.server.monitor.path}/lib"/>
    <copy todir="${deploy.server.monitor.path}/lib">
      <fileset dir="${lib}/runtime.server-monitor"/>
    </copy>
    <copy todir="${deploy.server.monitor.path}">
      <fileset dir="${basedir}/resources/server_monitor/"/>
    </copy>
    <copy file="${deploy.server.monitor.policy}" todir="${deploy.server.monitor.config.path}"/>
    <copy file="${deploy.server.monitor.truststore}" todir="${deploy.server.monitor.config.path}"/>
    <zip file="${deploy.server.monitor.path}/lib/jminor-server-monitor.jar" update="true">
      <fileset file="${build.base}/logback.xml"/>
      <fileset file="${deploy.server.monitor.truststore}"/>
    </zip>
    <chmod dir="${deploy.server.monitor.path}" perm="u+x" type="file" includes="*.sh"/>
    <antcall target="sign_server_monitor_jars"/>
  </target>

  <target name="sign_server_monitor_jars" depends="dist"
          description="Signs the jars found in the 'deploy.server.monitor.path'">
    <signjar alias="${jar.sign.alias}" storepass="${jar.sign.storepass}" keystore="${jar.sign.keystore}">
      <fileset dir="${deploy.server.monitor.path}/lib" />
    </signjar>
  </target>

  <target name="deploy_generator"
          description="Deploys the entity generator to the path defined by the 'deploy.generator.path' property">
    <mkdir dir="${deploy.generator.path}"/>
    <copy file="${dist}/jminor.jar" todir="${deploy.generator.path}/lib"/>
    <copy file="${dist}/jminor-common.jar" todir="${deploy.generator.path}/lib"/>
    <copy todir="${deploy.generator.path}/lib">
      <fileset dir="${lib}/runtime.client"/>
    </copy>
    <copy todir="${deploy.generator.path}">
      <fileset dir="${basedir}/resources/entity_generator/"/>
    </copy>
    <copy todir="${deploy.generator.path}/h2db">
      <fileset dir="${db.h2.dir}"/>
    </copy>
    <copy file="${deploy.generator.policy}" todir="${deploy.generator.config.path}"/>
    <chmod dir="${deploy.generator.path}" perm="u+x" type="file" includes="*.sh"/>
    <antcall target="sign_generator_jars"/>
  </target>

  <target name="sign_generator_jars" depends="dist"
          description="Signs the jars found in the 'deploy.generator.path'">
    <signjar alias="${jar.sign.alias}" storepass="${jar.sign.storepass}" keystore="${jar.sign.keystore}">
      <fileset dir="${deploy.generator.path}/lib" />
    </signjar>
  </target>

  <target name="deploy_demos" depends="recreate_h2_db, compile_demo_reports"
          description="Deploys the demo applications to the path defined by the 'deploy.demos.dir' property">
    <mkdir dir="${deploy.demos.dir}"/>
    <copy file="${dist}/jminor-client.jar" todir="${deploy.demos.lib}"/>
    <copy file="${dist}/jminor-plugins.jar" todir="${deploy.demos.lib}"/>
    <copy file="${dist}/jminor-demos.jar" todir="${deploy.demos.lib}"/>
    <copy file="${dist}/jminor-common.jar" todir="${deploy.demos.lib}"/>
    <copy todir="${deploy.demos.lib}">
      <fileset dir="${lib}/runtime.client"/>
    </copy>
    <copy todir="${deploy.demos.config.dir}">
      <fileset dir="${deploy.demos.config}"/>
    </copy>
    <copy file="${deploy.demos.policy}" todir="${deploy.demos.config.dir}"/>
    <copy file="${deploy.loadtest.policy}" todir="${deploy.demos.config.dir}"/>
    <copy file="${deploy.loadtest.server.policy}" todir="${deploy.demos.config.dir}"/>
    <copy file="${deploy.demos.truststore}" todir="${deploy.demos.config.dir}"/>
    <zip file="${deploy.demos.lib}/jminor-demos.jar" update="true">
      <fileset file="${build.base}/logback.xml"/>
      <fileset file="${deploy.demos.truststore}"/>
    </zip>
    <copy todir="${deploy.demos.dir}">
      <fileset dir="${basedir}/resources/demos/empdept/" excludes="**/*.jrxml,**/*.bak"/>
      <fileset dir="${basedir}/resources/demos/petstore/" excludes="**/*.jrxml,**/*.bak"/>
      <fileset dir="${basedir}/resources/demos/chinook/" excludes="**/*.jrxml,**/*.bak"/>
      <fileset dir="${basedir}/resources/demos/schemabrowser/"/>
    </copy>
    <concat destfile="${deploy.demos.dir}/scripts/create_h2_db.sql" >
      <fileset file="${basedir}/resources/demos/chinook/scripts/ddl.sql" />
      <fileset file="${basedir}/resources/demos/chinook/scripts/dml.sql" />
    </concat>
    <chmod dir="${deploy.demos.dir}" perm="u+x" type="file" includes="*.sh"/>
    <copy todir="${deploy.demos.dir}/h2db">
      <fileset dir="${db.h2.dir}"/>
    </copy>
    <antcall target="sign_demo_jars"/>
  </target>

  <target name="sign_demo_jars" depends="dist"
          description="Signs the jars found in the 'deploy.demos.path'">
    <signjar alias="${jar.sign.alias}" storepass="${jar.sign.storepass}" keystore="${jar.sign.keystore}">
      <fileset dir="${deploy.demos.lib}" />
    </signjar>
  </target>

  <target name="deploy_all" depends="clean, dist, deploy_server, deploy_server_monitor, deploy_demos, deploy_generator"
          description="A convenience target for deploying the server, server monitor and demo applications">
    <delete file="${dist}/deployment/jminor-${version}.zip"/>
    <zip destfile="${dist}/deployment/jminor-${version}.zip">
      <fileset dir="${dist}" excludes="deployment/**"/>
    </zip>
  </target>

  <target name="deploy_project"
          description="Creates a jminor-project.zip file in the base directory">
    <delete file="${basedir}/jminor-${version}-project.zip"/>
    <delete file="${basedir}/derby.log"/>
    <zip destfile="${basedir}/jminor-${version}-project.zip">
      <fileset dir="${basedir}"
               excludes="*.log,target/**,test/**,dist/deployment/**,classes/**,derbydb/**,h2db/**"/>
    </zip>
  </target>

  <target name="run_unit_tests_with_coverage_and_report" depends="clean, build, compile_demo_reports"
          description="Runs the framework unit tests with JaCoCo coverage">
    <delete dir="${test.reports}" includeEmptyDirs="true"/>
    <delete dir="${test.reports.html}" includeEmptyDirs="true"/>
    <delete dir="${test.coveragereport.xml}" includeEmptyDirs="true"/>
    <delete dir="${test.coveragereport.html}" includeEmptyDirs="true"/>
    <mkdir dir="${test.reports}"/>
    <jacoco:coverage destfile="${test.reports}/jacoco.exec">
      <junit printsummary="yes" haltonfailure="true" haltonerror="true" fork="yes" forkmode="once">
        <formatter type="xml" usefile="true"/>
        <classpath>
          <path refid="classes.base"/>
          <path refid="classes.test"/>
          <path refid="lib.test"/>
        </classpath>
        <jvmarg value="-Djminor.db.type=${junit.db.type}"/>
        <jvmarg value="-Djminor.db.host=${junit.db.host}"/>
        <jvmarg value="-Djminor.db.port=${junit.db.port}"/>
        <jvmarg value="-Djminor.db.sid=${junit.db.sid}"/>
        <jvmarg value="-Djminor.db.embedded=${junit.db.embedded}"/>
        <jvmarg value="-Djminor.db.embeddedInMemory=${junit.db.embeddedInMemory}"/>
        <jvmarg value="-Djminor.db.initScript=${junit.db.initScript}"/>
        <batchtest todir="${test.reports}">
          <fileset dir="${srctest}" includes="**/*Test.java"/>
          <fileset dir="${srcdemos}" includes="**/*Test.java" excludes="**/*LoadTest.java"/>
        </batchtest>
      </junit>
    </jacoco:coverage>
    <antcall target="create_unit_test_report"/>
    <antcall target="create_coverage_report"/>
  </target>

  <target name="create_unit_test_report"
          description="Creates a unit test html report on previously run tests">
    <mkdir dir="${test.reports.html}"/>
    <junitreport todir="${test.reports}">
      <fileset dir="${test.reports}" includes="TEST-*.xml"/>
      <report format="frames" todir="${test.reports.html}"/>
    </junitreport>
  </target>

  <target name="create_coverage_report"
          description="Creates a unit test coverage report on previously run tests">
    <delete dir="${test.coveragereport.html}" includeEmptyDirs="true"/>
    <delete dir="${test.coveragereport.xml}" includeEmptyDirs="true"/>
    <mkdir dir="${test.coveragereport.html}"/>
    <mkdir dir="${test.coveragereport.xml}"/>
    <jacoco:report>
      <executiondata>
        <file file="${test.reports}/jacoco.exec" />
      </executiondata>

      <structure name="JMinor JaCoCo Results">
        <classfiles>
          <fileset dir="${build.base}"  excludes="org/jminor/framework/demos/**"/>
        </classfiles>
        <sourcefiles encoding="UTF-8">
          <fileset dir="${src}"  excludes="org/jminor/framework/demos/**"/>
        </sourcefiles>
      </structure>

      <html destdir="${test.coveragereport.html}" />
      <xml destfile="${test.coveragereport.xml}/report.xml" />
    </jacoco:report>
  </target>

  <target name="run_demo_chinook_local" depends="build"
          description="Runs the Chinook demo application with a local db connection">
    <java classname="org.jminor.framework.demos.chinook.client.ui.ChinookAppPanel" fork="yes">
      <classpath>
        <path refid="classes.base"/>
        <path refid="lib.runtime.client"/>
      </classpath>
      <jvmarg value="-Djminor.db.type=${demo.db.type}"/>
      <jvmarg value="-Djminor.db.host=${demo.db.host}"/>
      <jvmarg value="-Djminor.db.port=${demo.db.port}"/>
      <jvmarg value="-Djminor.db.sid=${demo.db.sid}"/>
      <jvmarg value="-Djminor.db.embedded=${demo.db.embedded}"/>
      <jvmarg value="-Djminor.db.embeddedInMemory=${demo.db.embeddedInMemory}"/>
      <jvmarg value="-Djminor.db.initScript=${demo.db.initScript}"/>
      <jvmarg value="-Djminor.report.path=resources/demos/chinook/reports/"/>
    </java>
  </target>

  <target name="run_demo_chinook_remote" depends="build"
          description="Runs the Chinook demo application with a remote db connection">
    <java classname="org.jminor.framework.demos.chinook.client.ui.ChinookAppPanel" fork="yes">
      <classpath>
        <path refid="classes.base"/>
        <path refid="lib.runtime.client"/>
      </classpath>
      <jvmarg value="-Djminor.client.connectionType=remote"/>
      <jvmarg value="-Djminor.server.hostname=localhost"/>
      <jvmarg value="-Djminor.report.path=resources/demos/chinook/reports/"/>
      <jvmarg value="-Djavax.net.ssl.trustStore=${resources.security}/JMinorClientTruststore"/>
      <jvmarg value="-Djava.security.policy=${resources.security}/jminor_client.policy"/>
    </java>
  </target>

  <target name="run_demo_chinook_load_test" depends="build"
          description="Runs the EmpDept load testing application with a remote db connection">
    <java classname="org.jminor.framework.demos.empdept.testing.EmpDeptLoadTest" fork="yes">
      <classpath>
        <path refid="classes.base"/>
        <path refid="lib.runtime.client"/>
      </classpath>
      <jvmarg value="-Djminor.client.connectionType=remote"/>
      <jvmarg value="-Djminor.server.hostname=localhost"/>
      <jvmarg value="-Djminor.report.path=resources/demos/chinook/reports/"/>
      <jvmarg value="-Djavax.net.ssl.trustStore=${resources.security}/JMinorClientTruststore"/>
      <jvmarg value="-Djava.security.policy=${resources.security}/jminor_load_test.policy"/>
    </java>
  </target>

  <target name="run_rmi_server" depends="build"
          description="Runs the RMI server">
    <java classname="org.jminor.framework.server.EntityConnectionServerAdminImpl" fork="yes">
      <classpath>
        <path refid="classes.base"/>
        <path refid="classes.demos"/>
        <path refid="lib.runtime.server"/>
      </classpath>
      <jvmarg value="-Djminor.db.type=${demo.db.type}"/>
      <jvmarg value="-Djminor.db.host=${demo.db.host}"/>
      <jvmarg value="-Djminor.db.port=${demo.db.port}"/>
      <jvmarg value="-Djminor.db.sid=${demo.db.sid}"/>
      <jvmarg value="-Djminor.db.embedded=${demo.db.embedded}"/>
      <jvmarg value="-Djminor.db.embeddedInMemory=${demo.db.embeddedInMemory}"/>
      <jvmarg value="-Djminor.db.initScript=${demo.db.initScript}"/>
      <jvmarg value="-Djminor.server.pooling.initial=scott:tiger"/>
      <jvmarg value="-Djminor.server.clientLoggingEnabled=true"/>
      <jvmarg value="-Djminor.server.port=2222"/>
      <jvmarg value="-Djminor.server.admin.port=4444"/>
      <jvmarg value="-Djminor.server.domain.classes=org.jminor.framework.demos.empdept.domain.EmpDept, org.jminor.framework.demos.petstore.domain.Petstore, org.jminor.framework.demos.chinook.domain.Chinook, org.jminor.framework.demos.schemabrowser.domain.SchemaBrowser"/>
      <jvmarg value="-Djavax.net.ssl.keyStore=${resources.security}/JMinorServerKeystore"/>
      <jvmarg value="-Djava.security.policy=${resources.security}/jminor_server.policy"/>
      <jvmarg value="-Djavax.net.ssl.keyStorePassword=jminor"/>
      <jvmarg value="-Djava.rmi.server.hostname=localhost"/>
    </java>
  </target>

  <target name="run_rmi_server_monitor" depends="build"
          description="Runs the RMI server monitor">
    <java classname="org.jminor.framework.server.monitor.ui.EntityServerMonitorPanel" fork="yes">
      <classpath>
        <path refid="classes.base"/>
        <path refid="lib.runtime.server-monitor"/>
      </classpath>
      <jvmarg value="-Djminor.server.hostname=localhost"/>
      <jvmarg value="-Djavax.net.ssl.trustStore=${resources.security}/JMinorServerMonitorTruststore"/>
      <jvmarg value="-Djava.security.policy=${resources.security}/jminor_server_monitor.policy"/>
    </java>
  </target>

  <target name="run_rmi_registry" depends="build"
          description="Runs the RMI registry with the classpath required for bootstrapping the framework RMI server">
    <java classname="sun.rmi.registry.RegistryImpl" fork="yes">
      <classpath>
        <path refid="classes.base"/>
        <path refid="lib.runtime.server"/>
      </classpath>
      <jvmarg value="-Djava.security.policy=${resources.security}/all_permissions.policy"/>
    </java>
  </target>

  <target name="recreate_h2_db"
          description="Recreates the demo h2 database. The demo database includes the EmpDept, Petstore and Chinook schemas, used by unit tests and demo applications">
    <delete dir="${db.h2.dir}"/>
    <java fork="true" classname="org.h2.tools.RunScript" classpathref="lib.build">
      <arg line="-url jdbc:h2:${db.h2.dir}/${db.h2.name} -showResults -script ${db.init.h2}"/>
    </java>
  </target>
</project>