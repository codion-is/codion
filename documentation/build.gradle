plugins {
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

apply plugin: 'maven-publish'

def documentationVersion = project.version.replace('-SNAPSHOT', '')

def documentationDir = "${documentationVersion}/${project.targetJdk}"

task copyModuleDependencyGraphs {
    doLast {
        frameworkModules.each {
            def moduleDir = it.projectDir
            def graphFilePath = "${moduleDir}/build/reports/dependency-graph/dependency-graph.svg"
            graphFilePath = graphFilePath.replace(rootDir.toString(), '').substring(1)
            ant.copy(todir: "${buildDir}/asciidoc/images/modules") {
                fileset(dir: rootDir, includes: graphFilePath)
            }
        }
    }
}

asciidoctor {
    dependsOn copyModuleDependencyGraphs
    // since the sources included in the docs may have changed, there's definitely
    // a more gradle like way to do this, but it escapes me
    inputs.dir(new File("../demos/chinook/src"));
    inputs.dir(new File("../demos/empdept/src"));
    inputs.dir(new File("../demos/manual/src"));
    inputs.dir(new File("../demos/petclinic/src"));
    inputs.dir(new File("../demos/petstore/src"));
    inputs.dir(new File("../demos/world/src"));
    // config files
    inputs.dir(new File("../framework/server/src/main"));

    outputDir = "${buildDir}/asciidoc"

    baseDirFollowsSourceFile()
    sources {
        include '*.adoc', 'technical/**/*.adoc', 'tutorials/**/*.adoc', 'manual/**/*.adoc', 'help/**/*.adoc'
    }
    attributes 'codion-version': documentationVersion, 'codion-jdk': project.targetJdk,
            revnumber: documentationVersion, sectnums: 4, sectanchors: true, prewrap: false,
            experimental: true, reproducible: true, linkcss: true, googleAnalyticsId: 'UA-159091863-1',
            'opar': '(',
            'cpar': ')',
            'comma': ',',
            'common-core': '/is.codion.common.core',
            'common-db': '/is.codion.common.db',
            'common-http': '/is.codion.common.http',
            'common-model': '/is.codion.common.model',
            'common-rmi': '/is.codion.common.rmi',
            'framework-db-core': '/is.codion.framework.db.core',
            'framework-db-http': '/is.codion.framework.db.http',
            'framework-db-local': '/is.codion.framework.db.local',
            'framework-db-rmi': '/is.codion.framework.db.rmi',
            'framework-domain': '/is.codion.framework.domain',
            'framework-domain-test': '/is.codion.framework.domain.test',
            'framework-model': '/is.codion.framework.model',
            'framework-model-test': '/is.codion.framework.model.test',
            'framework-server': '/is.codion.framework.server',
            'framework-servlet': '/is.codion.framework.servlet',
            'plugin-jackson-json': '/is.codion.plugin.jackson.json',
            'plugin-jasperreports': '/is.codion.plugin.jasperreports',
            'swing-common-model': '/is.codion.swing.common.model',
            'swing-common-ui': '/is.codion.swing.common.ui',
            'swing-framework-model': '/is.codion.swing.framework.model',
            'swing-framework-tools': '/is.codion.swing.framework.tools',
            'swing-framework-ui': '/is.codion.swing.framework.ui'
    asciidoctorj {
        version = '2.5.3'
        modules {
            diagram.use()
        }
        attributes 'source-highlighter': 'prettify'
    }
}

/**
 * An absolute monstrosity of a workaround for combining javadocs for multiple modular sub-projects.
 */
task combinedJavadoc {
    group 'documentation'

    def tempDir = "${buildDir}/tmp"
    def combinedSrcDir = "${tempDir}/combinedSource";
    def outputDirectory = "${buildDir}/javadoc"
    def optionsFile = new File(tempDir, "javadoc.options")

    outputs.dir(outputDirectory)
    FileCollection classpath = getProject().files()
    frameworkModules.each { module ->
        inputs.files(module.sourceSets.main.java)
        module.tasks.withType(Javadoc).each { javadocTask ->
            classpath += javadocTask.classpath
        }
    }
    doLast {
        //combine the framework source, with each module in a separate directory, named after the module
        frameworkModules.each { module ->
            ant.copy(todir: "${combinedSrcDir}/${module.moduleName}") {
                fileset(dir: "${module.projectDir}/src/main/java")
            }
        }
        def options = new StandardJavadocDocletOptions();
        options.setSourceNames(getProject().getObjects().fileCollection().from(combinedSrcDir).asFileTree.stream()
                .map(file -> file.getAbsolutePath())
                .collect());
        options.modulePath(new ArrayList(classpath.getFiles()))
        options.addStringOption("-module-source-path", combinedSrcDir)
        options.destinationDirectory(file(outputDirectory))
        options.docTitle("Codion Framework API ${documentationVersion}")
        options.links("https://docs.oracle.com/en/java/javase/11/docs/api/")
        options.noTimestamp(true)

        options.write(optionsFile)

        exec {
            executable = System.getProperty('java.home') + '/bin/javadoc'
            args = ["@" + optionsFile.getAbsolutePath()]
        }

        ant.delete(dir: combinedSrcDir)
    }
}

task assembleDocs(dependsOn: [combinedJavadoc, asciidoctor]) {
    group 'documentation'
    def docFolder = "${buildDir}/${documentationDir}"
    doLast {
        ant.delete(dir: docFolder)
        ant.copy(todir: docFolder) {
            fileset(dir: "${buildDir}/asciidoc")
        }
        ant.copy(todir: docFolder + '/api') {
            fileset(dir: "${buildDir}/javadoc")
        }
    }
}

task copyToGitHubPages(type: Sync, dependsOn: assembleDocs) {
    group 'documentation'
    def ghPagesDocDir = "../../codion-pages/doc/${documentationDir}"
    from "${buildDir}/${documentationDir}"
    into ghPagesDocDir
}

task documentationZip(type: Zip, dependsOn: assembleDocs) {
    group 'documentation'
    from "${buildDir}/${documentationDir}"
}

artifacts {
    archives documentationZip
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'is.codion.' + project.targetJdk
            artifact documentationZip
        }
    }
}