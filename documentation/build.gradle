plugins {
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

apply plugin: 'maven-publish'

def documentationVersion = project.version.replace('-SNAPSHOT', '')

def documentationDir = "doc/${documentationVersion}/${project.targetJdk}"

asciidoctor {
    // since the sources included in the docs may have changed, there's definitely
    // a more gradle like way to do this, but it escapes me
    inputs.dir(new File("../demos/chinook/src"));
    inputs.dir(new File("../demos/empdept/src"));
    inputs.dir(new File("../demos/manual/src"));
    inputs.dir(new File("../demos/petclinic/src"));
    inputs.dir(new File("../demos/petstore/src"));
    inputs.dir(new File("../demos/world/src"));
    // config files
    inputs.dir(new File("../framework/server/src/main"));

    doFirst {
        frameworkModules.each {
            def moduleDir = it.projectDir
            def graphFilePath = "${moduleDir}/build/reports/dependency-graph/dependency-graph.svg"
            graphFilePath = graphFilePath.replace(rootDir.toString(), '').substring(1)
            ant.copy(todir: "${buildDir}/docs/asciidoc/images/modules") {
                fileset(dir: rootDir, includes: graphFilePath)
            }
        }
    }
    baseDirFollowsSourceFile()
    sources {
        include '*.adoc', 'technical/**/*.adoc', 'tutorials/**/*.adoc', 'manual/**/*.adoc', 'help/**/*.adoc'
    }
    attributes 'codion-version': documentationVersion, 'codion-jdk': project.targetJdk,
            revnumber: documentationVersion, sectnums: 4, sectanchors: true, prewrap: false,
            experimental: true, reproducible: true, linkcss: true, googleAnalyticsId: 'UA-159091863-1'
    asciidoctorj {
        version = '2.5.3'
        modules {
            diagram.use()
        }
        attributes 'source-highlighter': 'prettify'
    }
}

task combinedJavadoc(type: Javadoc) {
    group 'documentation'
    title "Codion Framework API ${documentationVersion}"
    options.links 'https://docs.oracle.com/en/java/javase/11/docs/api/'
    options.addBooleanOption "-no-module-directories", true
    destinationDir = file("${buildDir}/docs/javadoc")
    modularity.inferModulePath = false
    frameworkModules.each { module ->
        module.tasks.withType(Javadoc).each { javadocTask ->
            source += javadocTask.source
            classpath += javadocTask.classpath
        }
    }
    exclude '**/module-info.java'//temporary fix for 'too many module declarations found' error
}

task assembleDocs(dependsOn: [combinedJavadoc, asciidoctor]) {
    group 'documentation'
    def docFolder = "${buildDir}/docs/${documentationDir}"
    doLast {
        ant.delete(dir: docFolder)
        ant.copy(todir: docFolder) {
            fileset(dir: "${buildDir}/docs/asciidoc")
        }
        ant.copy(todir: docFolder + '/api') {
            fileset(dir: "${buildDir}/docs/javadoc")
        }
    }
}

task copyToGitHubPages(type: Sync, dependsOn: assembleDocs) {
    group 'documentation'
    def ghPagesDocDir = "../../codion_gh-pages/${documentationDir}"
    from "${buildDir}/docs/${documentationDir}"
    into ghPagesDocDir
}

task documentationZip(type: Zip, dependsOn: assembleDocs) {
    group 'documentation'
    from "${buildDir}/docs/${documentationDir}"
}

artifacts {
    archives documentationZip
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'is.codion.' + project.targetJdk
            artifact documentationZip
        }
    }
}