plugins {
    id "org.asciidoctor.jvm.convert" version "4.0.2"
}

apply plugin: "java"
//apply plugin: "maven-publish"

def documentationVersion = project.version.replace("-SNAPSHOT", "")

def documentationDir = "${documentationVersion}"

tasks.register("copyModuleDependencyGraphs") {
    group "documentation"
    doLast {
        frameworkModules.each {
            def moduleDir = it.projectDir
            def graphFilePath = "${moduleDir}/build/reports/dependency-graph/dependency-graph.svg"
            graphFilePath = graphFilePath.replace(rootDir.toString(), "").substring(1)
            ant.copy(todir: project.layout.buildDirectory.dir("asciidoc/images/modules").get()) {
                fileset(dir: rootDir, includes: graphFilePath)
            }
        }
    }
}

tasks.register("generateI18nValuesPage") {
    group "documentation"
    doLast {
        def file = file("src/docs/asciidoc/technical/i18n-values.adoc")
        def moduleFiles = new LinkedHashMap<>()
        frameworkModules.each {
            def files = new ArrayList<>()
            it.sourceSets.main.resources.matching {
                include "**/*.properties"
            }.each {
                files.add(it.toString())
            }
            if (!files.empty) {
                moduleFiles.put(it.name, files.sort())
            }
        }
        file.text = new I18n(moduleFiles).toAsciidoc()
    }
}

asciidoctor {
    dependsOn copyModuleDependencyGraphs, generateI18nValuesPage
    // since the sources included in the docs may have changed, there"s definitely
    // a more gradle like way to do this, but it escapes me
    inputs.dir(new File("../demos/chinook/src"))
    inputs.dir(new File("../demos/employees/src"))
    inputs.dir(new File("../demos/manual/src"))
    inputs.dir(new File("../demos/petclinic/src"))
    inputs.dir(new File("../demos/petstore/src"))
    inputs.dir(new File("../demos/world/src"))
    // config files
    inputs.dir(new File("../framework/server/src/main"))

    outputDir = project.layout.buildDirectory.dir("asciidoc")

    baseDirFollowsSourceFile()
    sources {
        include "*.adoc", "technical/**/*.adoc", "tutorials/**/*.adoc", "manual/**/*.adoc", "help/**/*.adoc"
    }
    attributes "codion-version": documentationVersion,
            revnumber: documentationVersion, sectnums: 4, sectanchors: true, prewrap: false,
            experimental: true, reproducible: true, linkcss: true, tabsize: 2,
            "diagram-cachedir": project.layout.buildDirectory.dir("asciidoc/images/diagram-cache").get().asFile.absolutePath,
            "opar": "(",
            "cpar": ")",
            "comma": ",",
            "common-core": "/is.codion.common.core",
            "common-db": "/is.codion.common.db",
            "common-model": "/is.codion.common.model",
            "common-rmi": "/is.codion.common.rmi",
            "framework-db-core": "/is.codion.framework.db.core",
            "framework-db-http": "/is.codion.framework.db.http",
            "framework-db-local": "/is.codion.framework.db.local",
            "framework-db-rmi": "/is.codion.framework.db.rmi",
            "framework-domain": "/is.codion.framework.domain",
            "framework-domain-test": "/is.codion.framework.domain.test",
            "framework-json-domain": "/is.codion.framework.json.domain",
            "framework-json-db": "/is.codion.framework.json.db",
            "framework-model": "/is.codion.framework.model",
            "framework-model-test": "/is.codion.framework.model.test",
            "framework-server": "/is.codion.framework.server",
            "framework-servlet": "/is.codion.framework.servlet",
            "plugin-jasperreports": "/is.codion.plugin.jasperreports",
            "swing-common-model": "/is.codion.swing.common.model",
            "swing-common-model-tools": "/is.codion.swing.common.model.tools",
            "swing-common-ui": "/is.codion.swing.common.ui",
            "swing-common-ui-tools": "/is.codion.swing.common.ui.tools",
            "swing-framework-model": "/is.codion.swing.framework.model",
            "swing-framework-model-tools": "/is.codion.swing.framework.model.tools",
            "swing-framework-ui": "/is.codion.swing.framework.ui"
    asciidoctorj {
        version = "2.5.11"
        modules {
            diagram.use()
        }
        attributes "source-highlighter": "prettify"
    }
}

/**
 * An absolute monstrosity of a workaround for combining javadocs for multiple modular sub-projects.
 */
tasks.register("combinedJavadoc") {
    group "documentation"

    def tempDir = project.layout.buildDirectory.dir("tmp").get()
    def combinedSrcDir = "${tempDir}/combinedSource"
    def outputDirectory = project.layout.buildDirectory.dir("javadoc").get()
    def optionsFile = new File(tempDir.asFile, "javadoc.options")

    outputs.dir(outputDirectory)
    FileCollection classpath = getProject().files()
    frameworkModules.each { module ->
        inputs.files(module.sourceSets.main.java)
        module.tasks.withType(Javadoc).each { javadocTask ->
            classpath += javadocTask.classpath
        }
    }
    doLast {
        //combine the framework source, with each module in a separate directory, named after the module
        frameworkModules.each { module ->
            ant.copy(todir: "${combinedSrcDir}/" + "is." + module.name.replace("-", ".")) {
                fileset(dir: "${module.projectDir}/src/main/java")
            }
        }
        def options = new StandardJavadocDocletOptions()
        options.setSourceNames(getProject().getObjects().fileCollection().from(combinedSrcDir).asFileTree.stream()
                .map(file -> file.getAbsolutePath())
                .collect())
        options.modulePath(new ArrayList(classpath.getFiles()))
        options.addStringOption("-module-source-path", combinedSrcDir)
        options.destinationDirectory(file(outputDirectory))
        options.docTitle("Codion Framework API ${documentationVersion}")
        options.links("https://docs.oracle.com/en/java/javase/$jdkVersion/docs/api/")
        options.encoding("UTF-8")
        options.noTimestamp(true)
        options.addStringOption("Xdoclint:none", "-quiet")

        options.write(optionsFile)

        def javadocTool = javaToolchains.javadocToolFor {
            languageVersion.set(JavaLanguageVersion.of("$jdkVersion"))
        }
        exec {
            executable = javadocTool.get().getExecutablePath()
            args = ["@" + optionsFile.getAbsolutePath()]
        }

        ant.delete(dir: combinedSrcDir)
    }
}

tasks.register("assembleDocs") {
    dependsOn combinedJavadoc, asciidoctor
    group "documentation"
    def docFolder = project.layout.buildDirectory.dir("${documentationDir}").get()
    doLast {
        ant.delete(dir: docFolder)
        ant.copy(todir: docFolder) {
            fileset(dir: project.layout.buildDirectory.dir("asciidoc").get())
        }
        ant.copy(todir: docFolder.asFile.absolutePath + "/api") {
            fileset(dir: project.layout.buildDirectory.dir("javadoc").get())
        }
        ant.copy(todir: docFolder.asFile.absolutePath + "/utilities") {
            fileset(dir: project.projectDir.absolutePath + "/src/docs/utilities")
        }
    }
}

tasks.register("copyToGitHubPages", Sync) {
    dependsOn assembleDocs
    group "documentation"
    def ghPagesDocDir = "../../codion-pages/doc/${documentationDir}"
    from project.layout.buildDirectory.dir("${documentationDir}")
    into ghPagesDocDir
}

tasks.register("documentationZip", Zip) {
    dependsOn assembleDocs
    group "documentation"
    from project.layout.buildDirectory.dir("${documentationDir}")
}

//artifacts {
//    archives documentationZip
//}

//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            groupId "is.codion"
//            artifact documentationZip
//        }
//    }
//}