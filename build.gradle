buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.javamodularity:moduleplugin:1.6.0"
    }
}

plugins {
    id "org.sonarqube" version "2.8"
    id "com.github.ben-manes.versions" version "0.27.0"
    id "org.asciidoctor.jvm.convert" version "2.3.0"
}

ext {
    slf4jApiVersion = '2.0.0-alpha0'
    logbackVersion = '1.3.0-alpha4'
    h2Version = '1.4.199'
    jsonVersion = '20180130'
    jcalendarVersion = '1.4'
    jcommonVersion = '1.0.24'
    jfreeChartVersion = '1.5.0'
    jettyVersion = '9.4.15.v20190215'
    httpClientVersion = '4.5.10'
    jaxbApiVersion = '2.3.0'
    javaxActivationVersion = '1.2.0'
    junitVersion = '5.5.2'
    //jasperreports
    jasperReportsVersion = '6.10.0'
    commonsLoggingVersion = '1.2'
    commonsDigesterVersion = '2.1'
    commonsCollectionsVersion = '4.4'
    commonsBeanUtilsVersion = '1.9.4'
    jdtCoreCompilerVersion = '4.6.1'

    versionPropertiesFile = '/org/jminor/common/version.properties'
    versionProperties = new Properties()
    frameworkModules = subprojects.findAll {
        project -> !project.name.contains("demos")
    }
}

file("${projectDir}/common/core/src/main/resources" +
        project.versionPropertiesFile).withInputStream { project.versionProperties.load(it) }

allprojects {
    project.version = project.versionProperties.getProperty('version')
    repositories {
        jcenter()
    }
}

configure(project.frameworkModules) {
    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'org.javamodularity.moduleplugin'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    dependencies {
        api "org.slf4j:slf4j-api:${slf4jApiVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    }

    javadoc {
        failOnError = false
    }

    ext.moduleName = "org." + project.name.replace('-', '.')

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
//        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    jar {
        manifest {
            attributes(
                    "Specification-Title": project.name,
                    "Specification-Version": project.version,
                    "Specification-Vendor": "JMinor",
                    "Implementation-Title": project.name,
                    "Implementation-Version": project.version,
                    "Implementation-Vendor": "JMinor",
                    "Implementation-Vendor-Id": "org.jminor",
                    "Implementation-URL": "http://jminor.org",
                    "Build-Jdk": org.gradle.internal.jvm.Jvm.current(),
                    "Built-By": System.getProperty("user.name"))
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        group 'build'
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        group 'build'
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId 'org.jminor.jdk11'
                from components.java
                artifact sourcesJar
                artifact javadocJar
            }
        }
        repositories {
            maven {
                credentials {
                    username "${artifactoryUsername}"
                    password "${artifactoryPassword}"
                }

                if (project.version.endsWith('-SNAPSHOT')) {
                    url "${artifactorySnapshotUrl}"
                } else {
                    url "${artifactoryReleaseUrl}"
                }
            }
        }
    }

    sonarqube {
        System.setProperty("sonar.host.url", "${sonarHostUrl}")
        System.setProperty("sonar.login", "${sonarLogin}")
        System.setProperty("sonar.password", "${sonarPassword}")
        properties {
            property "sonar.projectName", "org." + project.name.replace('-', '.')
            property "sonar.projectKey", "org.jminor:jminor"
            property "sonar.projectVersion", project.version
            property "sonar.java.source", "1.8"
            property "sonar.sourceEncoding", "UTF-8"
            property "sonar.exclusions", "**/*TestDomain.java"
        }
    }

    /** Creates a key- and truststore pair used when running server unit tests and demos with remote connection */
    def keystoreRootDir = project.rootDir.toString() + '/framework/server/src/main/security/'
    def keystore = keystoreRootDir + 'jminor_keystore.jks'
    task createServerKeystore {
        doLast {
            def certificate = keystoreRootDir + 'jminor_server.cer'
            def keyToolExecutable = System.getProperty('java.home') + '/bin/keytool'
            ant.genkey(alias: 'JMinorServer', keyalg: 'RSA', keystore: keystore,
                    storepass: 'crappypass', dname: 'CN=Dummy, OU=dummy, O=dummy.org, C=DU', storetype: 'pkcs12')
            exec {
                executable = keyToolExecutable
                args = ['-exportcert', '-keystore', keystore, '-storepass', 'crappypass', '-alias', 'JMinorServer', '-rfc', '-file', certificate]
            }
            def truststore = keystoreRootDir + 'jminor_truststore.jks'
            exec {
                executable = keyToolExecutable
                args = ['-import', '-alias', 'JMinorServer', '-storepass', 'crappypass', '-file', certificate,
                        '-keystore', truststore, '-noprompt', '-storetype', 'pkcs12']
            }
            ant.delete(file: certificate)
        }
    }
    createServerKeystore.onlyIf { !new File(keystore).exists() }

    test {
        moduleOptions {
            addExports = [
                    'org.junit.platform.commons/org.junit.platform.commons.util': 'ALL-UNNAMED',
                    'org.junit.platform.commons/org.junit.platform.commons.logging': 'ALL-UNNAMED'
            ]
        }
        useJUnitPlatform()
        systemProperty "jminor.db.type", "h2"
        systemProperty "jminor.db.host", "h2db"
        systemProperty "jminor.db.embedded", "true"
        systemProperty "jminor.db.embeddedInMemory", "true"
        systemProperty "jminor.db.initScript", "src/test/sql/create_h2_db.sql"
        systemProperty "jminor.unittest.username", "scott"
        systemProperty "jminor.unittest.password", "tiger"
    }.dependsOn createServerKeystore
}

apply plugin: 'project-report'

asciidoctor {
    sourceDir = file('docs')
    //so asciidoc include works in intellij, relative path
    baseDir = file('docs/noop')
    sources {
        include '*.adoc', 'technical/**/*.adoc', 'tutorials/**/*.adoc', 'manual/**/*.adoc'
    }
    attributes toc: 'right', sectnums: 4, 'jminor-version': project.version, prewrap: false, experimental: true
    asciidoctorj {
        modules {
            diagram.use()
            diagram.version '1.5.16'
        }
        attributes 'source-highlighter': 'prettify'
    }
    //possible code changes
    outputs.upToDateWhen { false }
}

htmlDependencyReport {
    projects = frameworkModules
}

task combinedJavadoc(type: Javadoc) {
    group 'documentation'
    title "JMinor Framework API $project.version"
    failOnError = false
    options.links 'https://docs.oracle.com/en/java/javase/11/docs/api/'
    destinationDir = file("${buildDir}/docs/javadoc")
    source frameworkModules.collect { it.sourceSets.main.allJava }
    classpath = files(frameworkModules.collect { it.sourceSets.main.compileClasspath })
}

task populateSite(dependsOn: [combinedJavadoc, asciidoctor]) {
    group 'documentation'
    doLast {
        ant.delete(dir: "${sitePath}/docs")
        ant.copy(todir: "${sitePath}/docs/api") {
            fileset(dir: "${buildDir}/docs/javadoc")
        }
        ant.copy(todir: "${sitePath}") {
            fileset(dir: "${buildDir}/docs/asciidoc")
        }
        ant.chgrp(group: 'www', type: 'both') {
            fileset(dir: "${sitePath}", includes: '**/*')
        }
        ant.chmod(dir: "${sitePath}", perm: 'ugo+r', type: 'file', includes: '**/*')
        ant.chmod(dir: "${sitePath}", perm: 'ugo+rx', type: 'dir', includes: '**/*')
        ant.chmod(file: "${sitePath}", perm: 'ugo+rx', type: 'dir')
    }
}

task populateWiki(dependsOn: [combinedJavadoc, htmlDependencyReport]) {
    group 'documentation'
    doLast {
        ant.delete(dir: "${wikiMediaPath}/src")
        ant.delete(dir: "${wikiMediaPath}/docs")
        ant.mkdir(dir: "${wikiMediaPath}/docs")
        ant.copy(todir: "${wikiMediaPath}/docs") {
            fileset(dir: 'docs')
        }
        ant.copy(todir: "${wikiMediaPath}/docs/api") {
            fileset(dir: "${buildDir}/docs/javadoc")
        }
        ant.copy(todir: "${wikiMediaPath}/docs/dependencies") {
            fileset(dir: "${buildDir}/reports/project/dependencies")
        }
        ant.copy(todir: "${wikiMediaPath}/docs") {
            fileset(dir: '.', includes: 'changelog.txt')
        }
        ant.copy(todir: "${wikiMediaPath}/src") {
            fileset(dir: 'common/core/build/classes/java/main', includes: 'org/jminor/common/version.txt')
            fileset(dir: 'demos/chinook/src/main/java')
            fileset(dir: 'demos/chinook/src/test/java')
            fileset(dir: 'demos/empdept/src/main/java')
            fileset(dir: 'demos/empdept/src/test/java')
            fileset(dir: 'demos/petstore/src/main/java')
            fileset(dir: 'demos/petstore/src/test/java')
            fileset(dir: 'demos/schemabrowser/src/main/java')
            fileset(dir: 'demos/schemabrowser/src/test/java')
            fileset(dir: 'demos/world/src/main/java')
            fileset(dir: 'demos/world/src/test/java')
        }
        ant.copy(todir: "${wikiMediaPath}/src/resources/server") {
            fileset(dir: 'framework/server/src/main/bin')
        }
        ant.copy(todir: "${wikiMediaPath}/src/resources/server/config") {
            fileset(dir: 'framework/server/src/main/config')
        }
        ant.copy(todir: "${wikiMediaPath}/src/resources/server/security") {
            fileset(dir: 'framework/server/src/main/security')
        }
        ant.copy(todir: "${wikiMediaPath}/src/resources/server_monitor") {
            fileset(dir: 'swing/framework-server-monitor/src/main/bin')
        }
        ant.copy(todir: "${wikiMediaPath}/src/resources/server_monitor/config") {
            fileset(dir: 'swing/framework-server-monitor/src/main/config')
        }
        ant.copy(todir: "${wikiMediaPath}/src/resources/demos/chinook") {
            fileset(dir: 'demos/chinook/src/main/config')
            fileset(dir: 'demos/chinook/src/main/sql')
        }
        ant.copy(todir: "${wikiMediaPath}/src/resources/demos/empdept") {
            fileset(dir: 'demos/empdept/src/main/config')
            fileset(dir: 'demos/empdept/src/main/sql')
        }
        ant.copy(todir: "${wikiMediaPath}/src/resources/demos/petstore") {
            fileset(dir: 'demos/petstore/src/main/config')
            fileset(dir: 'demos/petstore/src/main/sql')
        }
        ant.copy(todir: "${wikiMediaPath}/src/resources/demos/schemabrowser") {
            fileset(dir: 'demos/schemabrowser/src/main/config')
        }
        ant.copy(todir: "${wikiMediaPath}/src/resources/demos/world") {
            fileset(dir: 'demos/world/src/main/config')
            fileset(dir: 'demos/world/src/main/sql')
        }
        ant.chgrp(group: 'www', type: 'both') {
            fileset(dir: "${wikiMediaPath}", includes: '**/*')
        }
        ant.chmod(dir: "${wikiMediaPath}", perm: 'ugo+r', type: 'file', includes: '**/*')
        ant.chmod(dir: "${wikiMediaPath}", perm: 'ugo+rx', type: 'dir', includes: '**/*')
        ant.chmod(file: "${wikiMediaPath}", perm: 'ugo+rx', type: 'dir')
    }
}