plugins {
    id "org.sonarqube" version "5.0.0.4638"
    id "com.github.ben-manes.versions" version "0.51.0"
    id "com.vanniktech.dependency.graph.generator" version "0.8.0"
    id "com.diffplug.spotless" version "6.25.0"
    id "org.gradlex.extra-java-module-info" version "1.8"
    id "io.github.gradle-nexus.publish-plugin" version "2.0.0"
}

ext {
    frameworkModules = subprojects.findAll {
        project -> !project.name.contains("demos") && !project.name.contains("documentation")
    }
}

nexusPublishing {
    packageGroup = "is.codion"
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

configure(project.frameworkModules) {
    apply plugin: "java-library"
    apply plugin: "jacoco"
    apply plugin: "maven-publish"
    apply plugin: "com.github.ben-manes.versions"
    apply plugin: "project-report"
    apply plugin: "com.vanniktech.dependency.graph.generator"
    apply plugin: "signing"

    dependencies {
        testImplementation(libs.junit.api)
        testRuntimeOnly(libs.junit.engine)
    }

    clean {
        doLast {
            //clean intellij output dir as well
            file("out").deleteDir()
        }
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of("$jdkVersion")
        }
        withJavadocJar()
        withSourcesJar()
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.deprecation = true
    }

    javadoc {
        options.links "https://docs.oracle.com/javase/$jdkVersion/docs/api/"
        options.encoding = "UTF-8"
        options.addStringOption("Xdoclint:none", "-quiet")
    }

    jar {
        manifest {
            attributes(
                    "Sealed": "true",
                    "Specification-Title": project.name,
                    "Specification-Version": project.version,
                    "Specification-Vendor": "Codion",
                    "Implementation-Title": project.name,
                    "Implementation-Version": project.version,
                    "Implementation-Vendor": "Codion",
                    "Implementation-Vendor-Id": "is.codion",
                    "Implementation-URL": "https://codion.is",
                    "Build-Jdk": org.gradle.internal.jvm.Jvm.current(),
                    "Built-By": System.getProperty("user.name"),
                    "Build-Date": java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd").format(LocalDate.now()))
        }
    }

    if (hasPublicationProperties()) {
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    groupId "is.codion"
                    from components.java
                    pom {
                        name.set("is.codion:" + project.name)
                        description.set("Codion Application Framework")
                        url.set("https://codion.is")
                        licenses {
                            license {
                                name.set("GPL-3.0")
                                url.set("https://www.gnu.org/licenses/gpl-3.0.en.html")
                            }
                        }
                        developers {
                            developer {
                                id.set("bjorndarri")
                                name.set("Björn Darri Sigurðsson")
                                email.set("bjorndarri@gmail.com")
                            }
                        }
                        scm {
                            connection.set("scm:git:git://github.com/codion-is/codion.git")
                            developerConnection.set("scm:git:git://github.com/codion-is/codion.git")
                            url.set("https://github.com/codion-is/codion")
                        }
                    }
                }
            }
            repositories {
                maven {
                    credentials {
                        username "${artifactoryUsername}"
                        password "${artifactoryPassword}"
                    }
                    allowInsecureProtocol = true
                    if (project.version.endsWith("-SNAPSHOT")) {
                        url "${artifactorySnapshotUrl}"
                    } else {
                        url "${artifactoryReleaseUrl}"
                    }
                }
            }
        }

        signing {
            sign publishing.publications.mavenJava
        }
    }

    if (hasSonarqubeProperties()) {
        sonar {
            System.setProperty("sonar.host.url", "${sonarHostUrl}")
            System.setProperty("sonar.login", "${sonarLogin}")
            System.setProperty("sonar.password", "${sonarPassword}")
            System.setProperty("sonar.projectVersion", project.version.replace("-SNAPSHOT", ""))
            System.setProperty("sonar.java.source", "$jdkVersion")
            System.setProperty("sonar.sourceEncoding", "UTF-8")
            System.setProperty("sonar.exclusions", "**/*TestDomain.java")
            System.setProperty("sonar.coverage.exclusions",
                    "**/is/codion/framework/model/test/**," +
                            "**/is/codion/framework/domain/entity/test/**," +
                            "**/is/codion/swing/framework/ui/test/**")
        }
    }

    /** Creates a key- and truststore pair used when running server unit tests and demos with remote connection */
    tasks.register("createServerKeystore") {
        def keystoreDir = "${rootDir}/framework/server/src/main/config/"
        def keystore = keystoreDir + "keystore.jks"
        def truststore = keystoreDir + "truststore.jks"
        def certificate = keystoreDir + "certificate.cer"
        def keyToolExecutable = System.getProperty("java.home") + "/bin/keytool"

        onlyIf { !file(keystore).exists() }

        doLast {
            exec {
                executable = keyToolExecutable
                args = ["-genkeypair", "-keyalg", "RSA", "-keystore", keystore, "-storepass", "crappypass", "-keypass", "crappypass",
                        "-dname", "CN=Dummy, OU=dummy, O=dummy.org, C=DU",
                        "-alias", "Alias", "-storetype", "pkcs12", "-ext", "SAN=dns:localhost"]
            }
            exec {
                executable = keyToolExecutable
                args = ["-exportcert", "-keystore", keystore, "-storepass", "crappypass",
                        "-alias", "Alias", "-rfc", "-file", certificate]
            }
            exec {
                executable = keyToolExecutable
                args = ["-import", "-alias", "Alias", "-storepass", "changeit", "-file", certificate,
                        "-keystore", truststore, "-noprompt", "-storetype", "pkcs12"]
            }
            ant.delete(file: certificate)
        }
    }

    jacocoTestReport {
        reports {
            xml.getRequired().set(true)
            html.getRequired().set(true)
            csv.getRequired().set(true)
        }
        dependsOn test
    }

    test {
        useJUnitPlatform()
        systemProperty "codion.db.url", "jdbc:h2:mem:h2db"
        systemProperty "codion.db.initScripts", "src/test/sql/create_h2_db.sql"
        systemProperty "codion.test.user", "scott:tiger"

        dependsOn createServerKeystore
        finalizedBy jacocoTestReport
    }
}

configure(subprojects) {
    apply plugin: "com.diffplug.spotless"
    spotless {
        java {
            licenseHeaderFile("${rootDir}/documentation/src/misc/license_header").yearSeparator(" - ")
        }
        format "javaMisc", {
            target "src/**/package-info.java", "src/**/module-info.java"
            licenseHeaderFile("${rootDir}/documentation/src/misc/license_header", "\\/\\*\\*").yearSeparator(" - ")
        }
    }
}

tasks.register("tagRelease") {
    doLast {
        if (project.version.contains("SNAPSHOT")) {
            throw new GradleException("Thou shalt not tag a snapshot release")
        }
        def tagName = "v" + project.version
        exec { commandLine "git", "push", "dev" }
        exec { commandLine "git", "push", "origin" }
        exec { commandLine "git", "tag", "-a", tagName, "-m", "\"" + tagName + " release\"" }
        exec { commandLine "git", "push", "dev", tagName }
        exec { commandLine "git", "push", "origin", tagName }
    }
}

boolean hasPublicationProperties() {
    return project.hasProperty("sonatypeUsername") &&
            project.hasProperty("sonatypePassword") &&
            project.hasProperty("signing.keyId") &&
            project.hasProperty("signing.password") &&
            project.hasProperty("signing.secretKeyRingFile")
}

boolean hasSonarqubeProperties() {
    return project.hasProperty("sonarHostUrl") &&
            project.hasProperty("sonarLogin") &&
            project.hasProperty("sonarPassword")
}