plugins {
    id "org.sonarqube" version "2.6.2"
    id "com.github.ben-manes.versions" version "0.20.0"
}

allprojects {
    version = '0.11.6-SNAPSHOT'
}

ext {
    slf4jApiVersion = '1.7.25'
    logbackVersion = '1.2.3'
    h2Version = '1.4.197'
    jsonVersion = '20180130'
    jcalendarVersion = '1.4'
    jcommonVersion = '1.0.24'
    jfreeChartVersion = '1.5.0'
    jettyVersion = '9.4.14.v20181114'
    httpClientVersion = '4.5.6'
    jaxbApiVersion = '2.3.0'
    javaxActivationVersion = '1.2.0'
    junitVersion = '5.3.2'
    jacocoVersion = '0.8.2'
    //jasperreports
    jasperReportsVersion = '6.6.0'
    commonsLoggingVersion = '1.2'
    commonsDigesterVersion = '2.1'
    commonsCollectionsVersion = '3.2.2'
    commonsBeanUtilsVersion = '1.9.3'
    jdtCoreCompilerVersion = '4.6.1'
}

ext {
    frameworkModules = subprojects.findAll {
        project -> !project.name.contains("demos")
    }
}

configure(project.frameworkModules) {
    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        jcenter()
    }

    dependencies {
        implementation "org.slf4j:slf4j-api:${slf4jApiVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    }

    sourceSets {
        main {
            java {
                exclude 'module-info.java'
            }
        }
    }

    javadoc {
        //to prevent jpms based errors on Java >= 9
        failOnError = false
    }

    jar {
        manifest {
            attributes(
                    "Specification-Title": project.name,
                    "Specification-Version": "${version}",
                    "Specification-Vendor": "JMinor",
                    "Implementation-Title": project.name,
                    "Implementation-Version": "${version}",
                    "Implementation-Vendor": "JMinor",
                    "Implementation-Vendor-Id": "org.jminor",
                    "Implementation-URL": "http://jminor.org",
                    "Automatic-Module-Name": "org." + project.name.replace('-', '.'),
                    "Build-Jdk": org.gradle.internal.jvm.Jvm.current(),
                    "Built-By": System.getProperty("user.name")/*,
                        "Build-Time": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")*/)
        }
    }

    task jarSources(type: Jar, dependsOn: classes) {
        group 'build'
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task jarJavadoc(type: Jar, dependsOn: javadoc) {
        group 'build'
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives jarSources
        archives jarJavadoc
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId 'org.jminor'
                from components.java
                artifact jarSources
                artifact jarJavadoc
            }
        }
        repositories {
            maven {
                credentials {
                    username "${artifactoryUsername}"
                    password "${artifactoryPassword}"
                }

                if (project.version.endsWith('-SNAPSHOT')) {
                    url "${artifactorySnapshotUrl}"
                } else {
                    url "${artifactoryReleaseUrl}"
                }
            }
        }
    }

    sonarqube {
        System.setProperty("sonar.host.url", "${sonarHostUrl}")
        System.setProperty("sonar.login", "${sonarLogin}")
        System.setProperty("sonar.password", "${sonarPassword}")
        properties {
            property "sonar.projectName", "org." + project.name.replace('-', '.')
            property "sonar.projectKey", "org.jminor:jminor"
            property "sonar.projectVersion", version
            property "sonar.java.source", "1.8"
            property "sonar.sourceEncoding", "UTF-8"
            property "sonar.exclusions", "**/*module-info.java,**/*TestDomain.java"
        }
    }

    clean {
        //clean intellij output dir as well
        doLast {
            file('out').deleteDir()
        }
    }

    /** Creates a key- and truststore pair used when running server unit tests and demos with remote connection */
    def keystoreRootDir = project.rootDir.toString() + '/framework/server/src/main/security/'
    def keystore = keystoreRootDir + 'JMinorServerKeystore'
    task createServerKeystore {
        doLast {
            def certificate = keystoreRootDir + 'JMinorServer.cer'
            def keyToolExecutable = System.getProperty('java.home') + '/bin/keytool'
            ant.genkey(alias: 'JMinorServer', keyalg: 'RSA', keystore: keystore,
                    storepass: 'crappypass', dname: 'CN=Dummy, OU=dummy, O=dummy.org, C=DU')
            exec {
                executable = keyToolExecutable
                args = ['-exportcert', '-keystore', keystore, '-alias', 'JMinorServer', '-rfc', '-file', certificate]
            }
            def truststore = keystoreRootDir + 'JMinorClientTruststore'
            exec {
                executable = keyToolExecutable
                args = ['-import', '-alias', 'JMinorServer', '-storepass', 'crappypass', '-file', certificate,
                        '-keystore', truststore, '-noprompt']
            }
            ant.delete(file: certificate)
        }
    }
    createServerKeystore.onlyIf { !new File(keystore).exists() }

    test {
        useJUnitPlatform()
        systemProperty "jminor.db.type", "h2"
        systemProperty "jminor.db.host", "h2db"
        systemProperty "jminor.db.embedded", "true"
        systemProperty "jminor.db.embeddedInMemory", "true"
        systemProperty "jminor.db.initScript", "src/test/sql/create_h2_db.sql"
        systemProperty "jminor.unittest.username", "scott"
        systemProperty "jminor.unittest.password", "tiger"
    }.dependsOn createServerKeystore

    jacoco {
        toolVersion = "${jacocoVersion}"
    }
}

apply plugin: 'project-report'

htmlDependencyReport {
    projects = frameworkModules
}

task combinedJavadoc(type: Javadoc) {
    group 'documentation'
    title "JMinor Framework API $version"
    failOnError = false
    options.links 'http://docs.oracle.com/javase/8/docs/api/'
    destinationDir = file("${buildDir}/docs/javadoc")
    source frameworkModules.collect { it.sourceSets.main.allJava }
    classpath = files(frameworkModules.collect { it.sourceSets.main.compileClasspath })
}

task populateWiki(dependsOn: [combinedJavadoc, htmlDependencyReport]) {
    group 'documentation'
    doLast {
        ant.delete(dir: "${wikiMediaPath}/src")
        ant.delete(dir: "${wikiMediaPath}/docs")
        ant.mkdir(dir: "${wikiMediaPath}/docs")
        ant.copy(todir: "${wikiMediaPath}/docs") {
            fileset(dir: 'docs')
        }
        ant.copy(todir: "${wikiMediaPath}/docs/api") {
            fileset(dir: "${buildDir}/docs/javadoc")
        }
        ant.copy(todir: "${wikiMediaPath}/docs/dependencies") {
            fileset(dir: "${buildDir}/reports/project/dependencies")
        }
        ant.copy(todir: "${wikiMediaPath}/docs") {
            fileset(dir: '.', includes: 'changelog.txt')
        }
        ant.copy(todir: "${wikiMediaPath}/src") {
            fileset(dir: 'common/core/build/classes/java/main', includes: 'org/jminor/common/version.txt')
            fileset(dir: 'demos/chinook/src/main/java')
            fileset(dir: 'demos/chinook/src/test/java')
            fileset(dir: 'demos/empdept/src/main/java')
            fileset(dir: 'demos/empdept/src/test/java')
            fileset(dir: 'demos/petstore/src/main/java')
            fileset(dir: 'demos/petstore/src/test/java')
            fileset(dir: 'demos/schemabrowser/src/main/java')
            fileset(dir: 'demos/schemabrowser/src/test/java')
            fileset(dir: 'demos/world/src/main/java')
            fileset(dir: 'demos/world/src/test/java')
        }
        ant.copy(todir: "${wikiMediaPath}/src/resources/server") {
            fileset(dir: 'framework/server/src/main/bin')
        }
        ant.copy(todir: "${wikiMediaPath}/src/resources/server/config") {
            fileset(dir: 'framework/server/src/main/config')
        }
        ant.copy(todir: "${wikiMediaPath}/src/resources/server/security") {
            fileset(dir: 'framework/server/src/main/security')
        }
        ant.copy(todir: "${wikiMediaPath}/src/resources/server_monitor") {
            fileset(dir: 'swing/framework-server-monitor/src/main/bin')
        }
        ant.copy(todir: "${wikiMediaPath}/src/resources/server_monitor/config") {
            fileset(dir: 'swing/framework-server-monitor/src/main/config')
        }
        ant.copy(todir: "${wikiMediaPath}/src/resources/demos/chinook") {
            fileset(dir: 'demos/chinook/src/main/config')
            fileset(dir: 'demos/chinook/src/main/sql')
        }
        ant.copy(todir: "${wikiMediaPath}/src/resources/demos/empdept") {
            fileset(dir: 'demos/empdept/src/main/config')
            fileset(dir: 'demos/empdept/src/main/sql')
        }
        ant.copy(todir: "${wikiMediaPath}/src/resources/demos/petstore") {
            fileset(dir: 'demos/petstore/src/main/config')
            fileset(dir: 'demos/petstore/src/main/sql')
        }
        ant.copy(todir: "${wikiMediaPath}/src/resources/demos/schemabrowser") {
            fileset(dir: 'demos/schemabrowser/src/main/config')
        }
        ant.copy(todir: "${wikiMediaPath}/src/resources/demos/world") {
            fileset(dir: 'demos/world/src/main/config')
            fileset(dir: 'demos/world/src/main/sql')
        }
        ant.chgrp(group: 'www', type: 'both') {
            fileset(dir: "${wikiMediaPath}", includes: '**/*')
        }
        ant.chmod(dir: "${wikiMediaPath}", perm: 'ugo+r', type: 'file', includes: '**/*')
        ant.chmod(dir: "${wikiMediaPath}", perm: 'ugo+rx', type: 'dir', includes: '**/*')
        ant.chmod(file: "${wikiMediaPath}", perm: 'ugo+rx', type: 'dir')
    }
}