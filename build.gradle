buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:2.2.+'
        classpath 'de.gliderpilot.gradle.jnlp:gradle-jnlp-plugin:+'
    }
}

plugins {
    id "org.sonarqube" version "2.6"
}

apply plugin: 'idea'
apply plugin: 'nebula-aggregate-javadocs'

/** Creates a key- and truststore pair used when running server unit tests and demos with remote connection */
task createServerKeystore {
    doLast {
        def rootDir = project.rootDir.toString() + '/resources/security/'
        def keystore = rootDir + 'JMinorServerKeystore'
        def certificate = rootDir + 'JMinorServer.cer'
        def truststore = rootDir + 'JMinorClientTruststore'
        if (!new File(rootDir + 'JMinorServerKeystore').exists()) {
            ant.genkey(alias: 'JMinorServer', keyalg: 'RSA', keystore: keystore,
                    storepass: 'crappypass', dname: 'CN=Dummy, OU=dummy, O=dummy.org, C=DU')
            exec {
                executable = System.getProperty('java.home') + '/bin/keytool'
                args = ['-exportcert', '-keystore', keystore, '-alias', 'JMinorServer', '-rfc', '-file', certificate]
            }
            exec {
                executable = System.getProperty('java.home') + '/bin/keytool'
                args = ['-import', '-alias', 'JMinorServer', '-storepass', 'crappypass', '-file', certificate,
                        '-keystore', truststore, '-noprompt']
            }
            ant.delete(file: certificate)
        }
    }
}

allprojects {
    version='0.11.0-SNAPSHOT'
}

idea.project.ipr {
    withXml {
            provider ->
                def node = provider.asNode()
                def compilerConfig = node.component.find { it.@name == 'CompilerConfiguration' }
                appendNode(compilerConfig,'''<excludeFromCompile>
      <file url="file://$PROJECT_DIR$/common/core/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/common/db/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/common/model/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/common/server/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/common/server-http/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/framework/db-core/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/framework/db-http/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/framework/db-local/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/framework/db-remote/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/framework/db-test/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/framework/model/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/framework/model-unittests/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/framework/server/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/framework/servlet/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/javafx/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/plugins/hikari-pool/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/plugins/imagepanel/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/plugins/jasperreports/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/plugins/json/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/plugins/log4j-proxy/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/plugins/logback-proxy/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/plugins/nextreports/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/plugins/tomcat-pool/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/swing/common-model/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/swing/common-ui/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/swing/common-tools/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/swing/common-tools-ui/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/swing/framework-server-monitor/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/swing/framework-model/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/swing/framework-ui/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/swing/framework-ui-test/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/swing/framework-tools/src/main/java/module-info.java" />
      <file url="file://$PROJECT_DIR$/swing/framework-tools-ui/src/main/java/module-info.java" />
    </excludeFromCompile>''')
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    ext {
        slf4jApiVersion = '1.7.7'
        logbackVersion = '1.1.3'
        h2Version = '1.4.192'
        jsonVersion = '20090211'
        jcalendarVersion = '1.4'
        jcommonVersion = '1.0.23'
        jfreechartVersion = '1.0.19'
        jettyVersion = '9.4.6.v20170531'
        httpclientVersion = '4.5'
        httpcoreVersion = '4.4.1'
        commonsloggingVersion = '1.1.1'
        junitVersion = '4.12'
//        moduleName = project.name
    }

    repositories {
        jcenter()
    }

    dependencies {
        compile "org.slf4j:slf4j-api:${slf4jApiVersion}"
        testCompile "junit:junit:${junitVersion}"
    }

    sourceSets {
        main {
            java {
                exclude 'module-info.java'
            }
        }
    }

//    compileJava {
//        inputs.property("moduleName", moduleName)
//        doFirst {
//            options.compilerArgs = [
//                    '--module-path', classpath.asPath,
//            ]
//            classpath = files()
//        }
//    }

//    compileTestJava {
//        inputs.property("moduleName", moduleName)
//        doFirst {
//            options.compilerArgs = [
//                    '--module-path', classpath.asPath,
//                    '--add-modules', 'junit',
//                    '--add-reads', "$moduleName=junit",
//                    '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
//            ]
//            classpath = files()
//        }
//    }

    test {
//        inputs.property("moduleName", moduleName)
//        doFirst {
//            jvmArgs = [
//                    '--module-path', classpath.asPath,
//                    '--add-modules', 'ALL-MODULE-PATH',
//                    '--add-reads', "$moduleName=junit",
//                    '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
//            ]
//            classpath = files()
//        }
        systemProperty "jminor.db.type", "h2"
        systemProperty "jminor.db.host", "h2db"
        systemProperty "jminor.db.embedded", "true"
        systemProperty "jminor.db.embeddedInMemory", "true"
        systemProperty "jminor.db.initScript", "src/test/sql/create_h2_db.sql"
        systemProperty "jminor.unittest.username", "scott"
        systemProperty "jminor.unittest.password", "tiger"
    }.dependsOn createServerKeystore

    def artifactName = project.name.replace("org.", "").replace(".", "-")
    jar {
        baseName = artifactName
    }

    if (!project.name.contains("demos")) {
        apply plugin: 'maven-publish'

        jar {
            manifest {
                attributes(
                        "Specification-Title": project.name,
                        "Specification-Version": "${version}",
                        "Specification-Vendor": "JMinor",
                        "Implementation-Title": project.name,
                        "Implementation-Version": "${version}",
                        "Implementation-Vendor": "JMinor",
                        "Implementation-Vendor-Id": "org.jminor",
                        "Implementation-URL": "http://jminor.org",
                        "Automatic-Module-Name": project.name,
                        "Build-Jdk": org.gradle.internal.jvm.Jvm.current(),
                        "Built-By": System.getProperty("user.name")/*,
                        "Build-Time": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")*/)
            }
        }

        task jarSources(type: Jar, dependsOn: classes) {
            group 'build'
            baseName = artifactName
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task jarJavadoc(type: Jar, dependsOn: javadoc) {
            group 'build'
            baseName = artifactName
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        artifacts {
            archives jarSources
            archives jarJavadoc
        }

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    groupId 'org.jminor'
                    artifactId artifactName

                    from components.java
                    artifact jarSources
                    artifact jarJavadoc
                }
            }
            repositories {
                maven {
                    credentials {
                        username "${artifactoryUsername}"
                        password "${artifactoryPassword}"
                    }

                    if (project.version.endsWith('-SNAPSHOT')) {
                        url "${artifactorySnapshotUrl}"
                    } else {
                        url "${artifactoryReleaseUrl}"
                    }
                }
            }
        }

        sonarqube {
            System.setProperty("sonar.host.url", "${sonarHostUrl}")
            System.setProperty("sonar.login", "${sonarLogin}")
            System.setProperty("sonar.password", "${sonarPassword}")
            properties {
                property "sonar.projectName", project.name
                property "sonar.projectKey", "org.jminor:jminor"
                property "sonar.projectVersion", version
                property "sonar.java.source", "1.8"
                property "sonar.sourceEncoding", "UTF-8"
                property "sonar.exclusions", "**/*module-info.java"
            }
        }
    }
}