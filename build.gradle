plugins {
    id "org.sonarqube" version "2.8"
    id "com.github.ben-manes.versions" version "0.27.0"
    id "com.vanniktech.dependency.graph.generator" version "0.5.0"
}

ext {
    slf4jApiVersion = '1.7.25'
    logbackVersion = '1.2.3'
    h2Version = '1.4.200'
    jsonVersion = '20180130'
    jcalendarVersion = '1.4'
    jcommonVersion = '1.0.24'
    jfreeChartVersion = '1.5.0'
    jettyVersion = '9.4.15.v20190215'
    httpClientVersion = '4.5.10'
    jaxbApiVersion = '2.3.0'
    javaxActivationVersion = '1.2.0'
    junitVersion = '5.6.0'
    //jasperreports
    jasperReportsVersion = '6.11.0'
    commonsLoggingVersion = '1.2'
    commonsDigesterVersion = '2.1'
    commonsCollectionsVersion = '4.4'
    commonsBeanUtilsVersion = '1.9.4'
    jdtCoreCompilerVersion = '4.6.1'

    frameworkModules = subprojects.findAll {
        project -> !project.name.contains("demos") && !project.name.contains("documentation")
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

configure(project.frameworkModules) {
    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'project-report'
    apply plugin: 'com.vanniktech.dependency.graph.generator'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    dependencies {
        api "org.slf4j:slf4j-api:${slf4jApiVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
//        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    jar {
        manifest {
            attributes(
                    "Specification-Title": project.name,
                    "Specification-Version": project.version,
                    "Specification-Vendor": "JMinor",
                    "Implementation-Title": project.name,
                    "Implementation-Version": project.version,
                    "Implementation-Vendor": "JMinor",
                    "Implementation-Vendor-Id": "org.jminor",
                    "Implementation-URL": "http://jminor.org",
                    "Automatic-Module-Name": "org." + project.name.replace('-', '.'),
                    "Build-Jdk": org.gradle.internal.jvm.Jvm.current(),
                    "Built-By": System.getProperty("user.name"),
                    "Build-Date": java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd").format(LocalDate.now()))
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId 'org.jminor.' + project.jdk
                from components.java
            }
        }
        repositories {
            maven {
                credentials {
                    username "${artifactoryUsername}"
                    password "${artifactoryPassword}"
                }

                if (project.version.endsWith('-SNAPSHOT')) {
                    url "${artifactorySnapshotUrl}"
                } else {
                    url "${artifactoryReleaseUrl}"
                }
            }
        }
    }

    sonarqube {
        System.setProperty("sonar.host.url", "${sonarHostUrl}")
        System.setProperty("sonar.login", "${sonarLogin}")
        System.setProperty("sonar.password", "${sonarPassword}")
        properties {
            property "sonar.projectName", "org." + project.name.replace('-', '.')
            property "sonar.projectKey", "org.jminor:jminor"
            property "sonar.projectVersion", project.version
            property "sonar.java.source", "1.8"
            property "sonar.sourceEncoding", "UTF-8"
            property "sonar.exclusions", "**/*TestDomain.java"
        }
    }

    /** Creates a key- and truststore pair used when running server unit tests and demos with remote connection */
    def keystoreRootDir = project.rootDir.toString() + '/framework/server/src/main/security/'
    def keystore = keystoreRootDir + 'jminor_keystore.jks'
    task createServerKeystore {
        doLast {
            def certificate = keystoreRootDir + 'jminor_server.cer'
            def keyToolExecutable = System.getProperty('java.home') + '/bin/keytool'
            ant.genkey(alias: 'JMinorServer', keyalg: 'RSA', keystore: keystore,
                    storepass: 'crappypass', dname: 'CN=Dummy, OU=dummy, O=dummy.org, C=DU', storetype: 'pkcs12')
            exec {
                executable = keyToolExecutable
                args = ['-exportcert', '-keystore', keystore, '-storepass', 'crappypass', '-alias', 'JMinorServer', '-rfc', '-file', certificate]
            }
            def truststore = keystoreRootDir + 'jminor_truststore.jks'
            exec {
                executable = keyToolExecutable
                args = ['-import', '-alias', 'JMinorServer', '-storepass', 'crappypass', '-file', certificate,
                        '-keystore', truststore, '-noprompt', '-storetype', 'pkcs12']
            }
            ant.delete(file: certificate)
        }
    }
    createServerKeystore.onlyIf { !new File(keystore).exists() }

    test {
        useJUnitPlatform()
        systemProperty "jminor.db.type", "h2"
        systemProperty "jminor.db.host", "h2db"
        systemProperty "jminor.db.embedded", "true"
        systemProperty "jminor.db.embeddedInMemory", "true"
        systemProperty "jminor.db.initScript", "src/test/sql/create_h2_db.sql"
        systemProperty "jminor.test.user", "scott:tiger"
    }.dependsOn createServerKeystore
}

task tagRelease() {
    def tagName = 'v' + project.version + '-' + project.jdk
    doLast {
        if (project.version.contains("SNAPSHOT")) {
            throw new GradleException("Can not tag a snapshot realease")
        }
        exec {
            commandLine 'git', 'tag', '-a', tagName, '-m', '"' + tagName + ' release"'
            commandLine 'git', 'push', 'origin', tagName
        }
    }
}