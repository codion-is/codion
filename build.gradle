buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.javamodularity:moduleplugin:1.8.9"
    }
}

plugins {
    id "org.sonarqube" version "3.3"
    id "com.github.ben-manes.versions" version "0.39.0"
    id "com.vanniktech.dependency.graph.generator" version "0.6.0"
    id "com.github.hierynomus.license" version "0.16.1"
}

ext {
    frameworkModules = subprojects.findAll {
        project -> !project.name.contains("demos") && !project.name.contains("documentation")
    }
}

allprojects {
//    apply plugin: "com.github.hierynomus.license"

    license {
        header rootProject.file('LICENSE')
        excludes(["**/*.sql", "**/*.xml"])
        ext {
            year = LocalDate.now().getYear()
        }
    }
}

configure(project.frameworkModules) {
    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'org.javamodularity.moduleplugin'
    apply plugin: 'project-report'
    apply plugin: 'com.vanniktech.dependency.graph.generator'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"//testImplementation instead of testRuntimeOnly due to modules plugin issue
    }

    clean {
        doLast {
            //clean intellij output dir as well
            file('out').deleteDir()
        }
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    ext.moduleName = "is." + project.name.replace('-', '.')

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.deprecation = true
    }

    javadoc {
        options.links 'https://docs.oracle.com/en/java/javase/11/docs/api/'
        failOnError = false
    }

    //https://github.com/java9-modularity/gradle-modules-plugin/issues/165
    modularity.disableEffectiveArgumentsAdjustment()

    jar {
        manifest {
            attributes(
                    "Sealed": "true",
                    "Specification-Title": project.name,
                    "Specification-Version": project.version,
                    "Specification-Vendor": "Codion",
                    "Implementation-Title": project.name,
                    "Implementation-Version": project.version,
                    "Implementation-Vendor": "Codion",
                    "Implementation-Vendor-Id": "is.codion",
                    "Implementation-URL": "https://codion.is",
                    "Automatic-Module-Name": "is." + project.name.replace('-', '.'),
                    "Build-Jdk": org.gradle.internal.jvm.Jvm.current(),
                    "Built-By": System.getProperty("user.name"),
                    "Build-Date": java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd").format(LocalDate.now()))
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId 'is.codion.' + project.targetJdk
                from components.java
            }
        }
        repositories {
            maven {
                credentials {
                    username "${artifactoryUsername}"
                    password "${artifactoryPassword}"
                }
                allowInsecureProtocol = true
                if (project.version.endsWith('-SNAPSHOT')) {
                    url "${artifactorySnapshotUrl}"
                } else {
                    url "${artifactoryReleaseUrl}"
                }
            }
        }
    }

    sonarqube {
        System.setProperty("sonar.host.url", "${sonarHostUrl}")
        System.setProperty("sonar.login", "${sonarLogin}")
        System.setProperty("sonar.password", "${sonarPassword}")
        System.setProperty("sonar.projectVersion", project.version.replace('-SNAPSHOT', ''))
        System.setProperty("sonar.java.source", "11")
        System.setProperty("sonar.sourceEncoding", "UTF-8")
        System.setProperty("sonar.exclusions", "**/*TestDomain.java")
        System.setProperty("sonar.coverage.exclusions", "**/is/codion/framework/model/tests/**," +
                "**/is/codion/framework/domain/entity/test/**," +
                "**/is/codion/swing/framework/ui/test/**")
    }

    /** Creates a key- and truststore pair used when running server unit tests and demos with remote connection */
    task createServerKeystore {
        def keystoreDir = "${rootDir}/framework/server/src/main/security/"
        def keystore = keystoreDir + 'keystore.jks'
        def truststore = keystoreDir + 'truststore.jks'
        def certificate = keystoreDir + 'certificate.cer'
        def keyToolExecutable = System.getProperty('java.home') + '/bin/keytool'

        onlyIf {!file(keystore).exists()}

        doLast {
            exec {
                executable = keyToolExecutable
                args = ['-genkeypair', '-keyalg', 'RSA', '-keystore', keystore, '-storepass', 'crappypass', '-keypass', 'crappypass',
                        '-dname', 'CN=Dummy, OU=dummy, O=dummy.org, C=DU',
                        '-alias', 'Alias', '-storetype', 'pkcs12', '-ext', 'SAN=dns:localhost']
            }
            exec {
                executable = keyToolExecutable
                args = ['-exportcert', '-keystore', keystore, '-storepass', 'crappypass',
                        '-alias', 'Alias', '-rfc', '-file', certificate]
            }
            exec {
                executable = keyToolExecutable
                args = ['-import', '-alias', 'Alias', '-storepass', 'crappypass', '-file', certificate,
                        '-keystore', truststore, '-noprompt', '-storetype', 'pkcs12']
            }
            ant.delete(file: certificate)
        }
    }

    jacocoTestReport {
        reports {
            xml.getRequired().set(true)
            html.getRequired().set(true)
            csv.getRequired().set(true)
        }
        dependsOn test
    }

    test {
        moduleOptions {
            addExports = [
                    'org.junit.platform.commons/org.junit.platform.commons.util': 'ALL-UNNAMED',
                    'org.junit.platform.commons/org.junit.platform.commons.logging': 'ALL-UNNAMED'
            ]
        }
        useJUnitPlatform()
        systemProperty "codion.db.url", "jdbc:h2:mem:h2db"
        systemProperty "codion.db.initScripts", "src/test/sql/create_h2_db.sql"
        systemProperty "codion.test.user", "scott:tiger"

        dependsOn createServerKeystore
        finalizedBy jacocoTestReport
    }
}

task tagRelease {
    doLast {
        if (project.version.contains("SNAPSHOT")) {
            throw new GradleException("Thou shalt not tag a snapshot release")
        }
        def tagName = 'v' + project.version + '-' + project.targetJdk
        exec { commandLine 'git', 'push' }
        exec { commandLine 'git', 'tag', '-a', tagName, '-m', '"' + tagName + ' release"' }
        exec { commandLine 'git', 'push', 'origin', tagName }
    }
}