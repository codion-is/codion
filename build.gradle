plugins {
    id "org.sonarqube" version "3.0"
    id "com.github.ben-manes.versions" version "0.29.0"
    id "com.vanniktech.dependency.graph.generator" version "0.5.0"
    id "com.github.hierynomus.license" version "0.15.0"
}

ext {
    frameworkModules = subprojects.findAll {
        project -> !project.name.contains("demos") && !project.name.contains("documentation")
    }
}

allprojects {
    repositories {
        jcenter()
    }

//    apply plugin: "com.github.hierynomus.license"

    license {
        header rootProject.file('LICENSE')
        excludes(["**/*.sql", "**/*.xml"])
        ext {
            year = LocalDate.now().getYear()
        }
    }
}

configure(project.frameworkModules) {
    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'project-report'
    apply plugin: 'com.vanniktech.dependency.graph.generator'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    }

    clean {
        doLast {
            //clean intellij output dir as well
            file('out').deleteDir()
        }
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
//        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    javadoc {
        options.links 'https://docs.oracle.com/javase/8/docs/api/'
    }

    jar {
        manifest {
            attributes(
                    "Sealed": "true",
                    "Specification-Title": project.name,
                    "Specification-Version": project.version,
                    "Specification-Vendor": "Codion",
                    "Implementation-Title": project.name,
                    "Implementation-Version": project.version,
                    "Implementation-Vendor": "Codion",
                    "Implementation-Vendor-Id": "is.codion",
                    "Implementation-URL": "https://codion.is",
                    "Automatic-Module-Name": "is." + project.name.replace('-', '.'),
                    "Build-Jdk": org.gradle.internal.jvm.Jvm.current(),
                    "Built-By": System.getProperty("user.name"),
                    "Build-Date": java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd").format(LocalDate.now()))
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId 'is.codion.' + project.targetJdk
                from components.java
            }
        }
        repositories {
            maven {
                credentials {
                    username "${artifactoryUsername}"
                    password "${artifactoryPassword}"
                }
                if (project.version.endsWith('-SNAPSHOT')) {
                    url "${artifactorySnapshotUrl}"
                } else {
                    url "${artifactoryReleaseUrl}"
                }
            }
        }
    }

    sonarqube {
        System.setProperty("sonar.host.url", "${sonarHostUrl}")
        System.setProperty("sonar.login", "${sonarLogin}")
        System.setProperty("sonar.password", "${sonarPassword}")
        System.setProperty("sonar.projectVersion", project.version.replace('-SNAPSHOT', ''))
        System.setProperty("sonar.java.source", "8")
        System.setProperty("sonar.sourceEncoding", "UTF-8")
        System.setProperty("sonar.exclusions", "**/*TestDomain.java")
    }

    /** Creates a key- and truststore pair used when running server unit tests and demos with remote connection */
    task createServerKeystore {
        def keystoreDir = "${rootDir}/framework/server/src/main/security/"
        def keystore = keystoreDir + 'keystore.jks'
        def truststore = keystoreDir + 'truststore.jks'
        def certificate = keystoreDir + 'certificate.cer'
        def keyToolExecutable = System.getProperty('java.home') + '/bin/keytool'

        onlyIf {!file(keystore).exists()}

        doLast {
            ant.genkey(alias: 'Alias', keyalg: 'RSA', keystore: keystore,
                    storepass: 'crappypass', dname: 'CN=Dummy, OU=dummy, O=dummy.org, C=DU', storetype: 'pkcs12')
            exec {
                executable = keyToolExecutable
                args = ['-exportcert', '-keystore', keystore, '-storepass', 'crappypass',
                        '-alias', 'Alias', '-rfc', '-file', certificate]
            }
            exec {
                executable = keyToolExecutable
                args = ['-import', '-alias', 'Alias', '-storepass', 'crappypass', '-file', certificate,
                        '-keystore', truststore, '-noprompt', '-storetype', 'pkcs12']
            }
            ant.delete(file: certificate)
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = false
            csv.enabled = false
        }
        dependsOn test
    }

    test {
        useJUnitPlatform()
        systemProperty "codion.db.url", "jdbc:h2:mem:h2db"
        systemProperty "codion.db.initScripts", "src/test/sql/create_h2_db.sql"
        systemProperty "codion.test.user", "scott:tiger"

        dependsOn createServerKeystore
        finalizedBy jacocoTestReport
    }
}

task tagRelease {
    doLast {
        if (project.version.contains("SNAPSHOT")) {
            throw new GradleException("Thou shalt not tag a snapshot release")
        }
        def tagName = 'v' + project.version + '-' + project.targetJdk
        exec { commandLine 'git', 'push' }
        exec { commandLine 'git', 'tag', '-a', tagName, '-m', '"' + tagName + ' release"' }
        exec { commandLine 'git', 'push', 'origin', tagName }
    }
}