import org.javamodularity.moduleplugin.tasks.ModularJavaExec

apply plugin: 'application'

configurations {
    serverRuntime {
        extendsFrom compile
    }
}

dependencies {
    api project(':jminor-common-core')
    api project(':jminor-common-db')
    api project(':jminor-common-remote')

    api project(':jminor-framework-db-core')
    api project(':jminor-framework-db-remote')
    api project(':jminor-framework-db-local')

    testRuntime "com.h2database:h2:${h2Version}"

    serverRuntime project(':jminor-framework-servlet')
    serverRuntime project(':jminor-framework-plugins-jasperreports')
    serverRuntime project(':jminor-framework-plugins-hikari-pool')
    serverRuntime project(':jminor-framework-plugins-logback-proxy')

    serverRuntime project(path: ':jminor-demos-empdept', configuration: 'domain')
    serverRuntime project(path: ':jminor-demos-chinook', configuration: 'domain')
    serverRuntime project(path: ':jminor-demos-petstore', configuration: 'domain')
    serverRuntime project(path: ':jminor-demos-schemabrowser', configuration: 'domain')
    serverRuntime project(path: ':jminor-demos-world', configuration: 'domain')

    serverRuntime "com.h2database:h2:${h2Version}"
}

mainClassName = "$moduleName/org.jminor.framework.server.DefaultEntityConnectionServer"

task runServer(type: ModularJavaExec, dependsOn: createServerKeystore) {
    group = 'run'
    classpath = configurations.serverRuntime
    main = mainClassName
    jvmArgs = ['-Xmx256m', '--add-modules', 'org.jminor.framework.servlet,org.jminor.framework.plugins.jasperreports,java.xml.bind']
    systemProperties = [
            'jminor.db.type'                            : 'h2',
            'jminor.db.host'                            : 'h2db',
            'jminor.db.embedded'                        : 'true',
            'jminor.db.embeddedInMemory'                : 'true',
            'jminor.db.initScript'                      : '../../demos/empdept/src/main/sql/create_schema.sql,../../demos/chinook/src/main/sql/create_schema.sql,../../demos/petstore/src/main/sql/create_schema.sql,../../demos/world/src/main/sql/create_schema.sql',
            'jminor.server.pooling.startupPoolUsers'    : 'scott:tiger',
            'jminor.server.port'                        : '2222',
            'jminor.server.admin.port'                  : '2223',
            'jminor.server.admin.user'                  : 'scott:tiger',
            'jminor.server.http.secure'                 : 'false',
            'jminor.server.pooling.poolProviderClass'   : 'org.jminor.framework.plugins.hikari.pool.HikariConnectionPoolProvider',
            'jminor.server.auxiliaryServerClassNames'   : 'org.jminor.framework.servlet.EntityServletServer',
            'jminor.server.domain.classes'              : 'org.jminor.framework.demos.empdept.domain.EmpDept,org.jminor.framework.demos.chinook.domain.impl.ChinookImpl,org.jminor.framework.demos.petstore.domain.Petstore,org.jminor.framework.demos.schemabrowser.domain.SchemaBrowser,org.jminor.framework.demos.world.domain.World',
            'jminor.server.serializationFilterWhitelist': 'src/main/security/serialization-whitelist.txt',
            'jminor.server.serializationFilterDryRun'   : 'false',
            'javax.net.ssl.keyStore'                    : 'src/main/security/jminor_keystore.jks',
            'java.security.policy'                      : 'src/main/security/all_permissions.policy',
            'javax.net.ssl.keyStorePassword'            : 'crappypass',
            'java.rmi.server.hostname'                  : 'localhost',
            'logback.configurationFile'                 : 'src/main/config/logback.xml'
    ]
}

distTar {
    dependsOn(':jminor-demos-empdept:jarDomain')
    dependsOn(':jminor-demos-chinook:jarDomain')
    dependsOn(':jminor-demos-petstore:jarDomain')
    dependsOn(':jminor-demos-schemabrowser:jarDomain')
    dependsOn(':jminor-demos-world:jarDomain')
}

distZip {
    dependsOn(':jminor-demos-empdept:jarDomain')
    dependsOn(':jminor-demos-chinook:jarDomain')
    dependsOn(':jminor-demos-petstore:jarDomain')
    dependsOn(':jminor-demos-schemabrowser:jarDomain')
    dependsOn(':jminor-demos-world:jarDomain')
}

startScripts {
    classpath = configurations.serverRuntime
}

applicationDistribution.from(configurations.serverRuntime.files) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    into("lib")
}
applicationDistribution.from(files(
        'src/main/security/jminor_keystore.jks',
        'src/main/security/jminor_truststore.jks',
        'src/main/security/all_permissions.policy',
        'src/main/security/serialization-whitelist.txt')) {
    into("config")
}
applicationDistribution.from(fileTree(dir: 'src/main/config', include: '**/*')) {
    into("config")
}
applicationDistribution.from(files('../../demos/empdept/src/main/sql/create_schema.sql')) {
    into("config/empdept")
}
applicationDistribution.from(files('../../demos/chinook/src/main/sql/create_schema.sql')) {
    into("config/chinook")
}
applicationDistribution.from(files('../../demos/petstore/src/main/sql/create_schema.sql')) {
    into("config/petstore")
}
applicationDistribution.from(files('../../demos/world/src/main/sql/create_schema.sql')) {
    into("config/world")
}
applicationDistribution.from(files('../../demos/empdept/build/classes/reports/empdept_employees.jasper')) {
    into("reports")
}
applicationDistribution.from(files('../../demos/chinook/build/classes/reports/customer_report.jasper')) {
    into("reports")
}
applicationDefaultJvmArgs = [
        '-Xmx256m', '--add-modules', 'org.jminor.framework.servlet,java.xml.bind',
        '-Djava.security.policy=../config/all_permissions.policy',
        '-Dlogback.configurationFile=../config/logback.xml',
        '-Djminor.configurationFile=../config/h2_embedded.config'
]