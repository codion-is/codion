import org.javamodularity.moduleplugin.tasks.ModularJavaExec

apply plugin: 'application'

configurations {
    serverRuntime {
        extendsFrom compile
    }
}

dependencies {
    api project(':codion-common-core')
    api project(':codion-common-db')
    api project(':codion-common-rmi')

    api project(':codion-framework-domain')
    api project(':codion-framework-db-core')
    api project(':codion-framework-db-local')
    api project(':codion-framework-db-rmi')

    implementation "org.slf4j:slf4j-api:${slf4jApiVersion}"

    testRuntimeOnly project(':codion-plugin-hikari-pool')
    testRuntimeOnly project(':codion-dbms-h2database')
    testRuntimeOnly "com.h2database:h2:${h2Version}"

    serverRuntime project(':codion-framework-server')
    serverRuntime project(':codion-framework-servlet')
    serverRuntime project(':codion-plugin-jasperreports')
    serverRuntime project(':codion-plugin-hikari-pool')
    serverRuntime project(':codion-plugin-logback-proxy')

//    runtimeOnly 'net.sourceforge.pro-grade:pro-grade:1.1.2-SNAPSHOT'

    serverRuntime project(path: ':codion-demos-empdept', configuration: 'domain')
    serverRuntime project(path: ':codion-demos-chinook', configuration: 'domain')
    serverRuntime project(path: ':codion-demos-petclinic', configuration: 'domain')
    serverRuntime project(path: ':codion-demos-petstore', configuration: 'domain')
    serverRuntime project(path: ':codion-demos-schemabrowser', configuration: 'domain')
    serverRuntime project(path: ':codion-demos-world', configuration: 'domain')

    serverRuntime project(':codion-dbms-h2database')
    serverRuntime "com.h2database:h2:${h2Version}"
}

mainClassName = "$moduleName/org.jminor.framework.server.EntityServer"

distTar {
    dependsOn(':jminor-demos-empdept:domainJar')
    dependsOn(':jminor-demos-chinook:domainJar')
    dependsOn(':jminor-demos-petstore:domainJar')
    dependsOn(':jminor-demos-schemabrowser:domainJar')
    dependsOn(':jminor-demos-world:domainJar')
}

distZip {
    dependsOn(':jminor-demos-empdept:domainJar')
    dependsOn(':jminor-demos-chinook:domainJar')
    dependsOn(':jminor-demos-petstore:domainJar')
    dependsOn(':jminor-demos-schemabrowser:domainJar')
    dependsOn(':jminor-demos-world:domainJar')
}

startScripts {
    classpath = configurations.serverRuntime
}
distributions {
    main {
        contents {
            from(configurations.serverRuntime) {
                duplicatesStrategy = DuplicatesStrategy.EXCLUDE
                into("lib")
            }
            from(files(
                    'src/main/security/jminor_keystore.jks',
                    'src/main/security/jminor_truststore.jks',
                    'src/main/security/jminor_server.policy',
                    'src/main/security/all_permissions.policy',
                    'src/main/security/default.policy',
                    'src/main/security/serialization-whitelist.txt')) {
                into("config")
            }
            from(fileTree(dir: 'src/main/config', include: '**/*')) {
                into("config")
            }
            from(files('../../demos/empdept/src/main/sql/create_schema.sql')) {
                into("config/empdept")
            }
            from(files('../../demos/chinook/src/main/sql/create_schema.sql')) {
                into("config/chinook")
            }
            from(files('../../demos/petstore/src/main/sql/create_schema.sql')) {
                into("config/petstore")
            }
            from(files('../../demos/world/src/main/sql/create_schema.sql')) {
                into("config/world")
            }
        }
    }
}
applicationDefaultJvmArgs = [
        '-Xmx256m', '--add-modules', 'org.jminor.plugin.jasperreports',
        '-Djminor.configurationFile=../config/h2_embedded.config',
        '-Dlogback.configurationFile=../config/logback.xml',
        '-Djava.security.policy=../config/jminor_server.policy'
]

def applicationGenerateSecurityPolicyJvmArgs = [
        '-Xmx256m', '--add-modules', 'org.jminor.plugin.jasperreports',
        '-Djminor.configurationFile=../config/h2_embedded.config',
        '-Dlogback.configurationFile=../config/logback.xml',
        '-Djava.security.manager=net.sourceforge.prograde.sm.PolicyFileGeneratorJSM',
        '-Djava.security.policy=../config/default.policy',
        '-Dprograde.generated.policy=../config/generated.policy'
]

task runServer(type: ModularJavaExec, dependsOn: createServerKeystore) {
    group = 'run'
    classpath = configurations.serverRuntime
    main = mainClassName
    maxHeapSize = '256m'
    jvmArgs = ['--add-modules', 'org.jminor.plugin.jasperreports']
    systemProperties = [
            'jminor.db.url'                             : 'jdbc:h2:mem:h2db',
            'jminor.db.initScript'                      : '../../demos/empdept/src/main/sql/create_schema.sql,../../demos/chinook/src/main/sql/create_schema.sql,../../demos/petclinic/src/main/sql/create_schema.sql,../../demos/petstore/src/main/sql/create_schema.sql,../../demos/world/src/main/sql/create_schema.sql',
            'jminor.server.pooling.startupPoolUsers'    : 'scott:tiger',
            'jminor.server.port'                        : '2222',
            'jminor.server.admin.port'                  : '2223',
            'jminor.server.admin.user'                  : 'scott:tiger',
            'jminor.server.http.secure'                 : 'false',
            'jminor.server.pooling.poolProviderClass'   : 'org.jminor.plugin.hikari.pool.HikariConnectionPoolProvider',
            'jminor.server.auxiliaryServerProviderClassNames'   : 'org.jminor.framework.servlet.EntityServletServerProvider',
            'jminor.server.domain.classes'              : 'org.jminor.framework.demos.empdept.domain.EmpDept,org.jminor.framework.demos.chinook.domain.impl.ChinookImpl,org.jminor.framework.demos.petclinic.domain.impl.ClinicImpl,org.jminor.framework.demos.petstore.domain.Petstore,org.jminor.framework.demos.schemabrowser.domain.SchemaBrowser,org.jminor.framework.demos.world.domain.World',
            'jminor.server.serializationFilterWhitelist': 'src/main/security/serialization-whitelist.txt',
            'jminor.server.serializationFilterDryRun'   : 'false',
            'jminor.server.loginProxyClasses'           : 'org.jminor.framework.demos.chinook.server.ChinookLoginProxy',
            'javax.net.ssl.keyStore'                    : 'src/main/security/jminor_keystore.jks',
            'javax.net.ssl.keyStorePassword'            : 'crappypass',
            'java.rmi.server.hostname'                  : 'localhost',
            'logback.configurationFile'                 : 'src/main/config/logback.xml',
            'java.security.policy'                      : 'src/main/security/jminor_server.policy'
    ]
}