import org.javamodularity.moduleplugin.tasks.ModularCreateStartScripts
import org.javamodularity.moduleplugin.tasks.ModularJavaExec

plugins {
    id 'org.openjfx.javafxplugin' version '0.0.8'
}

apply from: '../demos.gradle'

dependencies {
    implementation project(':codion-common-rmi')

    implementation project(':codion-framework-db-local')

    implementation project(':codion-swing-common-tools')
    implementation project(':codion-swing-common-tools-ui')
    implementation project(':codion-swing-framework-ui')
    implementation project(':codion-swing-framework-tools')

    implementation project(':codion-javafx-framework')

    implementation project(':codion-plugin-imagepanel')
    implementation project(':codion-plugin-jasperreports')
    implementation project(':codion-plugin-ikonli-foundation')

    runtimeOnly project(':codion-plugin-logback-proxy')

    implementation project(':codion-framework-db-http')
    implementation project(':codion-framework-db-rmi')

    testImplementation project(':codion-framework-domain-test')

    implementation("net.sf.jasperreports:jasperreports:${jasperReportsVersion}") {
        transitive = false
    }

    runtimeOnly "commons-logging:commons-logging:${commonsLoggingVersion}"
    runtimeOnly "commons-digester:commons-digester:${commonsDigesterVersion}"
    runtimeOnly "org.apache.commons:commons-collections4:${commonsCollectionsVersion}"
    runtimeOnly "commons-beanutils:commons-beanutils:${commonsBeanUtilsVersion}"
    runtimeOnly "org.eclipse.jdt.core.compiler:ecj:${jdtCoreCompilerVersion}"

    runtimeOnly project(':codion-dbms-h2database')
    runtimeOnly "com.h2database:h2:${h2Version}"
}

ext {
    mainClass = "$moduleName/dev.codion.framework.demos.chinook.ui.ChinookAppPanel"
    loadTestMainClass = "$moduleName/dev.codion.framework.demos.chinook.testing.ChinookLoadTest"
    testAddModules = ['dev.codion.framework.db.test']
    testAddReads = ['dev.codion.framework.demos.chinook': 'dev.codion.framework.db.test']
}

javafx {
    version = '11'
    modules = ['javafx.base', 'javafx.graphics', 'javafx.controls', 'javafx.swing']
}

compileTestJava {
    moduleOptions {
        addModules = testAddModules
        addReads = testAddReads
    }
}

test {
    moduleOptions {
        addModules = testAddModules
        addReads = testAddReads
    }
    systemProperty "jminor.db.initScript", "src/main/sql/create_schema.sql"
    systemProperty "jminor.client.domainClass", "dev.codion.framework.demos.chinook.domain.impl.ChinookImpl"
}

task buildReports(dependsOn: 'compileJava') {
    group 'build'
    def jasperSourceDir = file('src/main/reports')
    def jasperTargetDir = file(sourceSets.main.output.resourcesDir.toString() + '/dev/codion/framework/demos/chinook/domain')
    inputs.dir jasperSourceDir
    outputs.dir jasperTargetDir
    doLast {
        ant {
            taskdef(name: 'jrc', classname: 'net.sf.jasperreports.ant.JRAntCompileTask', classpath: configurations.runtimeClasspath.asPath)
            jasperTargetDir.mkdirs()
            jrc(srcdir: jasperSourceDir, destdir: jasperTargetDir) {
                classpath(path: sourceSets.main.output.classesDirs)
                include(name: '**/*.jrxml')
            }
        }
    }
}
classes.finalizedBy buildReports

task runClientLocal(type: ModularJavaExec) {
    group 'run'
    main = mainClass
    systemProperties = [
            'jminor.client.connectionType': 'local',
            'jminor.db.url'               : 'jdbc:h2:mem:h2db',
            'jminor.db.initScript'        : 'src/main/sql/create_schema.sql',
            'logback.configurationFile'   : 'src/main/resources/logback.xml'
    ]
}

task runClientRMI(type: ModularJavaExec) {
    group 'run'
    main = mainClass
    systemProperties = [
            'jminor.client.connectionType'    : 'remote',
            'jminor.server.hostname'          : 'localhost',
            'javax.net.ssl.trustStore'        : '../../framework/server/src/main/security/jminor_truststore.jks',
            'javax.net.ssl.trustStorePassword': 'crappypass',
            'logback.configurationFile'       : 'src/main/config/logback.xml'
    ]
}

task runClientHttp(type: ModularJavaExec) {
    group 'run'
    main = mainClass
    systemProperties = [
            'jminor.client.connectionType': 'http',
            'jminor.client.http.secure'   : 'false',
            'jminor.client.http.hostname' : 'localhost',
            'logback.configurationFile'   : 'src/main/resources/logback.xml'
    ]
}

task runLoadTestRMI(type: ModularJavaExec) {
    group 'run'
    main = loadTestMainClass
    systemProperties = [
            'jminor.client.connectionType'    : 'remote',
            'jminor.server.hostname'          : 'localhost',
            'javax.net.ssl.trustStore'        : '../../framework/server/src/main/security/jminor_truststore.jks',
            'javax.net.ssl.trustStorePassword': 'crappypass',
            'logback.configurationFile'       : 'src/main/config/logback.xml'
    ]
}

task runLoadTestHttp(type: ModularJavaExec) {
    group 'run'
    main = loadTestMainClass
    systemProperties = [
            'jminor.client.connectionType': 'http',
            'jminor.client.http.secure'   : 'false',
            'jminor.client.http.hostname' : 'localhost',
            'logback.configurationFile'   : 'src/main/resources/logback.xml'
    ]
}

task clientLocalScript(type: ModularCreateStartScripts) {
    runTask = tasks.runClientLocal
    applicationName = project.name + '-local'
    defaultJvmOpts = [
            '-Djminor.client.connectionType=local',
            '-Djminor.db.url=jdbc:h2:mem:h2db',
            '-Djminor.db.initScript=../config/create_schema.sql',
            '-Dlogback.configurationFile=../config/logback.xml'
    ]
}

task clientRMIScript(type: ModularCreateStartScripts) {
    runTask = tasks.runClientRMI
    applicationName = project.name + '-remote'
    defaultJvmOpts = [
            '-Djminor.client.connectionType=remote',
            '-Djminor.server.hostname=localhost',
            '-Djavax.net.ssl.trustStore=../config/jminor_truststore.jks',
            '-Djavax.net.ssl.trustStorePassword=crappypass',
            '-Dlogback.configurationFile=../config/logback.xml'
    ]
}

task clientHttpScript(type: ModularCreateStartScripts) {
    runTask = tasks.runClientHttp
    applicationName = project.name + '-http'
    defaultJvmOpts = [
            '-Djminor.client.connectionType=http',
            '-Djminor.client.http.secure=false',
            '-Djminor.client.http.hostname=localhost',
            '-Dlogback.configurationFile=../config/logback.xml'
    ]
}

task loadTestRMIScript(type: ModularCreateStartScripts) {
    runTask = tasks.runLoadTestRMI
    applicationName = project.name + '-loadtest-remote'
    defaultJvmOpts = [
            '-Djminor.client.connectionType=remote',
            '-Djminor.server.hostname=localhost',
            '-Djavax.net.ssl.trustStore=../config/jminor_truststore.jks',
            '-Djavax.net.ssl.trustStorePassword=crappypass',
            '-Dlogback.configurationFile=../config/logback.xml'
    ]
}

task loadTestHttpScript(type: ModularCreateStartScripts) {
    runTask = tasks.runLoadTestHttp
    applicationName = project.name + '-loadtest-http'
    defaultJvmOpts = [
            '-Djminor.client.connectionType=http',
            '-Djminor.client.http.secure=false',
            '-Djminor.client.http.hostname=localhost',
            '-Dlogback.configurationFile=../config/logback.xml'
    ]
}

applicationDistribution.into('config') {
    from(files('src/main/sql/create_schema.sql'))
    from(files('src/main/resources/logback.xml'))
    from(files('../../framework/server/src/main/security/jminor_truststore.jks'))
}

applicationDistribution.into('bin') {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(clientLocalScript)
    from(clientRMIScript)
    from(clientHttpScript)
    from(loadTestHttpScript)
    from(loadTestRMIScript)
}