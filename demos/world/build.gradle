plugins {
    id "org.gradlex.extra-java-module-info"
    id "io.github.f-cramer.jasperreports"
}

apply from: "../demos.gradle"

dependencies {
    implementation project(":codion-swing-framework-ui")
    implementation project(":codion-framework-json-domain")
    implementation project(":codion-plugin-jasperreports")

    implementation(libs.jfreechart)
    implementation(libs.json)
    implementation "org.jxmapviewer:jxmapviewer2:2.8"
    implementation(libs.ikonli.foundation.pack)

    testImplementation project(":codion-framework-domain-test")
    testImplementation project(":codion-swing-framework-ui-test")
    testImplementation project(":codion-framework-db-local")

    runtimeOnly project(":codion-plugin-logback-proxy")

    runtimeOnly project(":codion-framework-db-local")
    runtimeOnly project(":codion-framework-db-rmi")
    runtimeOnly project(":codion-framework-db-http")

    implementation(libs.flatlaf.intellij.themes)

    compileOnly(libs.jasperreports.jdt) {
        exclude group: "net.sf.jasperreports"
    }

    runtimeOnly project(":codion-dbms-h2")
    runtimeOnly(libs.h2)
}

apply from: "../../plugins/jasperreports/extra-module-info-jasperreports.gradle"

jasperreports {
    classpath.from(
        project.sourceSets.main.java.classesDirectory,
        configurations.named(project.sourceSets.main.compileClasspathConfigurationName)
    )
}

sourceSets.main.resources.srcDir(compileAllReports)

test {
    systemProperty "codion.db.initScripts", "src/main/sql/create_schema.sql"
    systemProperty "codion.client.domainType", "World"
}

runClientLocal {
    mainClass.set("is.codion.framework.demos.world.ui.WorldAppPanel")
}

runClientRMI {
    mainClass.set("is.codion.framework.demos.world.ui.WorldAppPanel")
}

runClientHttp {
    mainClass.set("is.codion.framework.demos.world.ui.WorldAppPanel")
}