apply from: '../demos.gradle'

dependencies {
    implementation project(':codion-swing-framework-ui')
    implementation project(':codion-plugin-jackson-json')
    implementation project(':codion-plugin-jasperreports')

    implementation (libs.jfreechart)
    implementation 'org.jxmapviewer:jxmapviewer2:2.6'
    implementation (libs.json)

    testImplementation project(':codion-framework-domain-test')
    testImplementation project(':codion-swing-framework-ui-test')

    runtimeOnly project(':codion-plugin-logback-proxy')

    runtimeOnly project(':codion-framework-db-local')
    runtimeOnly project(':codion-framework-db-rmi')
    runtimeOnly project(':codion-framework-db-http')

    implementation (libs.flatlaf)
    implementation (libs.flatlaf.intellij.themes)

    implementation((libs.jasperreports)) {
        transitive = false
    }

    runtimeOnly (libs.commons.logging)
    runtimeOnly (libs.commons.digester)
    runtimeOnly (libs.commons.collections4)
    runtimeOnly (libs.commons.beanutils)
    runtimeOnly (libs.jdt.core.compiler)

    runtimeOnly project(':codion-dbms-h2database')
    runtimeOnly (libs.h2)
}

ext.execMainClass = 'is.codion.framework.demos.world.ui.WorldAppPanel'

task buildReports(dependsOn: 'compileJava') {
    group 'build'
    // otherwise this task fails in a clean project clone, since the codion jar files
    // which are required on the report compile classpath have not been created yet
    dependsOn configurations.runtimeClasspath
    def jasperSourceDir = file('src/main/reports')
    def jasperTargetDir = file(sourceSets.main.output.resourcesDir.toString() + '/is/codion/framework/demos/world/model')
    inputs.dir jasperSourceDir
    outputs.dir jasperTargetDir
    doLast {
        ant {
            lifecycleLogLevel = "INFO"
            taskdef(name: 'jrc', classname: 'net.sf.jasperreports.ant.JRAntCompileTask', classpath: configurations.runtimeClasspath.asPath)
            jasperTargetDir.mkdirs()
            jrc(srcdir: jasperSourceDir, destdir: jasperTargetDir) {
                classpath(path: sourceSets.main.output.classesDirs.asPath)
                include(name: '**/*.jrxml')
            }
        }
    }
}
classes.finalizedBy buildReports

compileTestJava.dependsOn buildReports

test {
    dependsOn buildReports
    systemProperty "codion.db.initScripts", "src/main/sql/create_schema.sql"
    systemProperty "codion.client.domainClass", "is.codion.framework.demos.world.domain.WorldImpl"
}

domainJar {
    dependsOn buildReports
}

jar {
    dependsOn buildReports
}

startScripts {
    mainClass.set(execMainClass)
}

clientRMIScript {
    mainClass.set(execMainClass)
}

clientHttpScript {
    mainClass.set(execMainClass)
}

runClientLocal {
    mainClass.set(execMainClass)
}

runClientRMI {
    mainClass.set(execMainClass)
}

runClientHttp {
    mainClass.set(execMainClass)
}