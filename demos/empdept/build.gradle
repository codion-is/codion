plugins {
    id 'org.openjfx.javafxplugin' version '0.0.14'
    id 'org.gradlex.extra-java-module-info'
}

apply from: '../demos.gradle'

apply plugin: BuildReportsPlugin

dependencies {
    implementation project(':codion-framework-db-local')
    implementation project(':codion-framework-db-rmi')
    implementation project(':codion-framework-db-http')
    implementation project(':codion-framework-domain-test')
    implementation project(':codion-framework-server')
    implementation project(':codion-framework-servlet')

    implementation project(':codion-swing-common-model-tools')
    implementation project(':codion-swing-common-ui-tools')
    implementation project(':codion-swing-framework-ui')
    implementation project(':codion-swing-framework-model-tools')

    implementation project(':codion-javafx-framework')

    implementation project(':codion-plugin-jasperreports')
    implementation project(':codion-framework-json-domain')

    testImplementation project(':codion-swing-framework-ui-test')

    implementation(libs.flatlaf.intellij.themes)

    runtimeOnly project(':codion-plugin-logback-proxy')

    implementation(libs.jasperreports) {
        transitive = false
    }

    implementation(libs.commons.logging)
    implementation(libs.commons.digester) {
        transitive = false
    }
    implementation(libs.commons.collections4)
    implementation(libs.commons.beanutils) {
        transitive = false
    }
    implementation(libs.jdt.core.compiler)

    runtimeOnly project(':codion-dbms-h2database')
    runtimeOnly(libs.h2)
}

apply from: "../../framework/servlet/extra-module-info-javalin.gradle"
apply from: "../../plugins/jasperreports/extra-module-info-jasperreports.gradle"

javafx {
    version = '18'
    modules = ['javafx.base', 'javafx.graphics', 'javafx.controls', 'javafx.swing']
}

compileTestJava {
    options.compilerArgs = [
            '--add-modules', 'is.codion.swing.framework.ui.test',
            '--add-reads', "$moduleName=is.codion.swing.framework.ui.test",
    ]
}

buildReports {
    sourceDir = file('src/main/reports')
    targetDir = file(sourceSets.main.output.resourcesDir.toString() + '/is/codion/framework/demos/empdept/domain')
}

test {
    systemProperty "codion.db.initScripts", "src/main/sql/create_schema.sql"
    systemProperty "codion.client.domainClass", "is.codion.framework.demos.empdept.domain.EmpDept"
    jvmArgs = [
            '--add-reads', "$moduleName=is.codion.swing.framework.ui.test",
            '--add-exports', "$moduleName/is.codion.framework.demos.empdept.ui=is.codion.swing.framework.ui,is.codion.swing.framework.ui.test"
    ]
}

runClientLocal {
    mainClass.set("is.codion.framework.demos.empdept.ui.EmpDeptAppPanel")
}

tasks.register('runClientLocalFX', JavaExec) {
    group 'application'
    mainClass.set('is.codion.framework.demos.empdept.javafx.EmpDeptFX')
    classpath = sourceSets.main.runtimeClasspath
    systemProperties = [
            'codion.client.connectionType': 'local',
            'codion.db.url'               : 'jdbc:h2:mem:h2db',
            'codion.db.initScripts'       : 'src/main/sql/create_schema.sql'
    ]
}

runClientRMI {
    mainClass.set("is.codion.framework.demos.empdept.ui.EmpDeptAppPanel")
}

runClientHttp {
    mainClass.set("is.codion.framework.demos.empdept.ui.EmpDeptAppPanel")
}

runLoadTestRMI {
    mainClass.set("is.codion.framework.demos.empdept.testing.EmpDeptLoadTest")
}

runLoadTestHttp {
    mainClass.set("is.codion.framework.demos.empdept.testing.EmpDeptLoadTest")
}