import org.javamodularity.moduleplugin.tasks.ModularCreateStartScripts
import org.javamodularity.moduleplugin.tasks.ModularJavaExec

apply from: '../demos.gradle'

dependencies {
    implementation project(':codion-swing-common-tools')
    implementation project(':codion-swing-common-tools-ui')
    implementation project(':codion-swing-framework-ui')
    implementation project(':codion-swing-framework-tools')

    runtimeOnly project(':codion-plugin-logback-proxy')

    runtimeOnly project(':codion-framework-db-local')
    runtimeOnly project(':codion-framework-db-rmi')
    runtimeOnly project(':codion-framework-db-http')

    testImplementation project(':codion-framework-domain-test')
    testImplementation project(':codion-swing-framework-ui-test')

    runtimeOnly project(':codion-dbms-h2database')
    runtimeOnly(libs.h2)
}

ext {
    execMainClass = "is.codion.framework.demos.petstore.ui.PetstoreAppPanel"
    execLoadTestMainClass = "is.codion.framework.demos.petstore.testing.PetstoreLoadTest"
    testAddModules = ['is.codion.framework.domain.test']
    testAddReads = ['is.codion.framework.demos.petstore': 'is.codion.framework.domain.test']
    testAddExports = [
            'is.codion.framework.demos.petstore/is.codion.framework.demos.petstore.domain': 'is.codion.framework.db.local',
            'org.junit.platform.commons/org.junit.platform.commons.util': 'ALL-UNNAMED',
            'org.junit.platform.commons/org.junit.platform.commons.logging': 'ALL-UNNAMED'
    ]
}

compileTestJava {
    moduleOptions {
        addModules = testAddModules
        addReads = testAddReads
    }
}

test {
    moduleOptions {
        addModules = testAddModules
        addReads = testAddReads
        addExports = testAddExports
    }
    systemProperty "codion.db.initScripts", "src/main/sql/create_schema.sql"
    systemProperty "codion.client.domainClass", "is.codion.framework.demos.petstore.domain.Petstore"
}

application {
    mainClass.set(execMainClass)
    mainModule.set(moduleName)
}

tasks.register('runClientLocal', ModularJavaExec) {
    group 'application'
    mainClass.set(execMainClass)
    mainModule.set(moduleName)
    systemProperties = [
            'codion.client.connectionType': 'local',
            'codion.db.url'               : 'jdbc:h2:mem:h2db',
            'codion.db.initScripts'       : 'src/main/sql/create_schema.sql'
    ]
}

tasks.register('runClientRMI', ModularJavaExec) {
    group 'application'
    mainClass.set(execMainClass)
    mainModule.set(moduleName)
    systemProperties = [
            'codion.client.connectionType'    : 'remote',
            'codion.server.hostname'          : "${serverHostName}",
            'codion.client.trustStore'        : '../../framework/server/src/main/config/truststore.jks',
            'codion.client.trustStorePassword': 'crappypass'
    ]
}

tasks.register('runClientHttp', ModularJavaExec) {
    group 'application'
    mainClass.set(execMainClass)
    mainModule.set(moduleName)
    systemProperties = [
            'codion.client.connectionType': 'http',
            'codion.client.http.secure'   : 'false',
            'codion.client.http.hostname' : "${serverHostName}"
    ]
}

tasks.register('runLoadTestRMI', ModularJavaExec) {
    group 'application'
    mainClass.set(execLoadTestMainClass)
    mainModule.set(moduleName)
    systemProperties = [
            'codion.client.connectionType'    : 'remote',
            'codion.server.hostname'          : "${serverHostName}",
            'codion.client.trustStore'        : '../../framework/server/src/main/config/truststore.jks',
            'codion.client.trustStorePassword': 'crappypass'
    ]
}

tasks.register('runLoadTestHttp', ModularJavaExec) {
    group 'application'
    mainClass.set(execLoadTestMainClass)
    mainModule.set(moduleName)
    systemProperties = [
            'codion.client.connectionType': 'http',
            'codion.client.http.secure'   : 'false',
            'codion.client.http.hostname' : "${serverHostName}"
    ]
}

tasks.register('clientLocalScript', ModularCreateStartScripts) {
    runTask = tasks.runClientLocal
    applicationName = project.name + '-local'
    defaultJvmOpts = [
            '-Dcodion.client.connectionType=local',
            '-Dcodion.db.url=jdbc:h2:mem:h2db',
            '-Dcodion.db.initScripts=../config/create_schema.sql'
    ]
}

tasks.register('clientRMIScript', ModularCreateStartScripts) {
    runTask = tasks.runClientRMI
    applicationName = project.name + '-remote'
    defaultJvmOpts = [
            '-Dcodion.client.connectionType=remote',
            "-Dcodion.server.hostname=" + "${serverHostName}",
            '-Dcodion.client.trustStore=../config/truststore.jks',
            '-Dcodion.client.trustStorePassword=crappypass'
    ]
}

tasks.register('clientHttpScript', ModularCreateStartScripts) {
    runTask = tasks.runClientHttp
    applicationName = project.name + '-http'
    defaultJvmOpts = [
            '-Dcodion.client.connectionType=http',
            '-Dcodion.client.http.secure=false',
            "-Dcodion.client.http.hostname=" + "${serverHostName}",
    ]
}

tasks.register('loadTestRMIScript', ModularCreateStartScripts) {
    runTask = tasks.runLoadTestRMI
    applicationName = project.name + '-loadtest-remote'
    defaultJvmOpts = [
            '-Dcodion.client.connectionType=remote',
            "-Dcodion.server.hostname=" + "${serverHostName}",
            '-Dcodion.client.trustStore=../config/truststore.jks',
            '-Dcodion.client.trustStorePassword=crappypass'
    ]
}

tasks.register('loadTestHttpScript', ModularCreateStartScripts) {
    runTask = tasks.runLoadTestHttp
    applicationName = project.name + '-loadtest-http'
    defaultJvmOpts = [
            '-Dcodion.client.connectionType=http',
            '-Dcodion.client.http.secure=false',
            "-Dcodion.client.http.hostname=" + "${serverHostName}",
    ]
}

applicationDistribution.into('config') {
    from(files('src/main/sql/create_schema.sql'))
    from(files('../../framework/server/src/main/config/truststore.jks'))
}

applicationDistribution.into('bin') {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(clientLocalScript)
    from(clientRMIScript)
    from(clientHttpScript)
    from(loadTestHttpScript)
    from(loadTestRMIScript)
}