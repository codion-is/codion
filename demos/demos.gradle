buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.javamodularity:moduleplugin:1.6.0"
    }
}

apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'org.javamodularity.moduleplugin'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    jcenter()
}

sonarqube {
    skipProject = true
}

dependencies {
    implementation "org.slf4j:slf4j-api:${slf4jApiVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

configurations {
    /** A configuration with a single jar file containing the application domain model
     * (and server classes), used by the Framework Server module when running the server*/
    domain
}

task domainJar(type: Jar, dependsOn: classes) {
    group 'build'
    archiveBaseName.set(archiveBaseName.get() + '-domain')
    from sourceSets.main.output
    include '**/domain/**/*'
    include '**/server/**/*'
    includeEmptyDirs false
}

artifacts {
    domain domainJar
}

test {
    moduleOptions {
        addExports = [
                'org.junit.platform.commons/org.junit.platform.commons.util': 'ALL-UNNAMED',
                'org.junit.platform.commons/org.junit.platform.commons.logging': 'ALL-UNNAMED'
        ]
    }
    useJUnitPlatform()
    systemProperty "jminor.db.url", "jdbc:h2:mem:h2db"
    systemProperty "jminor.db.initScript", "src/main/sql/create_schema.sql"
    systemProperty "jminor.test.user", "scott:tiger"
}

application {
    mainClassName = 'dummyModule/dummy.class.Name'
}