apply plugin: 'java'
apply plugin: 'jacoco'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.deprecation = true
}

javadoc {
    options.encoding = 'UTF-8'
}

sonarqube {
    skipProject = true
}

dependencies {
    implementation(libs.slf4j.api)
    testImplementation(libs.junit.api)
    testRuntimeOnly(libs.junit.engine)
}

configurations {
    /** A configuration with a single jar file containing the application domain model
     * (and server classes), used by the Framework Server module when running the server*/
    domain
}

tasks.register('domainJar', Jar) {
    dependsOn classes
    group 'build'
    archiveBaseName.set(archiveBaseName.get() + '-domain')
    from sourceSets.main.output
    include '**/domain/**/*'
    include '**/server/**/*'
    include '**/services/**/*'
    includeEmptyDirs false
    manifest {
        attributes 'Automatic-Module-Name': "is." + project.name.replace('-', '.') + ".domain"
    }
}

jar.finalizedBy domainJar

artifacts {
    domain domainJar
}

test {
    useJUnitPlatform()
    systemProperty "codion.db.url", "jdbc:h2:mem:h2db"
    systemProperty "codion.db.initScripts", "src/main/sql/create_schema.sql"
    systemProperty "codion.test.user", "scott:tiger"
}

tasks.register('writeVersion') {
    group 'build'
    def versionFile = file(sourceSets.main.output.resourcesDir.getAbsolutePath() + "/version.properties")
    inputs.property("version", project.version)
    outputs.file(versionFile)
    outputs.upToDateWhen { false }

    doLast {
        def versionProperties = new Properties()
        versionProperties.put('version', project.version)
        versionProperties.store(versionFile.newWriter(), null)
    }
}

classes.dependsOn writeVersion

tasks.register('runClientLocal', JavaExec) {
    group 'application'
    classpath = sourceSets.main.runtimeClasspath
    systemProperties = [
            'codion.client.connectionType': 'local',
            'codion.db.url'               : 'jdbc:h2:mem:h2db',
            'codion.db.initScripts'       : 'src/main/sql/create_schema.sql',
            'sun.awt.disablegrab'         : 'true'
    ]
}

tasks.register('runClientRMI', JavaExec) {
    group 'application'
    classpath = sourceSets.main.runtimeClasspath
    systemProperties = [
            'codion.client.connectionType'    : 'remote',
            'codion.server.hostname'          : "${serverHostName}",
            'codion.client.trustStore'        : '../../framework/server/src/main/config/truststore.jks',
            'codion.client.trustStorePassword': 'crappypass',
            'sun.awt.disablegrab'             : 'true'
    ]
}

tasks.register('runClientHttp', JavaExec) {
    group 'application'
    classpath = sourceSets.main.runtimeClasspath
    systemProperties = [
            'codion.client.connectionType': 'http',
            'codion.client.http.secure'   : 'false',
            'codion.client.http.hostname' : "${serverHostName}",
            'sun.awt.disablegrab'         : 'true'
    ]
}

tasks.register('runLoadTestRMI', JavaExec) {
    group 'application'
    classpath = sourceSets.main.runtimeClasspath
    systemProperties = [
            'codion.client.connectionType'    : 'remote',
            'codion.server.hostname'          : "${serverHostName}",
            'codion.client.trustStore'        : '../../framework/server/src/main/config/truststore.jks',
            'codion.client.trustStorePassword': 'crappypass'
    ]
}

tasks.register('runLoadTestHttp', JavaExec) {
    group 'application'
    classpath = sourceSets.main.runtimeClasspath
    systemProperties = [
            'codion.client.connectionType': 'http',
            'codion.client.http.secure'   : 'false',
            'codion.client.http.hostname' : "${serverHostName}"
    ]
}