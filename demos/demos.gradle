buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.javamodularity:moduleplugin:1.8.12"
    }
}

apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'org.javamodularity.moduleplugin'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

sonarqube {
    skipProject = true
}

dependencies {
    implementation (libs.slf4j.api)
    testImplementation (libs.junit.api)
    testRuntimeOnly (libs.junit.engine)
}

configurations {
    /** A configuration with a single jar file containing the application domain model
     * (and server classes), used by the Framework Server module when running the server*/
    domain
}

tasks.register('domainJar', Jar) {
    dependsOn classes
    group 'build'
    archiveBaseName.set(archiveBaseName.get() + '-domain')
    from sourceSets.main.output
    include '**/domain/**/*'
    include '**/server/**/*'
    include '**/services/**/*'
    includeEmptyDirs false
    manifest {
        attributes 'Automatic-Module-Name' : "is." + project.name.replace('-', '.') + ".domain"
    }
}

jar.finalizedBy domainJar

artifacts {
    domain domainJar
}

test {
    moduleOptions {
        addExports = [
                'org.junit.platform.commons/org.junit.platform.commons.util': 'ALL-UNNAMED',
                'org.junit.platform.commons/org.junit.platform.commons.logging': 'ALL-UNNAMED'
        ]
    }
    useJUnitPlatform()
    systemProperty "codion.db.url", "jdbc:h2:mem:h2db"
    systemProperty "codion.db.initScripts", "src/main/sql/create_schema.sql"
    systemProperty "codion.test.user", "scott:tiger"
}

tasks.register('writeVersion') {
    group 'build'
    def versionFile = file(sourceSets.main.output.resourcesDir.getAbsolutePath() + "/version.properties")
    inputs.property("version", project.version)
    outputs.file(versionFile)
    outputs.upToDateWhen { false }

    doLast {
        def versionProperties = new Properties()
        versionProperties.put('version', project.version)
        versionProperties.store(versionFile.newWriter(), null)
    }
}

classes.dependsOn writeVersion

//https://github.com/java9-modularity/gradle-modules-plugin/issues/165
modularity.disableEffectiveArgumentsAdjustment()